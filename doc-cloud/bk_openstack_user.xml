<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book 
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="os-user-guide" xml:lang="en">
 <info>
  <title>OpenStack End User Guide</title><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber><date>
<?dbtimestamp format="B d, Y"?></date>
  <legalnotice role="cc-by">
   <para>
    Except where otherwise noted, this document is licensed under
    <emphasis role="bold">Creative Commons Attribution 3.0 License
    </emphasis><link xlink:href="http://creativecommons.org/licenses/by/3.0/legalcode"/>
   </para>
  </legalnotice>
  <abstract>
   <para>
    OpenStack is an open-source cloud computing platform for public and
    private clouds. A series of interrelated projects deliver a cloud
    infrastructure solution. This guide shows OpenStack end users how to
    create and manage resources in an OpenStack cloud with the OpenStack
    dashboard and OpenStack client commands.
   </para>

   <para>
    This guide documents OpenStack Juno, OpenStack Icehouse and OpenStack
    Havana releases.
   </para>
  </abstract>
 </info>
 <preface xml:id="openstack_user_guide" xml:base="../common/ch_using_openstack_overview.xml">
  <title>How can I <phrase condition="enduser">use</phrase><phrase condition="adminuser">administer</phrase> an OpenStack cloud?</title>
<?dbhtml stop-chunking?>
  <para condition="enduser">
   As an OpenStack cloud end user, you can provision your own resources
   within the limits set by administrators.
  </para>
  <para condition="adminuser">
   As an OpenStack cloud administrative user, you can manage tenants, known
   as projects, users, services, images, flavors, and quotas.
  </para>
  <para>
   The examples in this guide show you how to perform tasks by using the
   following methods:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     OpenStack dashboard. Use this web-based graphical interface, code named
     <link xlink:href="https://github.com/openstack/horizon/">horizon</link>,
     to view, create, and manage resources<phrase condition="adminuser"> and
     services</phrase>.
    </para>
   </listitem>
   <listitem>
    <para>
     OpenStack command-line clients. Each core OpenStack project has a
     command-line client that you can use to run simple commands to view,
     create, and manage resources<phrase condition="adminuser"> and
     services</phrase> in a cloud and automate tasks by using scripts.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   You can modify these examples for your specific use cases.
  </para>
  <para>
   In addition to these ways of interacting with a cloud, you can access the
   OpenStack APIs directly or indirectly through
   <link xlink:href="http://curl.haxx.se/">cURL</link> commands or open
   SDKs. You can automate access or build tools to manage resources and
   services by using the native OpenStack APIs or the EC2 compatibility API.
  </para>
  <para>
   To use the OpenStack APIs, it helps to be familiar with HTTP/1.1, RESTful
   web services, the OpenStack services, and JSON or XML data serialization
   formats.
  </para>
  <sect1 xml:id="audience">
   <title>Who should read this book?</title>

   <para condition="enduser">
    This book is written for anyone who uses virtual machines and cloud
    resources to develop software or perform research. You should have years
    of experience with Linux-based tool sets and be comfortable using both
    GUI and CLI based tools. While this book includes some information about
    using Python to create and manage cloud resources, Python knowledge is
    not a pre-requisite for reading this book.
   </para>

   <para condition="adminuser">
    This book is written for administrators who maintain and secure an
    OpenStack cloud installation to serve end users' needs. You should have
    years of experience with Linux-based tools for system administration.
    You should also be familiar with OpenStack basics, such as managing
    projects and users, troubleshooting, performing backup and recovery, and
    monitoring. For more information, see the
    <link xlink:href="http://docs.openstack.org/ops"><citetitle>OpenStack
    Operations Guide</citetitle></link>.
   </para>
  </sect1>
  <sect1 xml:id="section_conventions">
<?dbhtml stop-chunking?>

   <title>Conventions</title>

   <para>
    The OpenStack documentation uses several typesetting conventions.
   </para>

   <sect2 xml:id="conventions-admonitions">
    <title>Notices</title>
    <para>
     Notices take these forms:
    </para>
    <note>
     <para>
      A handy tip or reminder.
     </para>
    </note>
    <important>
     <para>
      Something you must be aware of before proceeding.
     </para>
    </important>
    <warning>
     <para>
      Critical information about the risk of data loss or security issues.
     </para>
    </warning>
   </sect2>

   <sect2 xml:id="conventions-prompts">
    <title>Command prompts</title>
    <variablelist>
     <varlistentry>
      <term>
              $ prompt
            </term>
      <listitem>
       <para>
        Any user, including the <literal>root</literal> user, can run
        commands that are prefixed with the <literal>$</literal> prompt.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              # prompt
            </term>
      <listitem>
       <para>
        The <literal>root</literal> user must run commands that are prefixed
        with the <literal>#</literal> prompt. You can also prefix these
        commands with the <command>sudo</command> command, if available, to
        run them.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>
 </preface>
 <chapter xml:id="ch_dashboard">
  <title>OpenStack dashboard</title>
  <para>
   As a cloud end user, you can use the OpenStack dashboard to provision
   your own resources within the limits set by administrators. You can
   modify the examples provided in this section to create other types and
   sizes of server instances.
  </para>
<?hard-pagebreak?>
  <sect1 xml:id="log_in_dashboard" xml:base="../common/section_dashboard_access.xml">
<?dbhtml stop-chunking?>

   <title>Log in to the dashboard</title>

   <para>
    The dashboard is available on the node with the
    <literal>nova-dashboard</literal> server role.
   </para>

   <procedure>
    <step>
     <para>
      Ask the cloud operator for the host name or public IP address from
      which you can access the dashboard, and for your user name and
      password.
     </para>
    </step>
    <step>
     <para>
      Open a web browser that has JavaScript and cookies enabled.
     </para>
     <note>
      <para>
       To use the Virtual Network Computing (VNC) client for the dashboard,
       your browser must support HTML5 Canvas and HTML5 WebSockets. The VNC
       client is based on noVNC. For details, see
       <link xlink:href="https://github.com/kanaka/noVNC/blob/master/README.md">noVNC:
       HTML5 VNC Client</link>. For a list of supported browsers, see
       <link xlink:href="https://github.com/kanaka/noVNC/wiki/Browser-support">Browser
       support</link>.
      </para>
     </note>
    </step>
    <step>
     <para>
      In the address bar, enter the host name or IP address for the
      dashboard.
     </para>
<screen>https://<replaceable>ipAddressOrHostName</replaceable>/</screen>
     <note>
      <para>
       If a certificate warning appears when you try to access the URL for
       the first time, a self-signed certificate is in use, which is not
       considered trustworthy by default. Verify the certificate or add an
       exception in the browser to bypass the warning.
      </para>
     </note>
    </step>
    <step>
     <para>
      On the <guimenu>Log In</guimenu> page, enter your user name and
      password, and click <guimenu>Sign In</guimenu>.
     </para>
     <para>
      The top of the window displays your user name. You can also access
      <guimenu>Settings</guimenu> or sign out of the dashboard.
     </para>
     <para>
      The visible tabs and functions in the dashboard depend on the access
      permissions, or <emphasis role="italic">roles</emphasis>, of the user
      you are logged in as.
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        If you are logged in as an end user, the
        <link linkend="dashboard_project_tab">Project</link> tab is
        displayed.
       </para>
      </listitem>
      <listitem>
       <para>
        If you are logged in as an administrator, the
        <link linkend="dashboard_project_tab">Project</link> tab and
        <link linkend="dashboard_admin_tab">Admin</link> tab are displayed.
       </para>
      </listitem>
     </itemizedlist>
    </step>
   </procedure>

   <sect2 xml:id="dashboard_project_tab">
    <title>OpenStack dashboardâ€”Project tab</title>
    <para>
     Projects are organizational units in the cloud, and are also known as
     tenants or accounts. Each user is a member of one or more projects.
     Within a project, a user creates and manages instances.
    </para>
    <para>
     From the <guimenu>Project</guimenu> tab, you can view and manage the
     resources in a selected project, including instances and images. You
     select the project from the <guimenu>CURRENT PROJECT</guimenu> list at
     the top of the tab.
    </para>
    <figure xml:id="dashboard_project_user">
     <title>Project tab</title>
     <mediaobject>
      <imageobject>
       <imagedata fileref="dashboard-project-tab.png" width="100%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>
     From the <guimenu>Project</guimenu> tab, you can access the following
     tabs:
    </para>
    <informaltable width="75%">
     <tgroup cols="2">
      <colspec colwidth="30%"/>
      <colspec colwidth="70%"/>
      <thead>
       <row>
        <entry>
         <para>
          <guimenu>Compute</guimenu> tab
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          <guimenu>Overview</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View reports for the project.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Instances</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, launch, create a snapshot from, stop, pause, or reboot
          instances, or connect to them through VNC.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Volumes</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Use the following tabs to complete these tasks:
         </para>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            <guimenu>Volumes</guimenu>
           </para>
           <para>
            View, create, edit, and delete volumes.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Volume Snapshots</guimenu>
           </para>
           <para>
            View, create, edit, and delete volume snapshots.
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Images</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View images and instance snapshots created by project users, plus
          any images that are publicly available. Create, edit, and delete
          images, and launch instances from images and snapshots.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Access &amp; Security</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Use the following tabs to complete these tasks:
         </para>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            <guimenu>Security Groups</guimenu>
           </para>
           <para>
            View, create, edit, and delete security groups and security
            group rules.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Key Pairs</guimenu>
           </para>
           <para>
            View, create, edit, import, and delete key pairs.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Floating IPs</guimenu>
           </para>
           <para>
            Allocate an IP address to or release it from a project.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>API Access</guimenu>
           </para>
           <para>
            View API endpoints.
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Network</guimenu> tab
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Network Topology</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View the network topology.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Networks</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Create and manage public and private networks.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Routers</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Create and manage subnets.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Object Store</guimenu> tab
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Containers</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Create and manage containers and objects.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Orchestration</guimenu> tab
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Stacks</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Use the REST API to orchestrate multiple composite cloud
          applications.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect2>

   <sect2 xml:id="dashboard_admin_tab">
    <title>OpenStack dashboardâ€”Admin tab</title>
    <para>
     Administrative users can use the <guimenu>Admin</guimenu> tab to view
     usage and to manage instances, volumes, flavors, images, projects,
     users, services, and quotas.
    </para>
    <figure xml:id="dashboard_admin_project_tab">
     <title>Admin tab</title>
     <mediaobject>
      <imageobject>
       <imagedata fileref="dashboard-admin-tab.png" width="100%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>
     Access the following categories to complete these tasks:
    </para>
    <informaltable width="75%">
     <tgroup cols="2">
      <colspec colwidth="30%"/>
      <colspec colwidth="70%"/>
      <thead>
       <row>
        <entry>
         <para>
          <guimenu>System Panel</guimenu> tab
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          <guimenu>Overview</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View basic reports.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Resource Usage</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Use the following tabs to view the following usages:
         </para>
<!--Lots of updates happening to the dashboard. Leaving these for
                now. Know from talking to Devs that there are some big changes to
                Resource Usage tab. Want to retain these for now. And remove once
                  confirmed that these options will not be retained anymore -->
         <itemizedlist mark="bullet" spacing="normal">
<!--  <varlistentry>
                  <term><guilabel>Global Disk Usage</guilabel></term>
                  <listitem>
                    <para>View the disk usage for all tenants as an average over
                    the last 30 days.</para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                  <term><guilabel>Global Network Traffic Usage</guilabel></term>
                  <listitem>
                    <para>View the network usage for all tenants as an average over
                      the last 30 days.</para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                  <term><guilabel>Global Object Storage Usage</guilabel></term>
                  <listitem>
                    <para>View the object storage usage for all tenants as an average
                      over the last 30 days.</para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><guilabel>Global Network Usage</guilabel></term>
                    <listitem>
                      <para>View the network usage for all tenants as an average
                        over the last 30 days.</para>
                    </listitem>
                  </varlistentry>-->
          <listitem>
           <para>
            <guimenu>Daily Report</guimenu>
           </para>
           <para>
            View the daily report.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Stats</guimenu>
           </para>
           <para>
            View the statistics of all resources.
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Hypervisors</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View the hypervisor summary.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Host Aggregates</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, and edit host aggregates. View the list of
          availability zones.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Instances</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, pause, resume, suspend, migrate, soft or hard reboot, and
          delete running instances that belong to users of some, but not
          all, projects. Also, view the log for an instance or access an
          instance through VNC.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Volumes</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, edit, and delete volumes and volume types.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Flavors</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, edit, view extra specifications for, and delete
          flavors. A flavor is size of an instance.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Images</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, edit properties for, and delete custom images.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Networks</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, edit properties for, and delete networks.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Routers</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, edit properties for, and delete routers.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>System Info</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          Use the following tabs to view the service information:
         </para>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            <guimenu>Services</guimenu>
           </para>
           <para>
            View a list of the services.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Compute Services</guimenu>
           </para>
           <para>
            View a list of all Compute services.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Network Agents</guimenu>
           </para>
           <para>
            View the network agents.
           </para>
          </listitem>
          <listitem>
           <para>
            <guimenu>Default Quotas</guimenu>
           </para>
           <para>
            View default quota values. Quotas are hard-coded in OpenStack
            Compute and define the maximum allowable size and number of
            resources.
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Identity Panel</guimenu> tab
         </para>
        </entry>
<!--Lots of updates happening to the dashboard. Leaving these for now.-->
       </row>
<!--   <tr>
                <td><para><guilabel>Domains</guilabel></para></td>
                <td><para>View domains.</para></td>
              </tr>-->
       <row>
        <entry>
         <para>
          <guimenu>Projects</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, assign users to, remove users from, and delete
          projects.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <guimenu>Users</guimenu>
         </para>
        </entry>
        <entry>
         <para>
          View, create, enable, disable, and delete users.
         </para>
        </entry>
       </row>
<!-- <tr>
                <td><para><guilabel>Groups</guilabel></para></td>
                <td>
                  <para>View, create, enable, disable, and delete groups.</para></td>
              </tr>
              <tr>
                <td><para><guilabel>Roles</guilabel></para></td>
                <td><para>View, create, enable, disable, and delete roles.</para></td>
              </tr>-->
      </tbody>
     </tgroup>
    </informaltable>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_manage_images">
   <title>Upload and manage images</title>

   <para>
    A virtual machine image, referred to in this document simply as an
    image, is a single file that contains a virtual disk that has a bootable
    operating system installed on it. Images are used to create virtual
    machine instances within the cloud. For information about creating image
    files, see the
    <link xlink:href="http://docs.openstack.org/image-guide/content/"><citetitle>OpenStack
    Virtual Machine Image Guide</citetitle></link>.
   </para>

   <para>
    Depending on your role, you may have permission to upload and manage
    virtual machine images. Operators might restrict the upload and
    management of images to cloud administrators or operators only. If you
    have the appropriate privileges, you can use the dashboard to upload and
    manage images in the <guimenu>admin</guimenu> project.
   </para>

   <note>
    <para>
     You can also use the <command>glance</command> and
     <command>nova</command> command-line clients or the Image Service and
     Compute APIs to manage images. See <xref linkend="cli_manage_images"/>.
    </para>
   </note>

   <sect2 xml:id="dashboard_create_images">
    <title>Upload an image</title>
    <para>
     Follow this procedure to upload an image to a project.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>CURRENT PROJECT</guimenu> on the
       <guimenu>Project</guimenu> tab, select the appropriate project.
      </para>
     </step>
     <step>
      <para>
       On the <guimenu>Project</guimenu> tab, click
       <guimenu>Images</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Image</guimenu>.
      </para>
      <para>
       The Create An Image dialog box appears.
      </para>
     </step>
     <step>
      <para>
       Enter the following values:
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="25%"/>
        <colspec colwidth="75%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Enter a name for the image.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Description</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Optionally, enter a brief description of the image.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Image Source</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Choose the image source from the list. Your choices are
            <guimenu>Image Location</guimenu> and <guimenu>Image
            File</guimenu>.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Image File</guimenu> or <guimenu>Image
            Location</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Based on your selection for <guimenu>Image Source</guimenu>, you
            either enter the location URL of the image in the <guimenu>Image
            Location</guimenu> field. or browse to the image file on your
            system and add it.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Format</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select the correct format (for example, QCOW2) for the image.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Architecture</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the architecture. For example, <literal>i386</literal>
            for a 32-bit architecture or <literal>x86_64</literal> for a
            64-bit architecture.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Minimum Disk (GB)</guimenu> and <guimenu>Minimum RAM
            (MB)</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Leave these optional fields empty.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Public</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box to make the image public to all users with
            access to the current project.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Protected</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box to ensure that only users with permissions
            can delete the image.
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Create Image</guimenu>.
      </para>
      <para>
       The image is queued to be uploaded. It might take some time before
       the status changes from Queued to Active.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_update_images">
    <title>Update an image</title>
    <para>
     Follow this procedure to update an existing image.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>CURRENT PROJECT</guimenu> on the
       <guimenu>Project</guimenu> tab, select the appropriate project.
      </para>
     </step>
     <step>
      <para>
       On the <guimenu>Project</guimenu> tab, click
       <guimenu>Images</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the image that you want to edit.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Actions</guimenu> column, click
       <guimenu>More</guimenu> and then select <guimenu>Edit</guimenu> from
       the list.
      </para>
     </step>
     <step>
      <para>
       In the Update Image dialog box, you can perform the following
       actions:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Change the name of the image.
        </para>
       </listitem>
       <listitem>
        <para>
         Select the <guimenu>Public</guimenu> check box to make the image
         public.
        </para>
       </listitem>
       <listitem>
        <para>
         Clear the <guimenu>Public</guimenu> check box to make the image
         private.
        </para>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Click <guimenu>Update Image</guimenu>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_delete_images">
    <title>Delete an image</title>
    <para>
     Deletion of images is permanent and
     <emphasis role="bold">cannot</emphasis> be reversed. Only users with
     the appropriate permissions can delete images.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>CURRENT PROJECT</guimenu> on the
       <guimenu>Project</guimenu> tab, select the appropriate project.
      </para>
     </step>
     <step>
      <para>
       On the <guimenu>Project</guimenu> tab, click
       <guimenu>Images</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the images that you want to delete.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Delete Images</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Confirm Delete Image</guimenu> dialog box, click
       <guimenu>Delete Images</guimenu> to confirm the deletion.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
<!-- end user guide -->
  <sect1 xml:id="Launching_Instances_using_Dashboard">
   <title>Configure access and security for instances</title>

<?dbhtml stop-chunking?>

   <para>
    Before you launch an instance, you should add security group rules to
    enable users to ping and use SSH to connect to the instance. Security
    groups are sets of IP filter rules that define networking access and are
    applied to all instances within a project. To do so, you either
    <link linkend="security_groups_add_rule">add rules to the default
    security group</link> or add a new security group with rules.
   </para>

   <para>
    Key pairs are SSH credentials that are injected into an instance when it
    is launched. To use key pair injection, the image that the instance is
    based on must contain the <literal>cloud-init</literal> package. Each
    project should have at least one key pair. For more information, see
    <xref linkend="keypair_add"/>.
   </para>

   <para>
    If you have generated a key pair with an external tool, you can import
    it into OpenStack. The key pair can be used for multiple instances that
    belong to a project. For more information, see
    <xref linkend="dashboard_import_keypair"/>.
   </para>

   <para>
    When an instance is created in OpenStack, it is automatically assigned a
    fixed IP address in the network to which the instance is assigned. This
    IP address is permanently associated with the instance until the
    instance is terminated. However, in addition to the fixed IP address, a
    floating IP address can also be attached to an instance. Unlike fixed IP
    addresses, floating IP addresses are able to have their associations
    modified at any time, regardless of the state of the instances involved.
   </para>

   <sect2 xml:id="security_groups_add_rule">
    <title>Add a rule to the default security group</title>
    <para>
     This procedure enables SSH and ICMP (ping) access to instances. The
     rules apply to all instances within a given project, and should be set
     for every project unless there is a reason to prohibit SSH or ICMP
     access to the instances.
    </para>
    <para>
     This procedure can be adjusted as necessary to add additional security
     group rules to a project, if your cloud requires them.
    </para>
    <procedure>
     <note>
      <para>
       When adding a rule, you must specify the protocol used with the
       destination port or source port.
      </para>
     </note>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click <guimenu>Access
       &amp; Security</guimenu>. The <guimenu>Security Groups</guimenu>
       tab shows the security groups that are available for this project.
      </para>
     </step>
     <step>
      <para>
       Select the <guimenu>default</guimenu> security group and click
       <guimenu>Edit Rules</guimenu>.
      </para>
     </step>
     <step>
      <para>
       To allow SSH access, click <guimenu>Add Rule</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Add Rule dialog box, enter the following values:
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="50%"/>
        <colspec colwidth="50%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Rule</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>SSH</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Remote</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>CIDR</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>CIDR</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>0.0.0.0/0</literal>
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <note>
       <para>
        To accept requests from a particular range of IP addresses, specify
        the IP address block in the <guimenu>CIDR</guimenu> box.
       </para>
      </note>
     </step>
     <step>
      <para>
       Click <guimenu>Add</guimenu>.
      </para>
      <para>
       Instances will now have SSH port 22 open for requests from any IP
       address.
      </para>
     </step>
     <step>
      <para>
       To add an ICMP rule, click <guimenu>Add Rule</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Add Rule dialog box, enter the following values:
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="50%"/>
        <colspec colwidth="50%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Rule</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>All ICMP</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Direction</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>Ingress</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Remote</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>CIDR</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>CIDR</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            <literal>0.0.0.0/0</literal>
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Add</guimenu>.
      </para>
      <para>
       Instances will now accept all incoming ICMP packets.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="keypair_add">
    <title>Add a key pair</title>
    <para>
     Create at least one key pair for each project.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click <guimenu>Access
       &amp; Security</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click the <guimenu>Keypairs</guimenu> tab, which shows the key pairs
       that are available for this project.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Keypair</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Create Keypair dialog box, enter a name for your key pair, and
       click <guimenu>Create Keypair</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Respond to the prompt to download the key pair.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_import_keypair">
    <title>Import a key pair</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click <guimenu>Access
       &amp; Security</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click the <guimenu>Keypairs</guimenu> tab, which shows the key pairs
       that are available for this project.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Import Keypair</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Import Keypair dialog box, enter the name of your key pair,
       copy the public key into the <guimenu>Public Key</guimenu> box, and
       then click <guimenu>Import Keypair</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Save the <filename>*.pem</filename> file locally.
      </para>
     </step>
     <step>
      <para>
       To change its permissions so that only you can read and write to the
       file, run the following command:
      </para>
<screen><prompt role="user">$</prompt> chmod 0600 <replaceable>yourPrivateKey</replaceable>.pem</screen>
      <note>
       <para>
        If you are using the dashboard from a Windows computer, use PuTTYgen
        to load the <filename>*.pem</filename> file and convert and save it
        as <filename>*.ppk</filename>. For more information see the
        <link xlink:href="http://winscp.net/eng/docs/ui_puttygen">WinSCP web
        page for PuTTYgen</link>.
       </para>
      </note>
     </step>
     <step>
      <para>
       To make the key pair known to SSH, run the <command>ssh-add</command>
       command.
      </para>
<screen><prompt role="user">$</prompt> ssh-add <replaceable>yourPrivateKey</replaceable>.pem</screen>
     </step>
    </procedure>
    <para>
     The Compute database registers the public key of the key pair.
    </para>
    <para>
     The dashboard lists the key pair on the <guimenu>Access &amp;
     Security</guimenu> tab.
    </para>
   </sect2>

   <sect2 xml:id="add_floating_ip">
    <title>Allocate a floating IP address to an instance</title>
    <para>
     When an instance is created in OpenStack, it is automatically assigned
     a fixed IP address in the network to which the instance is assigned.
     This IP address is permanently associated with the instance until the
     instance is terminated.
    </para>
    <para>
     However, in addition to the fixed IP address, a floating IP address can
     also be attached to an instance. Unlike fixed IP addresses, floating IP
     addresses can have their associations modified at any time, regardless
     of the state of the instances involved. This procedure details the
     reservation of a floating IP address from an existing pool of addresses
     and the association of that address with a specific instance.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click <guimenu>Access
       &amp; Security</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click the <guimenu>Floating IPs</guimenu> tab, which shows the
       floating IP addresses allocated to instances.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Allocate IP to Project</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Choose the pool from which to pick the IP address.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Allocate IP</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Floating IPs</guimenu> list, click <guimenu>
       Associate</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Manage Floating IP Associations dialog box, choose the
       following options:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         The <guimenu>IP Address</guimenu> field is filled automatically,
         but you can add a new IP address by clicking the
         <guimenu>+</guimenu> button.
        </para>
       </listitem>
       <listitem>
        <para>
         In the <guimenu>Ports to be associated</guimenu> field, select a
         port from the list.
        </para>
        <para>
         The list shows all the instances with their fixed IP addresses.
        </para>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Click <guimenu>Associate</guimenu>.
      </para>
     </step>
    </procedure>
    <note>
     <para>
      To disassociate an IP address from an instance, click the
      <guimenu>Disassociate</guimenu> button.
     </para>
     <para>
      To release the floating IP address back into the pool of addresses,
      click the <guimenu>More</guimenu> button and select the
      <guimenu>Release Floating IP</guimenu> option.
     </para>
    </note>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_launch_instances">
   <title>Launch and manage instances</title>

   <para>
    Instances are virtual machines that run inside the cloud.
   </para>

   <para>
    You can <link linkend="dashboard_launch_instances_from_image">launch an
    instance</link> from the following sources:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Images uploaded to the OpenStack Image Service, as described in
      <xref linkend="dashboard_manage_images"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Image that you have copied to a persistent volume. The instance
      launches from the volume, which is provided by the
      <systemitem class="service">cinder-volume</systemitem> API through
      iSCSI.
     </para>
    </listitem>
   </itemizedlist>

<?hard-pagebreak?>

   <sect2 xml:id="dashboard_launch_instances_from_image">
    <title>Launch an instance</title>
<?dbhtml stop-chunking?>
    <para>
     When you launch an instance from an image, OpenStack creates a local
     copy of the image on the compute node where the instance starts.
    </para>
    <para>
     When you launch an instance from a volume, note the following steps:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       To select the volume to from which to launch, launch an instance from
       an arbitrary image on the volume. The image that you select does not
       boot. Instead, it is replaced by the image on the volume that you
       choose in the next steps.
      </para>
      <para>
       To boot a Xen image from a volume, the image you launch in must be
       the same type, fully virtualized or paravirtualized, as the one on
       the volume.
      </para>
     </listitem>
     <listitem>
      <para>
       Select the volume or volume snapshot from which to boot. Enter a
       device name. Enter <literal>vda</literal> for KVM images or
       <literal>xvda</literal> for Xen images.
      </para>
     </listitem>
    </itemizedlist>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Images</guimenu>.
      </para>
      <para>
       The dashboard shows the images that have been uploaded to OpenStack
       Image Service and are available for this project.
      </para>
      <para>
       For details on creating images, see
       <link xlink:href="http://docs.openstack.org/image-guide/content/ch_creating_images_manually.html">Creating
       images manually</link> in the <citetitle>OpenStack Virtual Machine
       Image Guide</citetitle>.
      </para>
     </step>
     <step>
      <para>
       Select an image and click <guimenu>Launch</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Launch Instance dialog box, specify the following values:
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <thead>
         <row>
          <entry>
           <para>
            <guimenu>Details</guimenu> tab
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Availability Zone</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            By default, this value is set to the availability zone given by
            the cloud provider (for example, <literal>us-west</literal> or
            <literal>apac-south</literal>). For some cases, it could be
            <literal>nova</literal>.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Instance Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Assign a name to the virtual machine.
           </para>
           <note>
            <para>
             The name you assign here becomes the initial host name of the
             server. After the server is built, if you change the server
             name in the API or change the host name directly, the names are
             not updated in the dashboard.
            </para>
            <para>
             Server names are not guaranteed to be unique when created so
             you could have two instances with the same host name.
            </para>
           </note>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Flavor</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the size of the instance to launch.
           </para>
           <note>
            <para>
             The flavor is selected based on the size of the image selected
             for launching an instance. For example, while creating an
             image, if you have entered the value in the <guimenu>Minimum
             RAM (MB)</guimenu> field as 2048, then on selecting the image,
             the default flavor is <guimenu>m1.small</guimenu>.
            </para>
           </note>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Instance Count</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            To launch multiple instances, enter a value greater than 1. The
            default is 1.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Instance Boot Source</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Your options are:
           </para>
           <itemizedlist mark="bullet" spacing="normal">
            <listitem>
             <para>
              <guimenu>Boot from image</guimenu>
             </para>
             <para>
              If you choose this option, a new field for <guimenu>Image
              Name</guimenu> displays. You can select the image from the
              list.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Boot from snapshot</guimenu>
             </para>
             <para>
              If you choose this option, a new field for <guimenu>Instance
              Snapshot</guimenu> displays. You can select the snapshot from
              the list.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Boot from volume</guimenu>
             </para>
             <para>
              If you choose this option, a new field for
              <guimenu>Volume</guimenu> displays. You can select the volume
              from the list.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Boot from image (creates a new volume)</guimenu>
             </para>
             <para>
              With this option, you can boot from an image and create a
              volume by entering the <guimenu>Device Size</guimenu> and
              <guimenu>Device Name</guimenu> for your volume. Click the
              <guimenu>Delete on Terminate</guimenu> option to delete the
              volume on terminating the instance.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Boot from volume snapshot (creates a new
              volume)</guimenu>
             </para>
             <para>
              Using this option, you can boot from a volume snapshot and
              create a new volume by choosing <guimenu>Volume
              Snapshot</guimenu> from a list and adding a <guimenu>Device
              Name</guimenu> for your volume. Click the <guimenu>Delete on
              Terminate</guimenu> option to delete the volume on terminating
              the instance.
             </para>
            </listitem>
           </itemizedlist>
           <para>
            Since you are launching an instance from an image, <guimenu>Boot
            from image</guimenu> is chosen by default.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Image Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            This field changes based on your previous selection. Since you
            have chosen to launch an instance using an image, the
            <guimenu>Image Name</guimenu> field displays. Select the image
            name from the dropdown list.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Access &amp; Security </guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Keypair</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a key pair.
           </para>
           <para>
            If the image uses a static root password or a static key set
            (neither is recommended), you do not need to provide a key pair
            to launch the instance.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Security Groups</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Activate the security groups that you want to assign to the
            instance.
           </para>
           <para>
            Security groups are a kind of cloud firewall that define which
            incoming network traffic is forwarded to instances. For details,
            see <xref linkend="security_groups_add_rule"/>.
           </para>
           <para>
            If you have not created any security groups, you can assign only
            the default security group to the instance.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Networking</guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Selected Networks</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            To add a network to the instance, click the <guimenu>+</guimenu>
            in the <guimenu>Available Networks</guimenu> field.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Post-Creation</guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Customization Script</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a customization script that runs after your instance
            launches.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Advanced Options</guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Disk Partition</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select the type of disk partition from the dropdown list.
           </para>
           <itemizedlist mark="bullet" spacing="normal">
            <listitem>
             <para>
              <guimenu>Automatic</guimenu>
             </para>
             <para>
              Entire disk is single partition and automatically resizes.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Manual</guimenu>
             </para>
             <para>
              Faster build times but requires manual partitioning.
             </para>
            </listitem>
           </itemizedlist>
<!--Currently this tab is displayed all the time. As a
                          part of LP#1306302, this will be available only when the
                          nova_diskconfig setting is enabled. Will remove the
                          comment and include this note when the bug is backported
                          to Icehouse.
                          <note>
                            <para>This tab is displayed only if you have enabled
                              the nova_diskconfig extension.</para>
                          </note>-->
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Launch</guimenu>.
      </para>
      <para>
       The instance starts on a compute node in the cloud.
      </para>
     </step>
    </procedure>
    <para>
     The <guimenu>Instances</guimenu> tab shows the instance's name, its
     private and public IP addresses, size, status, task, and power state.
    </para>
    <para>
     If you did not provide a key pair, security groups, or rules, users can
     access the instance only from inside the cloud through VNC. Even
     pinging the instance is not possible without an ICMP rule configured.
     To access the instance through a VNC console, see
     <xref linkend="instance_console"/>.
    </para>
   </sect2>

<?hard-pagebreak?>

   <sect2 xml:id="ssh-into-instance">
    <title>Connect to your instance by using SSH</title>
    <para>
     To use SSH to connect to your instance, you use the downloaded keypair
     file.
    </para>
    <note>
     <para>
      The user name is <literal>ubuntu</literal> for the Ubuntu cloud images
      on TryStack.
     </para>
    </note>
    <procedure>
     <step>
      <para>
       Copy the IP address for your instance.
      </para>
     </step>
     <step>
      <para>
       Use the <command>ssh</command> command to make a secure connection to
       the instance. For example:
      </para>
<screen><prompt role="user">$</prompt> ssh -i MyKey.pem ubuntu@10.0.0.2</screen>
     </step>
     <step>
      <para>
       At the prompt, type <literal>yes</literal>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="track_usage">
    <title>Track usage for instances</title>
    <para>
     You can track usage for instances for each project. You can track costs
     per month by showing metrics like number of vCPUs, disks, RAM, and
     uptime for all your instances.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Overview</guimenu>.
      </para>
     </step>
     <step>
      <para>
       To query the instance usage for a month, select a month and click
       <guimenu>Submit</guimenu>.
      </para>
     </step>
     <step>
      <para>
       To download a summary, click <guimenu>Download CSV Summary</guimenu>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="instance_snapshots">
    <title>Create an instance snapshot</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Instances</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the instance from which to create a snapshot.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Actions</guimenu> column, click <guimenu>Create
       Snapshot</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Create Snapshot dialog box, enter a name for the snapshot, and
       click <guimenu>Create Snapshot</guimenu>.
      </para>
      <para>
       The <guimenu>Images</guimenu> category shows the instance snapshot.
      </para>
     </step>
    </procedure>
    <para>
     To launch an instance from the snapshot, select the snapshot and click
     <guimenu>Launch</guimenu>. Proceed with
     <xref linkend="dashboard_launch_instances_from_image"/>.
    </para>
   </sect2>

   <sect2 xml:id="control_instance_states">
    <title>Manage an instance</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Instances</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select an instance.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>More</guimenu> list in the <guimenu>Actions</guimenu>
       column, select the state.
      </para>
      <para>
       You can resize or rebuild an instance. You can also choose to view
       the instance console log, edit instance or the security groups.
       Depending on the current state of the instance, you can pause,
       resume, suspend, soft or hard reboot, or terminate it.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_create_networks">
   <title>Create and manage networks</title>

<?dbhtml stop-chunking?>

   <para>
    The OpenStack Networking service provides a scalable system for managing
    the network connectivity within an OpenStack cloud deployment. It can
    easily and quickly react to changing network needs (for example,
    creating and assigning new IP addresses).
   </para>

   <para>
    Networking in OpenStack is complex. This section provides the basic
    instructions for creating a network and a router. For detailed
    information about managing networks, refer to the
    <link xlink:href="http://docs.openstack.org/admin-guide-cloud/content/ch_networking.html"><emphasis role="italic">OpenStack
    Cloud Administrator Guide</emphasis></link>.
   </para>

   <sect2 xml:id="dashboard_create_network">
    <title>Create a network</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Networks</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Network</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Create Network dialog box, specify the following values.
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <thead>
         <row>
          <entry>
           <para>
            <guimenu>Network</guimenu> tab
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Network Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a name to identify the network.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Subnet</guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Create Subnet</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box to create a subnet
           </para>
           <para>
            You do not have to specify a subnet when you create a network,
            but if you do not, any attached instance receives an Error
            status.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Subnet Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a name for the subnet.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Network Address</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the IP address for the subnet.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>IP Version</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select IPv4 or IPv6.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Gateway IP</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify an IP address for a specific gateway. This parameter is
            optional.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Disable Gateway</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box to disable a gateway IP address.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Subnet Detail</guimenu> tab
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Enable DHCP</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box to enable DHCP.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Allocation Pools</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify IP address pools.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>DNS Name Servers</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a name for the DNS server.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Host Routes</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the IP address of host routes.
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Create</guimenu>.
      </para>
      <para>
       The dashboard shows the network on the <guimenu>Networks</guimenu>
       tab.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_create_router">
    <title>Create a router</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Routers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Router</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Create Router dialog box, specify a name for the router and
       click <guimenu>Create Router</guimenu>.
      </para>
      <para>
       The new router is now displayed in the <guimenu>Routers</guimenu>
       tab.
      </para>
     </step>
     <step>
      <para>
       Click the new router's <guimenu>Set Gateway</guimenu> button.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>External Network</guimenu> field, specify the network
       to which the router will connect, and then click <guimenu>Set
       Gateway</guimenu>.
      </para>
     </step>
     <step>
      <para>
       To connect a private network to the newly created router, perform the
       following steps:
      </para>
      <substeps performance="required">
       <step>
        <para>
         On the <guimenu>Routers</guimenu> tab, click the name of the
         router.
        </para>
       </step>
       <step>
        <para>
         On the Router Details page, click <guimenu>Add Interface</guimenu>.
        </para>
       </step>
       <step>
        <para>
         In the Add Interface dialog box, specify the following information:
        </para>
        <informaltable width="75%">
         <tgroup cols="2">
          <colspec colwidth="30%"/>
          <colspec colwidth="70%"/>
          <tbody>
           <row>
            <entry>
             <para>
              <guimenu>Subnet</guimenu>
             </para>
            </entry>
            <entry>
             <para>
              Select a subnet.
             </para>
            </entry>
           </row>
           <row>
            <entry>
             <para>
              <guimenu>IP Address (optional)</guimenu>
             </para>
            </entry>
            <entry>
             <para>
              Enter the router interface IP address for the selected subnet.
             </para>
             <para>
              Note: If this value is not set, then by default, the first
              host IP address in the subnet is used by OpenStack Networking.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
        <para>
         The <guimenu>Router Name</guimenu> and <guimenu>Router ID</guimenu>
         fields are automatically updated.
        </para>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       Click <guimenu>Add Interface</guimenu>.
      </para>
     </step>
    </procedure>
    <para>
     You have successfully created the router. You can view the new topology
     from the <guimenu>Network Topology</guimenu> tab.
    </para>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_manage_containers">
   <title>Create and manage object containers</title>

<?dbhtml stop-chunking?>

   <para>
    OpenStack Object Storage provides a distributed, API-accessible storage
    platform that can be integrated directly into an application or used to
    store any type of file, including VM images, backups, archives, or media
    files. In the OpenStack Dashboard, you can only manage containers and
    objects.
   </para>

   <para>
    In OpenStack Object Storage, containers provide storage for objects in a
    manner similar to a Windows folder or Linux file directory, though they
    cannot be nested. An object in OpenStack consists of the file to be
    stored in the container and any accompanying metadata.
   </para>

   <sect2 xml:id="create_container">
    <title>Create a container</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Container</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Create Container dialog box, enter a name for the container,
       and then click <guimenu>Create Container</guimenu>.
      </para>
     </step>
    </procedure>
    <para>
     You have successfully created a container.
    </para>
    <note>
     <para>
      To delete a container, click the <guimenu>More</guimenu> button and
      select <guimenu>Delete Container</guimenu>.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="upload_object">
    <title>Upload an object</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the container in which you want to store your object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Upload Object</guimenu>.
      </para>
      <para>
       The Upload Object To Container:
       <replaceable>&lt;name&gt;</replaceable> dialog box is
       displayed. <replaceable>&lt;name&gt;</replaceable> is the name
       of the container to which you are uploading the object.
      </para>
     </step>
     <step>
      <para>
       Enter a name for the object.
      </para>
     </step>
     <step>
      <para>
       Browse to and select the file that you want to upload.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Upload Object</guimenu>.
      </para>
     </step>
    </procedure>
    <para>
     You have successfully uploaded an object to the container.
    </para>
    <note>
     <para>
      To delete an object, click the <guimenu>More</guimenu> button and
      select <guimenu>Delete Object</guimenu>.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="manage_object">
    <title>Manage an object</title>
    <procedure xml:id="edit_object">
     <title>To edit an object</title>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the container in which you want to store your object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>More</guimenu> and choose <guimenu>Edit</guimenu> from
       the dropdown list.
      </para>
      <para>
       The Edit Object dialog box is displayed.
      </para>
     </step>
     <step>
      <para>
       Browse to and select the file that you want to upload.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Update Object</guimenu>.
      </para>
     </step>
    </procedure>
    <note>
     <para>
      To delete an object, click the <guimenu>More</guimenu> button and
      select <guimenu>Delete Object</guimenu>.
     </para>
    </note>
    <procedure xml:id="copy_object">
     <title>To copy an object from one container to another</title>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the container in which you want to store your object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>More</guimenu> and choose <guimenu>Copy</guimenu> from
       the dropdown list.
      </para>
     </step>
     <step>
      <para>
       In the Copy Object: launch dialog box, enter the following values:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         <guimenu>Destination Container</guimenu>: Choose the destination
         container from the list.
        </para>
       </listitem>
       <listitem>
        <para>
         <guimenu>Path</guimenu>: Specify a path in which the new copy
         should be stored inside of the selected container.
        </para>
       </listitem>
       <listitem>
        <para>
         <guimenu>Destination object name</guimenu>: Enter a name for the
         object in the new container.
        </para>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Click <guimenu>Copy Object</guimenu>.
      </para>
     </step>
    </procedure>
    <procedure xml:id="create_empty_object">
     <title>To create a metadata-only object without a file</title>
     <para>
      You can create a new object in container without a file available and
      can upload the file later when it is ready. This temporary object acts
      a place-holder for a new object, and enables the user to share object
      metadata and URL info in advance.
     </para>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the container in which you want to store your object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Upload Object</guimenu>.
      </para>
      <para>
       The Upload Object To Container:
       <replaceable>&lt;name&gt;</replaceable> dialog box is
       displayed. <replaceable>&lt;name&gt;</replaceable> is the name
       of the container to which you are uploading the object.
      </para>
     </step>
     <step>
      <para>
       Enter a name for the object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Update Object</guimenu>.
      </para>
     </step>
    </procedure>
    <procedure xml:id="create_pseudo_folder">
     <title>To create a pseudo-folder</title>
     <para>
      Pseudo-folders are similar to folders in your desktop operating
      system. They are virtual collections defined by a common prefix on the
      object's name.
     </para>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Containers</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the container in which you want to store your object.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Pseudo-folder</guimenu>.
      </para>
      <para>
       The Create Pseudo-Folder in Container <replaceable>&lt;name&gt;
       </replaceable> dialog box is displayed.
       <replaceable>&lt;name&gt; </replaceable> is the name of the
       container to which you are uploading the object.
      </para>
     </step>
     <step>
      <para>
       Enter a name for the pseudo-folder.
      </para>
      <para>
       A slash (/) character is used as the delimiter for pseudo-folders in
       the Object Store.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create</guimenu>.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_manage_volumes">
   <title>Create and manage volumes</title>

<?dbhtml stop-chunking?>

   <para>
    Volumes are block storage devices that you attach to instances to enable
    persistent storage. You can attach a volume to a running instance or
    detach a volume and attach it to another instance at any time. You can
    also create a snapshot from or delete a volume. Only administrative
    users can create volume types.
   </para>

   <sect2 xml:id="dashboard_create_volumes">
    <title>Create a volume</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Create Volume</guimenu>.
      </para>
      <para>
       In the dialog box that opens, enter or select the following values.
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Volume Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a name for the volume.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Description</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Optionally, provide a brief description for the volume.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Type</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Leave this field blank.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Size (GB)</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            The size of the volume in gigabytes.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Volume Source</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select one of the following options:
           </para>
           <itemizedlist mark="bullet" spacing="normal">
            <listitem>
             <para>
              <guimenu>No source, empty volume</guimenu>
             </para>
             <para>
              Creates an empty volume.
             </para>
             <note>
              <para>
               An empty volume does not contain a file system or a partition
               table.
              </para>
             </note>
            </listitem>
            <listitem>
             <para>
              <guimenu>Snapshot</guimenu>
             </para>
             <para>
              If you choose this option, a new field for <guimenu>Use
              snapshot as a source</guimenu> displays. You can select the
              snapshot from the list.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Image</guimenu>
             </para>
             <para>
              If you choose this option, a new field for <guimenu>Use image
              as a source</guimenu> displays. You can select the image from
              the list.
             </para>
             <para>
              Select the <guimenu>Availability Zone</guimenu> from the list.
              By default, this value is set to the availability zone given
              by the cloud provider (for example, <literal>us-west</literal>
              or <literal>apac-south</literal>). For some cases, it could be
              <literal>nova</literal>.
             </para>
            </listitem>
            <listitem>
             <para>
              <guimenu>Volume</guimenu>
             </para>
             <para>
              If you choose this option, a new field for <guimenu>Use volume
              as a source</guimenu> displays. You can select the volume from
              the list.
             </para>
            </listitem>
           </itemizedlist>
           <note>
            <para>
             Options to use a snapshot or a volume as the source for a
             volume are displayed only if there are existing snapshots or
             volumes.
            </para>
           </note>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Create Volume</guimenu>.
      </para>
     </step>
    </procedure>
    <para>
     The dashboard shows the volume on the <guimenu>Volumes</guimenu> tab.
    </para>
   </sect2>

   <sect2 xml:id="attach_volumes_to_instances">
    <title>Attach a volume to an instance</title>
    <para>
     After you create one or more volumes, you can attach them to instances.
     You can attach a volume to one instance at a time.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the volume to add to an instance and click <guimenu>Edit
       Attachments</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Manage Volume Attachments</guimenu> dialog box,
       select an instance.
      </para>
     </step>
     <step>
      <para>
       Enter the name of the device from which the volume is accessible by
       the instance.
      </para>
      <note>
       <para>
        The actual device name might differ from the volume name because of
        hypervisor settings.
       </para>
      </note>
     </step>
     <step>
      <para>
       Click <guimenu>Attach Volume</guimenu>.
      </para>
      <para>
       The dashboard shows the instance to which the volume is now attached
       and the device name.
      </para>
     </step>
    </procedure>
    <para>
     You can view the status of a volume in the <guimenu>Volumes</guimenu>
     tab of the dashboard. The volume is either Available or In-Use.
    </para>
    <para>
     Now you can log in to the instance and mount, format, and use the disk.
    </para>
   </sect2>

   <sect2 xml:id="dashboard_detach_volume">
    <title>Detach a volume from an instance</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the volume and click <guimenu>Edit Attachments</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Detach Volume</guimenu> and confirm your changes.
      </para>
     </step>
    </procedure>
    <para>
     A message indicates whether the action was successful.
    </para>
   </sect2>

   <sect2 xml:id="create_volume_snapsnots">
    <title>Create a snapshot from a volume</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select a volume from which to create a snapshot.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>More</guimenu> list, select <guimenu>Create
       Snapshot</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the dialog box that opens, enter a snapshot name and a brief
       description.
      </para>
     </step>
     <step>
      <para>
       Confirm your changes.
      </para>
      <para>
       The dashboard shows the new volume snapshot in <guimenu>Volume
       Snapshots</guimenu> tab.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_edit_volume">
    <title>Edit a volume</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>CURRENT PROJECT</guimenu> on the
       <guimenu>Project</guimenu> tab, select the appropriate project.
      </para>
     </step>
     <step>
      <para>
       On the <guimenu>Project</guimenu> tab, click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the image that you want to edit.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Actions</guimenu> column, click <guimenu>Edit
       Volume</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Edit Volume</guimenu> dialog box, update the name and
       description of the image.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Edit Volume</guimenu>.
      </para>
     </step>
    </procedure>
    <note>
     <para>
      You can extend a volume by using the <guimenu>Extend Volume</guimenu>
      option available in the <guimenu>More</guimenu> dropdown list and
      entering the new value for volume size.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="dashboard_delete_volume">
    <title>Delete a volume</title>
    <para>
     When you delete an instance, the data in its attached volumes is not
     destroyed.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Volumes</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the check boxes for the volumes that you want to delete.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Delete Volumes</guimenu> and confirm your choice.
      </para>
      <para>
       A message indicates whether the action was successful.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_stacks">
   <title>Launch and manage stacks</title>

<?dbhtml stop-chunking?>

   <para>
    OpenStack Orchestration is a service that you can use to orchestrate
    multiple composite cloud applications. This service supports use of both
    the Amazon Web Services (AWS) CloudFormation template format through
    both a Query API that is compatible with CloudFormation and the native
    OpenStack Heat Orchestration Template (HOT) format through a REST API.
   </para>

   <para>
    These flexible template languages enable application developers to
    describe and automate the deployment of infrastructure, services, and
    applications. The templates enable creation of most OpenStack resource
    types, such as instances, floating IP addresses, volumes, security
    groups, and users. The resources, once created, are referred to as
    stacks.
   </para>

   <para>
    The template languages are described in
    <link xlink:href="http://docs.openstack.org/developer/heat/template_guide/index.html">the
    Template Guide</link> in the
    <link xlink:href="http://docs.openstack.org/developer/heat/">Heat
    developer documentation</link>.
   </para>

   <sect2 xml:id="dashboard_create_stacks">
    <title>Launch a stack</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Stacks</guimenu> in the <guimenu>Orchestration</guimenu>
       category on the <guimenu>Projects</guimenu> tab.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Launch Stack</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Select Template</guimenu> dialog box, specify the
       following values.
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Template Source</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Choose the source of the template from the list.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Template URL/File/Data</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Depending on the source that you selected, enter the URL, browse
            to the file location, or directly include the template.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Environment Source</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Choose the source of the environment from the list. The
            environment files contain additional settings for the stack.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Environment URL/File/Data</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Depending on the source that you selected, enter the URL, browse
            to the file location, or directly include the environment.
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Next</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Launch Stack</guimenu> dialog box, specify the
       following values.
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Stack Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Enter a name to identify the stack.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Creation Timeout (minutes)</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the number of minutes that can elapse before the launch
            of the stack times out.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Rollback On Failure</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select this check box if you want if you want the service to
            roll back changes if the stack fails to launch.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Password for user "demo"</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the password that the default user uses when the stack
            is created.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>DBUsername</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the name of the database user.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>LinuxDistribution</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the Linux distribution that is used in the stack.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>DBRootPassword</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the root password for the database.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>KeyName</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the name of the key pair to use to log in to the stack.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>DBName</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the name of the database.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>DBPassword</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the password for the database.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>InstanceType</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify the flavor for the instance.
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click <guimenu>Launch</guimenu> to create a stack.
      </para>
     </step>
     <step>
      <para>
       The <guimenu>Stacks</guimenu> tab shows the stack.
      </para>
     </step>
    </procedure>
    <para>
     After the stack is created, click on the stack name to see the
     following details:
    </para>
    <variablelist>
     <varlistentry>
      <term>
              Topology
            </term>
      <listitem>
       <para>
        The topology of the stack.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              Overview
            </term>
      <listitem>
       <para>
        The parameters and details of the stack.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              Resources
            </term>
      <listitem>
       <para>
        The resources used by the stack.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              Events
            </term>
      <listitem>
       <para>
        The events related to the stack.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 xml:id="dashboard_manage_stacks">
    <title>Manage a stack</title>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Stacks</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the stack that you want to update.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Change Stack Template</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Select Template</guimenu> dialog box, select the new
       template source or environment source.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Next</guimenu>.
      </para>
      <para>
       The <guimenu>Update Stack Parameters</guimenu> window appears.
      </para>
     </step>
     <step>
      <para>
       Enter new values for any parameters that you want to update.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Update</guimenu>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_delete_stacks">
    <title>Delete a stack</title>
    <para>
     When you delete a stack, you cannot undo this action.
    </para>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Stacks</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Select the stack that you want to delete.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Delete Stack</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the confirmation dialog box, click <guimenu>Delete Stack</guimenu>
       to confirm the deletion.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="dashboard_databases">
   <title>Create and manage databases</title>

<?dbhtml stop-chunking?>

   <para>
    The Database service provides scalable and reliable cloud provisioning
    functionality for both relational and non-relational database engines.
    Users can quickly and easily use database features without the burden of
    handling complex administrative tasks.
   </para>

   <sect2 xml:id="dashboard_create_db_instance">
    <title>Create a database instance</title>
    <formalpara>
     <title>Prerequisites</title>
     <para>
      Before you create a database instance, you need to configure a default
      datastore and make sure you have an appropriate flavor for the type of
      database instance you want.
     </para>
    </formalpara>
    <procedure>
     <step>
      <para>
       <emphasis role="bold">Configure a default datastore.</emphasis>
      </para>
      <para>
       Because the dashboard does not let you choose a specific datastore to
       use with an instance, you need to configure a default datastore. The
       dashboard then uses the default datastore to create the instance.
      </para>
      <substeps performance="required">
       <step>
        <para>
         Add the following line to
         <filename>/etc/trove/trove.conf</filename>:
        </para>
<screen remap="programlisting-ini">default_datastore = <replaceable>DATASTORE_NAME</replaceable></screen>
        <para>
         Replace <replaceable>DATASTORE_NAME</replaceable> with the name
         that the administrative user set when issuing the
         <command>trove-manage</command> command to create the datastore.
         You can use the trove <command>datastore-list</command> command to
         display the datastores that are available in your environment.
        </para>
        <para>
         For example, if your MySQL datastore name is set to
         <literal>mysql</literal>, your entry would look like this:
        </para>
<screen remap="programlisting-ini">default_datastore = mysql</screen>
       </step>
       <step>
        <para>
         Restart Database services on the controller node:
        </para>
<screen><prompt role="user">#</prompt> service trove-api restart
<prompt role="user">#</prompt> service trove-taskmanager restart
<prompt role="user">#</prompt> service trove-conductor restart</screen>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       <emphasis role="bold">Verify flavor.</emphasis>
      </para>
      <para>
       Make sure an <link linkend="create_db">appropriate flavor
       exists</link> for the type of database instance you want.
      </para>
     </step>
    </procedure>
    <formalpara>
     <title>Create database instance</title>
     <para>
      Once you have configured a default datastore and verified that you
      have an appropriate flavor, you can create a database instance.
     </para>
    </formalpara>
    <procedure>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Databases</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Database Instances</guimenu>. This lists the instances
       that already exist in your environment.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Launch Instance</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Launch Database</guimenu> dialog box, specify the
       following values.
      </para>
      <informaltable width="75%">
       <tgroup cols="2">
        <colspec colwidth="30%"/>
        <colspec colwidth="70%"/>
        <thead>
         <row>
          <entry>
           <para>
            <guimenu>Details</guimenu>
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            <guimenu>Database Name</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a name for the database instance.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Flavor</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select an appropriate flavor for the instance.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Volume Size</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Select a volume size. Volume size is expressed in GB.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Initialize Databases</guimenu>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Initial Database</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Optionally provide a comma separated list of databases to
            create, for example:
           </para>
           <para>
            <literal>database1</literal>, <literal>database2</literal>,
            <literal>database3</literal>
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Initial Admin User</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Create an initial admin user. This user will have access to all
            the databases you create.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Password</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Specify a password associated with the initial admin user you
            just named.
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            <guimenu>Host</guimenu>
           </para>
          </entry>
          <entry>
           <para>
            Optionally, allow the user to connect only from this host. If
            you do not specify a host, this user will be allowed to connect
            from anywhere.
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </step>
     <step>
      <para>
       Click the <guimenu>Launch</guimenu> button. The new database instance
       appears in the databases list.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_backup_db">
    <title>Backup and restore a database</title>
    <para>
     You can use Database services to backup a database and store the backup
     artifact in the Object Storage module. Later on, if the original
     database is damaged, you can use the backup artifact to restore the
     database. The restore process creates a database instance.
    </para>
    <para>
     This example shows you how to back up and restore a MySQL database.
    </para>
    <procedure>
     <title>To backup and restore a database</title>
     <step>
      <para>
       <emphasis role="bold">Backup the database instance.</emphasis>
      </para>
      <substeps performance="required">
       <step>
        <para>
         Log in to the dashboard, choose a project, and click
         <guimenu>Databases</guimenu>.
        </para>
       </step>
       <step>
        <para>
         Click <guimenu>Database Instances</guimenu>. This displays the
         existing instances in your system.
        </para>
       </step>
       <step>
        <para>
         Click <guimenu>Create Backup</guimenu>.
        </para>
       </step>
       <step>
        <para>
         In the Backup Database dialog box, specify the following values:
        </para>
        <informaltable width="75%">
         <tgroup cols="2">
          <colspec colwidth="30%"/>
          <colspec colwidth="70%"/>
          <tbody>
           <row>
            <entry>
             <para>
              <guimenu>Name</guimenu>
             </para>
            </entry>
            <entry>
             <para>
              Specify a name for the backup.
             </para>
            </entry>
           </row>
           <row>
            <entry>
             <para>
              <guimenu>Database Instance</guimenu>
             </para>
            </entry>
            <entry>
             <para>
              Select the instance you want to back up.
             </para>
            </entry>
           </row>
           <row>
            <entry>
             <para>
              <guimenu>Description</guimenu>
             </para>
            </entry>
            <entry>
             <para>
              Specify an optional description.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </step>
       <step>
        <para>
         Click <guimenu>Backup</guimenu>. The new backup appears in the
         backup list.
        </para>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       <emphasis role="bold">Restore a database instance.</emphasis>
      </para>
      <para>
       Now assume that your original database instance is damaged and you
       need to restore it. You do the restore by using your backup to create
       a new database instance.
      </para>
      <substeps performance="required">
       <step>
        <para>
         Log in to the dashboard, choose a project, and click
         <guimenu>Databases</guimenu>.
        </para>
       </step>
       <step>
        <para>
         Click <guimenu>Database Backups</guimenu>. This lists the available
         backups.
        </para>
       </step>
       <step>
        <para>
         Check the backup you want to use and click <guimenu>Restore
         Backup</guimenu>.
        </para>
       </step>
       <step>
        <para>
         In the <guimenu>Launch Database</guimenu> dialog box, specify the
         <link linkend="dashboard_create_db_instance">values you want to use
         for the new database instance</link>. Click the <guimenu>Restore
         From Database</guimenu> tab and make sure that this new instance is
         based on the correct backup.
        </para>
       </step>
       <step>
        <para>
         Click <guimenu>Launch</guimenu>. The new instance appears in the
         database instances list.
        </para>
       </step>
      </substeps>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="dashboard_update_db">
    <title>Update a database instance</title>
    <para>
     You can change various characteristics of a database instance, such as
     its volume size and flavor.
    </para>
    <procedure>
     <title>To change the volume size of an instance</title>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Databases</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Database Instances</guimenu>. This displays the
       existing instances in your system.
      </para>
     </step>
     <step>
      <para>
       Check the instance you want to work with. In the
       <guimenu>Actions</guimenu> column, expand the drop down menu and
       select <guimenu>Resize Volume</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Resize Database Volume dialog box, fill in the <guimenu>New
       Size</guimenu> field with an integer indicating the new size you want
       for the instance. Express the size in GB, and note that the new size
       must be larger than the current size.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Resize Database Volume</guimenu>.
      </para>
     </step>
    </procedure>
    <procedure>
     <title>To change the flavor of an instance</title>
     <step>
      <para>
       Log in to the dashboard, choose a project, and click
       <guimenu>Databases</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Database Instances</guimenu>. This displays the
       existing instances in your system.
      </para>
     </step>
     <step>
      <para>
       Check the instance you want to work with. In the
       <guimenu>Actions</guimenu> column, expand the drop down menu and
       select <guimenu>Resize Instance</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the Resize Database Instance dialog box, expand the drop down menu
       in the <guimenu>New Flavor</guimenu> field. Select the new flavor you
       want for the instance.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Resize Database Instance</guimenu>.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
 </chapter>
 <chapter xml:id="ch_cli">
  <title>OpenStack command-line clients</title>
  <sect1 xml:id="section_cli_overview" xml:base="../common/section_cli_overview.xml">
   <title>Overview</title>

   <para>
    Each OpenStack project provides a command-line client, which enables you
    to access the project API through easy-to-use commands. For example, the
    Compute service provides a nova command-line client.
   </para>

   <para>
    You can run the commands from the command line, or include the commands
    within scripts to automate tasks. If you provide OpenStack credentials,
    such as your user name and password, you can run these commands on any
    computer.
   </para>

   <para>
    Internally, each command uses cURL command-line tools, which embed API
    requests. OpenStack APIs are RESTful APIs, and use the HTTP protocol.
    They include methods, URIs, media types, and response codes.
   </para>

   <para>
    OpenStack APIs are open-source Python clients, and can run on Linux or
    Mac OS X systems. On some client commands, you can specify a
    <command>debug</command> parameter to show the underlying API request
    for the command. This is a good way to become familiar with the
    OpenStack API calls.
   </para>

   <para>
    The following table lists the command-line client for each OpenStack
    service with its package name and description.
   </para>

   <table>
    <title>OpenStack services and clients</title>
    <tgroup cols="4">
     <colspec colwidth="15%"/>
     <colspec colwidth="10%"/>
     <colspec colwidth="20%"/>
     <colspec colwidth="55%"/>
     <thead>
      <row>
       <entry>
        <para>
         Service
        </para>
       </entry>
       <entry>
        <para>
         Client
        </para>
       </entry>
       <entry>
        <para>
         Package
        </para>
       </entry>
       <entry>
        <para>
         Description
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Block Storage
        </para>
       </entry>
       <entry>
        <para>
         <command>cinder</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-cinderclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and manage volumes.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Compute
        </para>
       </entry>
       <entry>
        <para>
         <command>nova</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-novaclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and manage images, instances, and flavors.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Database Service
        </para>
       </entry>
       <entry>
        <para>
         <command>trove</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-troveclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and manage databases.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Identity
        </para>
       </entry>
       <entry>
        <para>
         <command>keystone</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-keystoneclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and manage users, tenants, roles, endpoints, and
         credentials.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Image Service
        </para>
       </entry>
       <entry>
        <para>
         <command>glance</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-glanceclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and manage images.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Networking
        </para>
       </entry>
       <entry>
        <para>
         <command>neutron</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-neutronclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Configure networks for guest servers. This client was previously
         called <command>quantum</command>.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Object Storage
        </para>
       </entry>
       <entry>
        <para>
         <command>swift</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-swiftclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Gather statistics, list items, update metadata, and upload,
         download, and delete files stored by the Object Storage service.
         Gain access to an Object Storage installation for ad hoc
         processing.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Orchestration
        </para>
       </entry>
       <entry>
        <para>
         <command>heat</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-heatclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Launch stacks from templates, view details of running stacks
         including events and resources, and update and delete stacks.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Telemetry
        </para>
       </entry>
       <entry>
        <para>
         <command>ceilometer</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-ceilometerclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Create and collect measurements across OpenStack.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Data Processing
        </para>
       </entry>
       <entry>
        <para>
         <command>sahara</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-saharaclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Creates and manages Hadoop clusters on OpenStack.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Common client
        </para>
       </entry>
       <entry>
        <para>
         <command>openstack</command>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="resource">python-openstackclient</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         Common client for the OpenStack project.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para condition="adminuser">
    For client installation instructions, see
    <link xlink:href="http://docs.openstack.org/user-guide/content/install_clients.html">Install
    the OpenStack command-line clients</link>. For information about the
    OpenStack RC file, see
    <link xlink:href="http://docs.openstack.org/user-guide/content/cli_openrc.html">Download
    and source the OpenStack RC file</link>.
   </para>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="install_clients" xml:base="../common/section_cli_install.xml">
<?dbhtml stop-chunking?>

   <title>Install the OpenStack command-line clients</title>

   <para>
    Install the prerequisite software and the Python package for each
    OpenStack client.
   </para>

   <sect2 xml:id="install_prereq_software">
    <title>Install the prerequisite software</title>
    <para>
     Most Linux distributions include packaged versions of the command-line
     clients that you can install directly, see
     <xref linkend="cli_clients_install_packages"/>.
    </para>
    <para>
     If you need to install the command-line packages source packages, the
     following table lists the software that you need to have to run the
     command-line clients, and provides installation instructions as needed.
    </para>
    <table width="75%">
     <title>Prerequisite software</title>
     <tgroup cols="2">
      <colspec colwidth="15%"/>
      <colspec colwidth="85%"/>
      <thead>
       <row>
        <entry>
         <para>
          Prerequisite
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          Python 2.7 or later
         </para>
        </entry>
        <entry>
         <para>
          Currently, the clients do not support Python 3.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <systemitem class="resource">setuptools</systemitem> package
         </para>
        </entry>
        <entry>
         <para>
          Installed by default on Mac OS X.
         </para>
         <para>
          Many Linux distributions provide packages to make
          <systemitem class="resource">setuptools</systemitem> easy to
          install. Search your package manager for
          <systemitem class="resource">setuptools</systemitem> to find an
          installation package. If you cannot find one, download the
          <systemitem class="resource">setuptools</systemitem> package
          directly from
          <link xlink:href="http://pypi.python.org/pypi/setuptools">http://pypi.python.org/pypi/setuptools</link>.
         </para>
         <para>
          The recommended way to install
          <systemitem class="resource">setuptools</systemitem> on Microsoft
          Windows is to follow the documentation provided
          <link xlink:href="https://pypi.python.org/pypi/setuptools#windows">on
          the setuptools website</link>. Another option is to use the
          unofficial binary installer maintained by Christoph Gohlke
          (<link xlink:href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools">http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools</link>).
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <systemitem class="resource">pip</systemitem> package
         </para>
        </entry>
        <entry>
         <para>
          To install the clients on a Linux, Mac OS X, or Microsoft Windows
          system, use <systemitem class="resource">pip</systemitem>. It is
          easy to use, ensures that you get the latest version of the
          clients from the <link xlink:href="http://pypi.python.org/">Python
          Package Index</link>, and lets you update or remove the packages
          later on.
         </para>
         <para>
          Since the installation process compiles source files, this
          requires the related Python development package for your operating
          system and distribution.
         </para>
         <para>
          Install <systemitem class="resource">pip</systemitem> through the
          package manager for your system:
         </para>
         <para remap="formalpara">
          <emphasis role="bold">MacOS</emphasis>
         </para>
<screen><prompt role="user">#</prompt> easy_install pip</screen>
         <para remap="formalpara">
          <emphasis role="bold">Microsoft Windows</emphasis>
         </para>
         <para>
          Ensure that the <filename>C:\Python27\Scripts</filename> directory
          is defined in the <literal>PATH</literal> environment variable,
          and use the <command>easy_install</command> command from the
          <systemitem class="resource">setuptools</systemitem> package:
         </para>
<screen><prompt role="user">C:\&gt;</prompt>easy_install pip</screen>
         <para>
          Another option is to use the unofficial binary installer provided
          by Christoph Gohlke
          (<link xlink:href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</link>).
         </para>
         <para remap="formalpara">
          <emphasis role="bold">Ubuntu and Debian</emphasis>
         </para>
<screen><prompt role="user">#</prompt> apt-get install python-devel python-pip</screen>
         <para>
          Note that extra dependencies may be required, per operating
          system, depending on the package being installed, such as is the
          case with Tempest.
         </para>
         <para remap="formalpara">
          <emphasis role="bold">Red Hat Enterprise Linux, CentOS, or
          Fedora</emphasis>
         </para>
         <para>
          A packaged version enables you to use
          <systemitem class="resource">yum</systemitem> to install the
          package:
         </para>
<screen><prompt role="user">#</prompt> yum install python-devel python-pip</screen>
         <para>
          There are also packaged versions of the clients available in
          <link xlink:href="http://openstack.redhat.com/">RDO</link> that
          enable <systemitem class="resource">yum</systemitem> to install
          the clients as described in
          <xref linkend="cli_clients_install_packages"/>.
         </para>
         <para remap="formalpara">
          <emphasis role="bold">SUSE Linux Enterprise Linux 11</emphasis>
         </para>
         <para>
          A
          <link xlink:href="https://build.opensuse.org/package/show?package=python-pip&amp;project=Cloud:OpenStack:Master">packaged
          version available in the Open Build Service</link> enables you to
          use or <systemitem class="resource">zypper</systemitem> to install
          the package. First, add the Open Build Service repository:
         </para>
<screen><prompt role="user">#</prompt> zypper addrepo -f obs://Cloud:OpenStack:Icehouse/SLE_11_SP3 Icehouse</screen>
         <para>
          Then install <systemitem class="resource">pip</systemitem> and use
          it to manage client installation:
         </para>
<screen><prompt role="user">#</prompt> zypper install python-devel python-pip</screen>
         <para>
          There are also packaged versions of the clients available that
          enable <systemitem class="resource">zypper</systemitem> to install
          the clients as described in
          <xref linkend="cli_clients_install_packages"/>.
         </para>
         <para remap="formalpara">
          <emphasis role="bold">openSUSE</emphasis>
         </para>
         <para>
          You can install <systemitem class="resource">pip</systemitem> and
          use it to manage client installation:
         </para>
<screen><prompt role="user">#</prompt> zypper install python-devel python-pip</screen>
         <para>
          There are also packaged versions of the clients available that
          enable <systemitem class="resource">zypper</systemitem> to install
          the clients as described in
          <xref linkend="cli_clients_install_packages"/>
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 xml:id="cli_clients_install">
    <title>Install the clients</title>
    <para>
     When following the instructions in this section, replace
     <replaceable>PROJECT</replaceable> with the lowercase name of the
     client to install, such as <command>nova</command>. Repeat for each
     client. The following values are valid:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <literal>ceilometer</literal> - Telemetry API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>cinder</literal> - Block Storage API and extensions
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>glance</literal> - Image Service API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>heat</literal> - Orchestration API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>keystone</literal> - Identity service API and extensions
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>neutron</literal> - Networking API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>nova</literal> - Compute API and extensions
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>sahara</literal> - Database Processing API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>swift</literal> - Object Storage API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>trove</literal> - Database Service API
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>openstack</literal> - Common OpenStack client supporting
       multiple services
      </para>
     </listitem>
    </itemizedlist>
    <para>
     The following example shows the command for installing the nova client
     with <command>pip</command>.
    </para>
<screen><prompt role="user">#</prompt> pip install python-novaclient</screen>
    <sect3 xml:id="cli_clients_install_pip">
     <title>Installing with pip</title>
     <para>
      Use <systemitem class="resource">pip</systemitem> to install the
      OpenStack clients on a Linux, Mac OS X, or Microsoft Windows system.
      It is easy to use and ensures that you get the latest version of the
      client from the <link xlink:href="http://pypi.python.org/pypi">Python
      Package Index</link>. Also,
      <systemitem class="resource">pip</systemitem> enables you to update or
      remove a package.
     </para>
     <para>
      Install each client separately by using the following command:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        For Mac OS X or Linux:
       </para>
<screen><prompt role="user">#</prompt> pip install python-<replaceable>PROJECT</replaceable>client</screen>
      </listitem>
      <listitem>
       <para>
        For Microsoft Windows:
       </para>
<screen><prompt role="user">C:\&gt;</prompt>pip install python-<replaceable>PROJECT</replaceable>client</screen>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="cli_clients_install_packages">
     <title>Installing from packages</title>
     <para>
      RDO, openSUSE and SUSE Linux Enterprise have client packages that can
      be installed without <filename>pip</filename>.
     </para>
     <para>
      On Red Hat Enterprise Linux, CentOS, or Fedora, use
      <command>yum</command> to install the clients from the packaged
      versions available in
      <link xlink:href="http://openstack.redhat.com/">RDO</link>:
     </para>
<screen><prompt role="user">#</prompt> yum install python-<replaceable>PROJECT</replaceable>client</screen>
     <para>
      For openSUSE, use <systemitem class="resource">zypper</systemitem> to
      install the clients from the distribution packages Service:
     </para>
<screen><prompt role="user">#</prompt> zypper install python-<replaceable>PROJECT</replaceable></screen>
     <para>
      For SUSE Linux Enterprise Server, use
      <systemitem class="resource">zypper</systemitem> to install the
      clients from the distribution packages in the Open Build Service.
      First, add the Open Build Service repository:
     </para>
<screen><prompt role="user">#</prompt> zypper addrepo -f obs://Cloud:OpenStack:Icehouse/SLE_11_SP3 Icehouse</screen>
     <para>
      Then you can install the packages:
     </para>
<screen><prompt role="user">#</prompt> zypper install python-<replaceable>PROJECT</replaceable></screen>
    </sect3>
   </sect2>

   <sect2 xml:id="cli_clients_remove_upgrade">
    <title>Upgrade or remove clients</title>
    <para>
     To upgrade a client, add the <literal>--upgrade</literal> option to the
     <command>pip install</command> command:
    </para>
<screen><prompt role="user">#</prompt> pip install --upgrade python-<replaceable>PROJECT</replaceable>client</screen>
    <para>
     To remove the a client, run the <command>pip uninstall</command>
     command:
    </para>
<screen><prompt role="user">#</prompt> pip uninstall python-<replaceable>PROJECT</replaceable>client</screen>
   </sect2>

   <sect2 xml:id="cli_clients_install_nextsteps" condition="enduser">
    <title>What's next</title>
    <para>
     Before you can run client commands, you must create and source the
     <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename> file
     to set environment variables. See <xref linkend="cli_openrc"/>.
    </para>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="checking_version_cli" xml:base="../common/section_cli_version.xml">
   <title>Discover the version number for a client</title>

   <para>
    Run the following command to discover the version number for a client:
   </para>

<screen><prompt role="user">$</prompt> <replaceable>PROJECT</replaceable> --version</screen>

   <para>
    For example, to see the version number for the <command>nova</command>
    client, run the following command:
   </para>

<screen><prompt role="user">$</prompt> nova --version</screen>

   <para>
    The version number (2.15.0 in the example) is returned.
   </para>

<screen>2.15.0</screen>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_openrc" xml:base="../common/section_cli_openrc.xml">
<?dbhtml stop-chunking?>

   <title>Set environment variables using the OpenStack RC file</title>

   <para>
    To set the required environment variables for the OpenStack command-line
    clients, you must create an environment file called an OpenStack rc
    file, or <filename>openrc.sh</filename>
    file.<phrase condition="enduser"> If your OpenStack installation
    provides it, you can download the file from the OpenStack dashboard as
    an administrative user or any other user.</phrase> This project-specific
    environment file contains the credentials that all OpenStack services
    use.
   </para>

   <para>
    When you source the file, environment variables are set for your current
    shell. The variables enable the OpenStack client commands to communicate
    with the OpenStack services that run in the cloud.
   </para>

   <note>
    <para>
     Defining environment variables using an environment file is not a
     common practice on Microsoft Windows. Environment variables are usually
     defined in the <guimenu>Advanced</guimenu> tab of the System Properties
     dialog box.
    </para>
   </note>

   <sect2 xml:id="openrc-dashboard" condition="enduser">
    <title>Download and source the OpenStack RC file</title>
    <procedure>
     <step>
      <para>
       Log in to the OpenStack dashboard, choose the project for which you
       want to download the OpenStack RC file, and click <guimenu>Access
       &amp; Security</guimenu>.
      </para>
     </step>
     <step>
      <para>
       On the API Access tab, click <guimenu>Download OpenStack RC
       File</guimenu> and save the file. The filename will be of the form
       <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       where <replaceable>PROJECT</replaceable> is the name of the project
       for which you downloaded the file.
      </para>
     </step>
     <step>
      <para>
       Copy the
       <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       file to the computer from which you want to run OpenStack commands.
      </para>
      <para>
       For example, copy the file to the computer from which you want to
       upload an image with a <command>glance</command> client command.
      </para>
     </step>
     <step>
      <para>
       On any shell from which you want to run OpenStack commands, source
       the <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       file for the respective project.
      </para>
      <para>
       In the following example, the <filename>demo-openrc.sh</filename>
       file is sourced for the demo project:
      </para>
<screen><prompt role="user">$</prompt> source demo-openrc.sh</screen>
     </step>
     <step>
      <para>
       When you are prompted for an OpenStack password, enter the password
       for the user who downloaded the
       <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       file.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="openrc-create">
    <title>Create and source the OpenStack RC file</title>
    <para condition="enduser">
     Alternatively, you can create the
     <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename> file
     from scratch, if for some reason you cannot download the file from the
     dashboard.
    </para>
    <procedure>
     <step>
      <para>
       In a text editor, create a file named
       <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       file and add the following authentication information:
      </para>
<screen remap="programlisting-bash" condition="enduser">export OS_USERNAME=<replaceable>username</replaceable>
export OS_PASSWORD=<replaceable>password</replaceable>
export OS_TENANT_NAME=<replaceable>projectName</replaceable>
export OS_AUTH_URL=<replaceable>https://identityHost:portNumber/v2.0</replaceable>
# The following lines can be omitted
export OS_TENANT_ID=<replaceable>tenantIDString</replaceable>
export OS_REGION_NAME=<replaceable>regionName</replaceable>
export OS_CACERT=<replaceable>/path/to/cacertFile</replaceable></screen>
     </step>
     <step>
      <para>
       On any shell from which you want to run OpenStack commands, source
       the <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
       file for the respective project. In this example, you source the
       <filename>admin-openrc.sh</filename> file for the
       <replaceable>admin</replaceable> project:
      </para>
<screen><prompt role="user">$</prompt> source admin-openrc.sh</screen>
     </step>
    </procedure>
    <note condition="enduser">
     <para>
      You are not prompted for the password with this method. The password
      lives in clear text format in the
      <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename>
      file. Restrict the permissions on this file to avoid security
      problems. You can also remove the <literal>OS_PASSWORD</literal>
      variable from the file, and use the <option>--password</option>
      parameter with OpenStack client commands instead.
     </para>
    </note>
    <note condition="enduser">
     <para>
      You must set the OS_CACERT environment variable when using the https
      protocol in the OS_AUTH_URL environment setting because the
      verification process for the TLS (HTTPS) server certificate uses the
      one indicated in the environment. This certificate will be used when
      verifying the TLS (HTTPS) server certificate.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="override-variables">
    <title>Override environment variable values</title>
    <para>
     When you run OpenStack client commands, you can override some
     environment variable settings by using the options that are listed at
     the end of the <command>help</command> output of the various client
     commands. For example, you can override the
     <option>OS_PASSWORD</option> setting in the
     <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename> file
     by specifying a password on a <command>keystone</command> command, as
     follows:
    </para>
<screen><prompt role="user">$</prompt> keystone --os-password <replaceable>PASSWORD</replaceable> service-list</screen>
    <para>
     Where <replaceable>PASSWORD</replaceable> is your password.
    </para>
   </sect2>

   <sect2 xml:id="section_keystone-keyring-support">
    <title>Keyring support</title>
    <para>
     Keyring is a password management system available in OpenStack. You can
     install it using the following command:
    </para>
<screen><prompt role="user">$</prompt> pip install keyring</screen>
    <note>
     <para>
      Keyring is used only if <option>--os-use-keyring</option> is specified
      or if the environment variable <option>OS_USE_KEYRING=true</option> is
      defined.
     </para>
    </note>
    <para>
     A user specifies their username and password credentials to interact
     with OpenStack, using any client command. These credentials can be
     specified using various mechanisms, namely, the environment variable,
     or command line argument. It is not safe to specify the password using
     either of these methods.
    </para>
    <para>
     For example, when you specify your password using the command-line
     client with the <option>--os-password</option> argument, anyone with
     access to your computer can view it in plain text with the
     <option>ps</option> field.
    </para>
    <para>
     To avoid storing the password in plain text, you can prompt for the
     OpenStack password interactively. Then, the keyring can store the
     password and the user can safely retrieve it from their keyring. The
     encrypted password is stored in the
     <filename>~/.openstack-keyring.cfg</filename> file.
    </para>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_manage_images" xml:base="../common/section_cli_glance_manage_images.xml">
<?dbhtml stop-chunking?>

   <title>Manage images</title>

   <para>
    The cloud operator assigns roles to users. Roles determine who can
    upload and manage images. The operator might restrict image upload and
    management to only cloud administrators or operators.
   </para>

   <para>
    You can upload images through the <command>glance</command> client or
    the Image Service API. You can also use the <command>nova</command>
    client to list images, set and delete image metadata, delete images, and
    take a snapshot of a running instance to create an image. After you
    upload an image, you cannot change it.
   </para>

   <para>
    For details about image creation, see the
    <link xlink:href="http://docs.openstack.org/image-guide/content/"><citetitle>Virtual
    Machine Image Guide</citetitle></link>.
   </para>

   <sect2 xml:id="glance-image-list">
    <title>List or get details for images (glance)</title>
    <para>
     To get a list of images and to then get further details about a single
     image, use <command>glance image-list</command> and <command>glance
     image-show</command>.
    </para>
<screen><prompt role="user">$</prompt> glance image-list
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+
| ID                                   | Name                            | Disk Format | Container Format | Size     | Status |
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+
| 397e713c-b95b-4186-ad46-6126863ea0a9 | cirros-0.3.2-x86_64-uec         | ami         | ami              | 25165824 | active |
| df430cc2-3406-4061-b635-a51c16e488ac | cirros-0.3.2-x86_64-uec-kernel  | aki         | aki              | 4955792  | active |
| 3cf852bd-2332-48f4-9ae4-7d926d50945e | cirros-0.3.2-x86_64-uec-ramdisk | ari         | ari              | 3714968  | active |
| 7e5142af-1253-4634-bcc6-89482c5f2e8a | myCirrosImage                   | ami         | ami              | 14221312 | active |
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+</screen>
<screen><prompt role="user">$</prompt> glance image-show myCirrosImage
<?db-font-size 45%?>
+---------------------------------------+--------------------------------------+
| Property                              | Value                                |
+---------------------------------------+--------------------------------------+
| Property 'base_image_ref'             | 397e713c-b95b-4186-ad46-6126863ea0a9 |
| Property 'image_location'             | snapshot                             |
| Property 'image_state'                | available                            |
| Property 'image_type'                 | snapshot                             |
| Property 'instance_type_ephemeral_gb' | 0                                    |
| Property 'instance_type_flavorid'     | 2                                    |
| Property 'instance_type_id'           | 5                                    |
| Property 'instance_type_memory_mb'    | 2048                                 |
| Property 'instance_type_name'         | m1.small                             |
| Property 'instance_type_root_gb'      | 20                                   |
| Property 'instance_type_rxtx_factor'  | 1                                    |
| Property 'instance_type_swap'         | 0                                    |
| Property 'instance_type_vcpu_weight'  | None                                 |
| Property 'instance_type_vcpus'        | 1                                    |
| Property 'instance_uuid'              | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 |
| Property 'kernel_id'                  | df430cc2-3406-4061-b635-a51c16e488ac |
| Property 'owner_id'                   | 66265572db174a7aa66eba661f58eb9e     |
| Property 'ramdisk_id'                 | 3cf852bd-2332-48f4-9ae4-7d926d50945e |
| Property 'user_id'                    | 376744b5910b4b4da7d8e6cb483b06a8     |
| checksum                              | 8e4838effa1969ad591655d6485c7ba8     |
| container_format                      | ami                                  |
| created_at                            | 2013-07-22T19:45:58                  |
| deleted                               | False                                |
| disk_format                           | ami                                  |
| id                                    | 7e5142af-1253-4634-bcc6-89482c5f2e8a |
| is_public                             | False                                |
| min_disk                              | 0                                    |
| min_ram                               | 0                                    |
| name                                  | myCirrosImage                        |
| owner                                 | 66265572db174a7aa66eba661f58eb9e     |
| protected                             | False                                |
| size                                  | 14221312                             |
| status                                | active                               |
| updated_at                            | 2013-07-22T19:46:42                  |
+---------------------------------------+--------------------------------------+</screen>
    <para>
     When viewing a list of images, you can also use <command>grep</command>
     to filter the list, as follows:
    </para>
<screen><prompt role="user">$</prompt> glance image-list | grep 'cirros'
| 397e713c-b95b-4186-ad46-6126863ea0a9 | cirros-0.3.2-x86_64-uec         | ami         | ami              | 25165824 | active |
| df430cc2-3406-4061-b635-a51c16e488ac | cirros-0.3.2-x86_64-uec-kernel  | aki         | aki              | 4955792  | active |
| 3cf852bd-2332-48f4-9ae4-7d926d50945e | cirros-0.3.2-x86_64-uec-ramdisk | ari         | ari              | 3714968  | active |</screen>
    <note>
     <para>
      To store location metadata for images, which enables direct file
      access for a client, update the
      <filename>/etc/glance/glance.conf</filename> file with the following
      statements:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <literal>show_multiple_locations = True</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>filesystem_store_metadata_file =
        <replaceable>filePath</replaceable></literal>, where
        <replaceable>filePath</replaceable> points to a JSON file that
        defines the mount point for OpenStack images on your system and a
        unique ID. For example:
       </para>
<screen remap="programlisting-json">[{
    "id": "2d9bb53f-70ea-4066-a68b-67960eaae673",
    "mountpoint": "/var/lib/glance/images/"
}]</screen>
      </listitem>
     </itemizedlist>
     <para>
      After you restart the Image Service, you can use the following syntax
      to view the image's location information:
     </para>
<screen><prompt role="user">$</prompt> glance --os-image-api-version 2 image-show <replaceable>imageID</replaceable></screen>
     <para>
      For example, using the image ID shown above, you would issue the
      command as follows:
     </para>
<screen><prompt role="user">$</prompt> glance --os-image-api-version 2 image-show 2d9bb53f-70ea-4066-a68b-67960eaae673</screen>
    </note>
   </sect2>

   <sect2 xml:id="glance_add_image">
    <title>Create or update an image (glance)</title>
    <para>
     To create an image, use <command>glance image-create</command>:
    </para>
<screen><prompt role="user">$</prompt> glance image-create <replaceable>imageName</replaceable></screen>
    <para>
     To update an image by name or ID, use <command>glance
     image-update</command>:
    </para>
<screen><prompt role="user">$</prompt> glance image-update <replaceable>imageName</replaceable></screen>
    <para>
     The following table lists the optional arguments that you can use with
     the <command>create</command> and <command>update</command> commands to
     modify image properties. For more information, refer to Image Service
     chapter in the
     <link xlink:href="http://docs.openstack.org/cli-reference/content/index.html">OpenStack
     Command-Line Interface Reference</link>.
    </para>
    <informaltable>
     <tgroup cols="2">
      <colspec colwidth="40%"/>
      <colspec colwidth="60%"/>
      <tbody>
       <row>
        <entry>
         <para>
          <option>--name NAME</option>
         </para>
        </entry>
        <entry>
         <para>
          The name of the image.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--disk-format DISK_FORMAT</option>
         </para>
        </entry>
        <entry>
         <para>
          The disk format of the image. Acceptable formats are ami, ari,
          aki, vhd, vmdk, raw, qcow2, vdi, and iso.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--container-format CONTAINER_FORMAT</option>
         </para>
        </entry>
        <entry>
         <para>
          The container format of the image. Acceptable formats are ami,
          ari, aki, bare, and ovf.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--owner TENANT_ID</option>
         </para>
        </entry>
        <entry>
         <para>
          The tenant who should own the image.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--size SIZE</option>
         </para>
        </entry>
        <entry>
         <para>
          The size of image data, in bytes.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--min-disk DISK_GB</option>
         </para>
        </entry>
        <entry>
         <para>
          The minimum size of the disk needed to boot the image, in
          gigabytes.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--min-ram DISK_RAM</option>
         </para>
        </entry>
        <entry>
         <para>
          The minimum amount of RAM needed to boot the image, in megabytes.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--location IMAGE_URL</option>
         </para>
        </entry>
        <entry>
         <para>
          The URL where the data for this image resides. For example, if the
          image data is stored in swift, you could specify
          <literal>swift://account:key@example.com/container/obj</literal>.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--file FILE</option>
         </para>
        </entry>
        <entry>
         <para>
          Local file that contains the disk image to be uploaded during the
          update. Alternatively, you can pass images to the client through
          stdin.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--checksum CHECKSUM</option>
         </para>
        </entry>
        <entry>
         <para>
          Hash of image data to use for verification.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--copy-from IMAGE_URL</option>
         </para>
        </entry>
        <entry>
         <para>
          Similar to <option>--location</option> in usage, but indicates
          that the image server should immediately copy the data and store
          it in its configured image store.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--is-public [True|False]</option>
         </para>
        </entry>
        <entry>
         <para>
          Makes an image accessible for all the tenants (admin-only by
          default).
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--is-protected [True|False]</option>
         </para>
        </entry>
        <entry>
         <para>
          Prevents an image from being deleted.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--property KEY=VALUE</option>
         </para>
        </entry>
        <entry>
         <para>
          Arbitrary property to associate with image. This option can be
          used multiple times.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--purge-props</option>
         </para>
        </entry>
        <entry>
         <para>
          Deletes all image properties that are not explicitly set in the
          update request. Otherwise, those properties not referenced are
          preserved.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <option>--human-readable</option>
         </para>
        </entry>
        <entry>
         <para>
          Prints the image size in a human-friendly format.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <para>
     The following example shows the command that you would use to upload a
     CentOS 6.3 image in qcow2 format and configure it for public access:
    </para>
<screen><prompt role="user">$</prompt> glance image-create --name centos63-image --disk-format qcow2 \
  --container-format bare --is-public True --file ./centos63.qcow2</screen>
    <para>
     The following example shows how to update an existing image with a
     properties that describe the disk bus, the CD-ROM bus, and the VIF
     model:
    </para>
<screen><prompt role="user">$</prompt> glance image-update \
    --property hw_disk_bus=scsi \
    --property hw_cdrom_bus=ide \
    --property hw_vif_model=e1000 \
    f16-x86_64-openstack-sda</screen>
    <para>
     Currently the libvirt virtualization tool determines the disk, CD-ROM,
     and VIF device models based on the configured hypervisor type
     (<literal>libvirt_type</literal> in
     <filename>/etc/nova/nova.conf</filename>). For the sake of optimal
     performance, libvirt defaults to using virtio for both disk and VIF
     (NIC) models. The disadvantage of this approach is that it is not
     possible to run operating systems that lack virtio drivers, for
     example, BSD, Solaris, and older versions of Linux and Windows.
    </para>
    <para>
     If you specify a disk or CD-ROM bus model that is not supported, see
     <xref linkend="bus_models"/>. If you specify a VIF model that is not
     supported, the instance fails to launch. See
     <xref linkend="vif_models"/>.
    </para>
<?hard-pagebreak?>
    <para>
     The valid model values depend on the <literal>libvirt_type</literal>
     setting, as shown in the following tables.
    </para>
    <table xml:id="bus_models" width="50%">
     <title>Disk and CD-ROM bus model values</title>
     <tgroup cols="2">
      <colspec colwidth="40%"/>
      <colspec colwidth="60%"/>
      <thead>
       <row>
        <entry>
         <para>
          libvirt_type setting
         </para>
        </entry>
        <entry>
         <para>
          Supported model values
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          qemu or kvm
         </para>
        </entry>
        <entry>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            ide
           </para>
          </listitem>
          <listitem>
           <para>
            scsi
           </para>
          </listitem>
          <listitem>
           <para>
            virtio
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          xen
         </para>
        </entry>
        <entry>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            ide
           </para>
          </listitem>
          <listitem>
           <para>
            xen
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <table xml:id="vif_models" width="50%">
     <title>VIF model values</title>
     <tgroup cols="2">
      <colspec colwidth="40%"/>
      <colspec colwidth="60%"/>
      <thead>
       <row>
        <entry>
         <para>
          libvirt_type setting
         </para>
        </entry>
        <entry>
         <para>
          Supported model values
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          qemu or kvm
         </para>
        </entry>
        <entry>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            e1000
           </para>
          </listitem>
          <listitem>
           <para>
            ne2k_pci
           </para>
          </listitem>
          <listitem>
           <para>
            pcnet
           </para>
          </listitem>
          <listitem>
           <para>
            rtl8139
           </para>
          </listitem>
          <listitem>
           <para>
            virtio
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          xen
         </para>
        </entry>
        <entry>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            e1000
           </para>
          </listitem>
          <listitem>
           <para>
            netfront
           </para>
          </listitem>
          <listitem>
           <para>
            ne2k_pci
           </para>
          </listitem>
          <listitem>
           <para>
            pcnet
           </para>
          </listitem>
          <listitem>
           <para>
            rtl8139
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          vmware
         </para>
        </entry>
        <entry>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            VirtualE1000
           </para>
          </listitem>
          <listitem>
           <para>
            VirtualPCNet32
           </para>
          </listitem>
          <listitem>
           <para>
            VirtualVmxnet
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 xml:id="nova_manage_images">
    <title>Create an image (nova)</title>
    <para>
     You can use the <command>nova</command> client to take a snapshot of a
     running instance to create an image.
    </para>
    <para>
     To minimize the potential for data loss and ensure that you create an
     accurate image, you should shut down the instance before you take a
     snapshot.
    </para>
    <procedure>
     <step>
      <para>
       Write any buffered data to disk.
      </para>
      <para>
       For more information, see
       <link xlink:href="http://docs.openstack.org/openstack-ops/content/snapshots.html">Taking
       Snapshots</link> in the <citetitle>OpenStack Operations
       Guide</citetitle>.
      </para>
     </step>
     <step>
      <para>
       List instances to get the server name:
      </para>
<screen><prompt role="user">$</prompt> nova list
<?db-font-size 50%?>+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer       | ACTIVE | None       | Running     | private=10.0.0.3 |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
      <para>
       In this example, the instance is named
       <literal>myCirrosServer</literal>.
      </para>
     </step>
     <step>
      <para>
       Use this instance to create a snapshot:
      </para>
<screen><prompt role="user">$</prompt> nova image-create myCirrosServer myCirrosImage</screen>
      <para>
       The command creates a snapshot and automatically uploads the image to
       your repository.
      </para>
      <note>
       <para>
        For snapshots that you create from an instance that was booted from
        a volume:
       </para>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          The snapshot is based on the volume that is attached to the
          instance through the Block Storage service.
         </para>
        </listitem>
        <listitem>
         <para>
          No data is uploaded to the Image Service.
         </para>
        </listitem>
        <listitem>
         <para>
          You can find information about the snapshot in the properties of
          the image.
         </para>
        </listitem>
       </itemizedlist>
      </note>
     </step>
     <step>
      <para>
       Get details for your image to check its status:
      </para>
<screen><prompt role="user">$</prompt> nova image-show myCirrosImage
<?db-font-size 50%?>+-------------------------------------+--------------------------------------+
| Property                            | Value                                |
+-------------------------------------+--------------------------------------+
| metadata owner_id                   | 66265572db174a7aa66eba661f58eb9e     |
| minDisk                             | 0                                    |
| metadata instance_type_name         | m1.small                             |
| metadata instance_type_id           | 5                                    |
| metadata instance_type_memory_mb    | 2048                                 |
| id                                  | 7e5142af-1253-4634-bcc6-89482c5f2e8a |
| metadata instance_type_root_gb      | 20                                   |
| metadata instance_type_rxtx_factor  | 1                                    |
| metadata ramdisk_id                 | 3cf852bd-2332-48f4-9ae4-7d926d50945e |
| metadata image_state                | available                            |
| metadata image_location             | snapshot                             |
| minRam                              | 0                                    |
| metadata instance_type_vcpus        | 1                                    |
| status                              | ACTIVE                               |
| updated                             | 2013-07-22T19:46:42Z                 |
| metadata instance_type_swap         | 0                                    |
| metadata instance_type_vcpu_weight  | None                                 |
| metadata base_image_ref             | 397e713c-b95b-4186-ad46-6126863ea0a9 |
| progress                            | 100                                  |
| metadata instance_type_flavorid     | 2                                    |
| OS-EXT-IMG-SIZE:size                | 14221312                             |
| metadata image_type                 | snapshot                             |
| metadata user_id                    | 376744b5910b4b4da7d8e6cb483b06a8     |
| name                                | myCirrosImage                        |
| created                             | 2013-07-22T19:45:58Z                 |
| metadata instance_uuid              | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 |
| server                              | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 |
| metadata kernel_id                  | df430cc2-3406-4061-b635-a51c16e488ac |
| metadata instance_type_ephemeral_gb | 0                                    |
+-------------------------------------+--------------------------------------+</screen>
      <para>
       The image status changes from <literal>SAVING</literal> to
       <literal>ACTIVE</literal>. Only the tenant who creates the image has
       access to it.
      </para>
     </step>
    </procedure>
    <para>
     To launch an instance from your image, include the image ID and flavor
     ID, as in the following example:
    </para>
<screen><prompt role="user">$</prompt> nova boot newServer --image 7e5142af-1253-4634-bcc6-89482c5f2e8a \
   --flavor 3
<?db-font-size 50%?>+-------------------------------------+--------------------------------------+
| Property                            | Value                                |
+-------------------------------------+--------------------------------------+
| OS-EXT-STS:task_state               | scheduling                           |
| image                               | myCirrosImage                        |
| OS-EXT-STS:vm_state                 | building                             |
| OS-EXT-SRV-ATTR:instance_name       | instance-00000007                    |
| flavor                              | m1.medium                            |
| id                                  | d7efd3e4-d375-46d1-9d57-372b6e4bdb7f |
| security_groups                     | [{u'name': u'default'}]              |
| user_id                             | 376744b5910b4b4da7d8e6cb483b06a8     |
| OS-DCF:diskConfig                   | MANUAL                               |
| accessIPv4                          |                                      |
| accessIPv6                          |                                      |
| progress                            | 0                                    |
| OS-EXT-STS:power_state              | 0                                    |
| OS-EXT-AZ:availability_zone         | nova                                 |
| config_drive                        |                                      |
| status                              | BUILD                                |
| updated                             | 2013-07-22T19:58:33Z                 |
| hostId                              |                                      |
| OS-EXT-SRV-ATTR:host                | None                                 |
| key_name                            | None                                 |
| OS-EXT-SRV-ATTR:hypervisor_hostname | None                                 |
| name                                | newServer                            |
| adminPass                           | jis88nN46RGP                         |
| tenant_id                           | 66265572db174a7aa66eba661f58eb9e     |
| created                             | 2013-07-22T19:58:33Z                 |
| metadata                            | {}                                   |
+-------------------------------------+--------------------------------------+</screen>
   </sect2>

   <sect2 xml:id="troubleshoot">
    <title>Troubleshoot image creation</title>
    <para>
     If you encounter problems in creating an image in Image Service or
     Compute, the following information may help you troubleshoot the
     creation process.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Ensure that the version of qemu you are using is version 0.14 or
       later. Earlier versions of qemu result in an <literal>unknown option
       -s</literal> error message in the
       <filename>nova-compute.log</filename> file.
      </para>
     </listitem>
     <listitem>
      <para>
       Examine the <filename>/var/log/nova-api.log</filename> and
       <filename>/var/log/nova-compute.log</filename> log files for error
       messages.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_configure_instances">
   <title>Configure access and security for instances</title>

<?dbhtml stop-chunking?>

   <para>
    When you launch a virtual machine, you can inject a
    <emphasis role="italic">key pair</emphasis>, which provides SSH access
    to your instance. For this to work, the image must contain the
    <literal>cloud-init</literal> package.
   </para>

   <para>
    You create at least one key pair for each project. You can use the key
    pair for multiple instances that belong to that project. If you generate
    a key pair with an external tool, you can import it into OpenStack.
   </para>

   <para>
    If an image uses a static root password or a static key setâ€”neither is
    recommendedâ€”you must not provide a key pair when you launch the
    instance.
   </para>

   <para>
    A <emphasis role="italic">security group</emphasis> is a named
    collection of network access rules that you use to limit the types of
    traffic that have access to instances. When you launch an instance, you
    can assign one or more security groups to it. If you do not create
    security groups, new instances are automatically assigned to the default
    security group, unless you explicitly specify a different security
    group.
   </para>

   <para>
    The associated <emphasis role="italic">rules</emphasis> in each security
    group control the traffic to instances in the group. Any incoming
    traffic that is not matched by a rule is denied access by default. You
    can add rules to or remove rules from a security group, and you can
    modify rules for the default and any other security group.
   </para>

   <para>
    You can modify the rules in a security group to allow access to
    instances through different ports and protocols. For example, you can
    modify rules to allow access to instances through SSH, to ping
    instances, or to allow UDP traffic; for example, for a DNS server
    running on an instance. You specify the following parameters for rules:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <emphasis role="bold">Source of traffic</emphasis>. Enable traffic to
      instances from either IP addresses inside the cloud from other group
      members or from all IP addresses.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Protocol</emphasis>. Choose TCP for SSH, ICMP
      for pings, or UDP.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Destination port on virtual machine</emphasis>.
      Define a port range. To open a single port only, enter the same value
      twice. ICMP does not support ports; instead, you enter values to
      define the codes and types of ICMP traffic to be allowed.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Rules are automatically enforced as soon as you create or modify them.
   </para>

   <note>
    <para>
     Instances that use the default security group cannot, by default, be
     accessed from any IP address outside of the cloud. If you want those IP
     addresses to access the instances, you must modify the rules for the
     default security group.
    </para>
    <para>
     You can also assign a floating IP address to a running instance to make
     it accessible from outside the cloud. See
     <xref linkend="manage_ip_addresses"/>.
    </para>
   </note>

<?hard-pagebreak?>

   <sect2 xml:id="create_import_keys">
    <title>Add a key pair</title>
    <procedure>
     <para>
      You can generate a key pair or upload an existing public key.
     </para>
     <step>
      <para>
       To generate a key pair, run the following command:
      </para>
<screen><prompt role="user">$</prompt> nova keypair-add <replaceable>KEY_NAME</replaceable> &gt; <replaceable>MY_KEY</replaceable>.pem</screen>
      <para>
       The command generates a key pair with the name that you specify for
       <replaceable>KEY_NAME</replaceable>, writes the private key to the
       <filename>.pem</filename> file that you specify, and registers the
       public key at the Nova database.
      </para>
     </step>
     <step>
      <para>
       To set the permissions of the <filename>.pem</filename> file so that
       only you can read and write to it, run the following command:
      </para>
<screen><prompt role="user">$</prompt> chmod 600 <replaceable>MY_KEY</replaceable>.pem</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="import_keypair_cli">
    <title>Import a key pair</title>
    <procedure>
     <step>
      <para>
       If you have already generated a key pair and the public key is
       located at <filename>~/.ssh/id_rsa.pub</filename>, run the following
       command to upload the public key:
      </para>
<screen><prompt role="user">$</prompt> nova keypair-add --pub_key ~/.ssh/id_rsa.pub <replaceable>KEY_NAME</replaceable></screen>
      <para>
       The command registers the public key at the Nova database and names
       the key pair the name that you specify for
       <literal><replaceable>KEY_NAME</replaceable></literal>.
      </para>
     </step>
     <step>
      <para>
       To ensure that the key pair has been successfully imported, list key
       pairs as follows:
      </para>
<screen><prompt role="user">$</prompt> nova keypair-list</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="configure_security_groups_rules">
    <title>Create and manage security groups</title>
    <procedure>
     <step>
      <para>
       To list the security groups for the current project, including
       descriptions, enter the following command:
      </para>
<screen><prompt role="user">$</prompt> nova secgroup-list</screen>
     </step>
     <step>
      <para>
       To create a security group with a specified name and description,
       enter the following command:
      </para>
<screen><prompt role="user">$</prompt> nova secgroup-create <replaceable>SECURITY_GROUP_NAME</replaceable><replaceable>GROUP_DESCRIPTION</replaceable></screen>
     </step>
     <step>
      <para>
       To delete a specified group, enter the following command:
      </para>
<screen><prompt role="user">$</prompt> nova secgroup-delete <replaceable>SECURITY_GROUP_NAME</replaceable></screen>
      <note>
       <para>
        You cannot delete the default security group for a project. Also,
        you cannot delete a security group that is assigned to a running
        instance.
       </para>
      </note>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="security_grp_rules_cli">
    <title>Create and manage security group rules</title>
    <procedure>
     <para>
      Modify security group rules with the <command>nova
      secgroup-*-rule</command> commands. Before you begin, source the
      OpenStack RC file. For details, see <xref linkend="cli_openrc"/>.
     </para>
     <step>
      <para>
       To list the rules for a security group, run the following command:
      </para>
<screen><prompt role="user">$</prompt> nova secgroup-list-rules <replaceable>SECURITY_GROUP_NAME</replaceable></screen>
     </step>
     <step>
      <para>
       To allow SSH access to the instances, choose one of the following
       options:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Allow access from all IP addresses, specified as IP subnet
         <filename>0.0.0.0/0</filename> in CIDR notation:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-rule <replaceable>SECURITY_GROUP_NAME</replaceable> tcp 22 22 0.0.0.0/0</screen>
       </listitem>
       <listitem>
        <para>
         Allow access only from IP addresses from other security groups
         (source groups) to access the specified port:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-group-rule --ip_proto tcp --from_port 22 \
     --to_port 22 <replaceable>SECURITY_GROUP_NAME</replaceable><replaceable>SOURCE_GROUP_NAME</replaceable></screen>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       To allow pinging of the instances, choose one of the following
       options:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Allow pinging from all IP addresses, specified as IP subnet
         <filename>0.0.0.0/0</filename> in CIDR notation:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-rule <replaceable>SECURITY_GROUP_NAME</replaceable> icmp -1 -1 0.0.0.0/0</screen>
        <para>
         This allows access to all codes and all types of ICMP traffic.
        </para>
       </listitem>
       <listitem>
        <para>
         Allow only members of other security groups (source groups) to ping
         instances:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-group-rule --ip_proto icmp --from_port -1 \
     --to_port -1 <replaceable>SECURITY_GROUP_NAME</replaceable><replaceable>SOURCE_GROUP_NAME</replaceable></screen>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       To allow access through a UDP port, such as allowing access to a DNS
       server that runs on a VM, choose one of the following options:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Allow UDP access from IP addresses, specified as IP subnet
         <filename>0.0.0.0/0</filename> in CIDR notation:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-rule SECURITY_GROUP_NAME udp 53 53 0.0.0.0/0</screen>
       </listitem>
       <listitem>
        <para>
         Allow only IP addresses from other security groups (source groups)
         to access the specified port:
        </para>
<screen><prompt role="user">$</prompt> nova secgroup-add-group-rule --ip_proto udp --from_port 53 \
      --to_port 53 <replaceable>SECURITY_GROUP_NAME</replaceable><replaceable>SOURCE_GROUP_NAME</replaceable></screen>
       </listitem>
      </itemizedlist>
     </step>
    </procedure>
    <sect3 xml:id="security_grp_rules_cli_delete">
     <title>Delete a security group rule</title>
     <para>
      To delete a security group rule, specify the same arguments that you
      used to create the rule.
     </para>
     <para>
      For example, to delete the security group rule that permits SSH access
      from all IP addresses, run the following command.
     </para>
<screen><prompt role="user">$</prompt> nova secgroup-delete-rule <replaceable>SECURITY_GROUP_NAME</replaceable> tcp 22 22 0.0.0.0/0</screen>
    </sect3>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_launch_instances">
   <title>Launch instances</title>

   <para>
    Instances are virtual machines that run inside the cloud.
   </para>

   <para>
    Before you can launch an instance, gather the following parameters:
   </para>

   <itemizedlist xml:id="instance_parameters" mark="bullet" spacing="normal">
    <listitem>
     <para>
      The <emphasis role="bold">instance source</emphasis> can be an image,
      snapshot, or block storage volume that contains an image or snapshot.
     </para>
    </listitem>
    <listitem>
     <para>
      A <emphasis role="bold">name</emphasis> for your instance.
     </para>
    </listitem>
    <listitem>
     <para>
      The <emphasis role="bold">flavor</emphasis> for your instance, which
      defines the compute, memory, and storage capacity of nova computing
      instances. A flavor is an available hardware configuration for a
      server. It defines the size of a virtual server that can be launched.
     </para>
    </listitem>
    <listitem>
     <para>
      Any <emphasis role="bold">user data</emphasis> files. A user data file
      is a special key in the metadata service that holds a file that
      cloud-aware applications in the guest instance can access. For
      example, one application that uses user data is the
      <link xlink:href="https://help.ubuntu.com/community/CloudInit">cloud-init</link>
      system, which is an open-source package from Ubuntu that is available
      on various Linux distributions and that handles early initialization
      of a cloud instance.
     </para>
    </listitem>
    <listitem>
     <para>
      Access and security credentials, which include one or both of the
      following credentials:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        A <emphasis role="bold">key pair</emphasis> for your instance, which
        are SSH credentials that are injected into images when they are
        launched. For the key pair to be successfully injected, the image
        must contain the <literal>cloud-init</literal> package. Create at
        least one key pair for each project. If you already have generated a
        key pair with an external tool, you can import it into OpenStack.
        You can use the key pair for multiple instances that belong to that
        project.
       </para>
      </listitem>
      <listitem>
       <para>
        A <emphasis role="bold">security group</emphasis> that defines which
        incoming network traffic is forwarded to instances. Security groups
        hold a set of firewall policies, known as
        <emphasis role="italic">security group rules</emphasis>.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <para>
      If needed, you can assign a <emphasis role="bold">floating (public) IP
      address</emphasis> to a running instance.
     </para>
    </listitem>
    <listitem>
     <para>
      You can also attach a block storage device, or
      <emphasis role="bold">volume</emphasis>, for persistent storage.
     </para>
    </listitem>
   </itemizedlist>

   <note>
    <para>
     Instances that use the default security group cannot, by default, be
     accessed from any IP address outside of the cloud. If you want those IP
     addresses to access the instances, you must modify the rules for the
     default security group.
    </para>
    <para>
     You can also assign a floating IP address to a running instance to make
     it accessible from outside the cloud. See
     <xref linkend="manage_ip_addresses"/>.
    </para>
   </note>

   <para>
    After you gather the parameters that you need to launch an instance, you
    can launch it from an <link linkend="launch_from_image">image</link> or
    a <link linkend="boot_from_volume">volume</link>. You can launch an
    instance directly from one of the available OpenStack images or from an
    image that you have copied to a persistent volume. The OpenStack Image
    Service provides a pool of images that are accessible to members of
    different projects.
   </para>

<?hard-pagebreak?>

   <sect2 xml:id="gather_parms">
    <title>Gather parameters to launch an instance</title>
    <para>
     Before you begin, source the OpenStack RC file.
    </para>
    <procedure>
     <step>
      <para>
       List the available flavors:
      </para>
<screen><prompt role="user">$</prompt> nova flavor-list</screen>
      <para>
       Note the ID of the flavor that you want to use for your instance:
      </para>
<screen><?db-font-size 55%?>+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID  | Name      | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1   | m1.tiny   | 512       | 1    | 0         |      | 1     | 1.0         | True      |
| 2   | m1.small  | 2048      | 20   | 0         |      | 1     | 1.0         | True      |
| 3   | m1.medium | 4096      | 40   | 0         |      | 2     | 1.0         | True      |
| 4   | m1.large  | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
| 5   | m1.xlarge | 16384     | 160  | 0         |      | 8     | 1.0         | True      |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+</screen>
     </step>
     <step>
      <para>
       List the available images:
      </para>
<screen><prompt role="user">$</prompt> nova image-list</screen>
      <para>
       Note the ID of the image from which you want to boot your instance:
      </para>
<screen><?db-font-size 55%?>+--------------------------------------+---------------------------------+--------+--------+
| ID                                   | Name                            | Status | Server |
+--------------------------------------+---------------------------------+--------+--------+
| 397e713c-b95b-4186-ad46-6126863ea0a9 | cirros-0.3.2-x86_64-uec         | ACTIVE |        |
| df430cc2-3406-4061-b635-a51c16e488ac | cirros-0.3.2-x86_64-uec-kernel  | ACTIVE |        |
| 3cf852bd-2332-48f4-9ae4-7d926d50945e | cirros-0.3.2-x86_64-uec-ramdisk | ACTIVE |        |
+--------------------------------------+---------------------------------+--------+--------+</screen>
      <para>
       You can also filter the image list by using <command>grep</command>
       to find a specific image, as follows:
      </para>
<screen><prompt role="user">$</prompt> nova image-list | grep 'kernel'</screen>
<screen><?db-font-size 55%?>| df430cc2-3406-4061-b635-a51c16e488ac | cirros-0.3.2-x86_64-uec-kernel  | ACTIVE |        |</screen>
     </step>
     <step>
      <para>
       List the available security groups:
      </para>
      <note>
       <para>
        If you are an admin user, specify the <option>--all-tenants</option>
        parameter to list groups for all tenants.
       </para>
      </note>
<screen><prompt role="user">$</prompt> nova secgroup-list --all-tenants</screen>
      <para>
       Note the ID of the security group that you want to use for your
       instance:
      </para>
<screen><?db-font-size 65%?>+----+---------+-------------+----------------------------------+
| Id | Name    | Description | Tenant_ID                        |
+----+---------+-------------+----------------------------------+
| 2  | default | default     | 66265572db174a7aa66eba661f58eb9e |
| 1  | default | default     | b70d90d65e464582b6b2161cf3603ced |
+----+---------+-------------+----------------------------------+</screen>
      <para>
       If you have not created any security groups, you can assign the
       instance to only the default security group.
      </para>
      <para>
       You can view rules for a specified security group:
      </para>
<screen><prompt role="user">$</prompt> nova secgroup-list-rules default           </screen>
     </step>
     <step>
      <para>
       List the available key pairs and note the name of the key pair that
       you use for SSH access.
      </para>
<screen><prompt role="user">$</prompt> nova keypair-list</screen>
     </step>
    </procedure>
   </sect2>

<?hard-pagebreak?>

   <sect2 xml:id="launch_from_image">
    <title>Launch an instance from an image</title>
    <procedure>
     <step>
      <para>
       After you gather required parameters, run the following command to
       launch an instance. Specify the server name, flavor ID, and image ID.
      </para>
      <para>
       Optionally, you can provide a key name for access control and a
       security group for security. You can also include metadata key and
       value pairs. For example, you can add a description for your server
       by providing the <option>--meta description="My Server"</option>
       parameter.
      </para>
      <para>
       You can pass user data in a local file at instance launch by using
       the <option>--user-data
       <replaceable>USER-DATA-FILE</replaceable></option> parameter.
      </para>
<screen><prompt role="user">$</prompt> nova boot --flavor <replaceable>FLAVOR_ID</replaceable> --image <replaceable>IMAGE_ID</replaceable> --key-name <replaceable>KEY_NAME</replaceable> \
  --user-data <replaceable>USER_DATA_FILE</replaceable> --security-groups <replaceable>SEC_GROUP_NAME</replaceable> --meta <replaceable>KEY=VALUE</replaceable> \
  <replaceable>INSTANCE_NAME</replaceable></screen>
      <para>
       The following command launches the <literal>MyCirrosServer</literal>
       instance with the <literal>m1.small</literal> flavor (ID of
       <literal>1</literal>), <literal>cirros-0.3.2-x86_64-uec</literal>
       image (ID of
       <literal>397e713c-b95b-4186-ad46-6126863ea0a9</literal>),
       <literal>default</literal> security group,
       <literal>KeyPair01</literal> key, and a user data file called
       <filename>cloudinit.file</filename>:
      </para>
<screen><prompt role="user">$</prompt> nova boot --flavor 1 --image 397e713c-b95b-4186-ad46-6126863ea0a9 \
  --security-groups default --key-name KeyPair01 --user-data cloudinit.file \
  <replaceable>myCirrosServer</replaceable></screen>
      <para>
       Depending on the parameters that you provide, the command returns a
       list of server properties.
      </para>
      <para>
       A status of <literal>BUILD</literal> indicates that the instance has
       started, but is not yet online.
      </para>
      <para>
       A status of <literal>ACTIVE</literal> indicates that the instance is
       active.
      </para>
<screen><?db-font-size 50%?>+-------------------------------------+--------------------------------------+
| Property                            | Value                                |
+-------------------------------------+--------------------------------------+
| OS-EXT-STS:task_state               | scheduling                           |
| image                               | cirros-0.3.2-x86_64-uec              |
| OS-EXT-STS:vm_state                 | building                             |
| OS-EXT-SRV-ATTR:instance_name       | instance-00000002                    |
| flavor                              | m1.small                             |
| id                                  | b3cdc6c0-85a7-4904-ae85-71918f734048 |
| security_groups                     | [{u'name': u'default'}]              |
| user_id                             | 376744b5910b4b4da7d8e6cb483b06a8     |
| OS-DCF:diskConfig                   | MANUAL                               |
| accessIPv4                          |                                      |
| accessIPv6                          |                                      |
| progress                            | 0                                    |
| OS-EXT-STS:power_state              | 0                                    |
| OS-EXT-AZ:availability_zone         | nova                                 |
| config_drive                        |                                      |
| status                              | BUILD                                |
| updated                             | 2013-07-16T16:25:34Z                 |
| hostId                              |                                      |
| OS-EXT-SRV-ATTR:host                | None                                 |
| key_name                            | KeyPair01                            |
| OS-EXT-SRV-ATTR:hypervisor_hostname | None                                 |
| name                                | myCirrosServer                       |
| adminPass                           | tVs5pL8HcPGw                         |
| tenant_id                           | 66265572db174a7aa66eba661f58eb9e     |
| created                             | 2013-07-16T16:25:34Z                 |
| metadata                            | {u'KEY': u'VALUE'}                   |
+-------------------------------------+--------------------------------------+</screen>
      <para>
       Copy the server ID value from the <literal>id</literal> field in the
       output. You use this ID to get details for or delete your server.
      </para>
      <para>
       Copy the administrative password value from the
       <literal>adminPass</literal> field. You use this value to log in to
       your server.
      </para>
      <note>
       <para>
        You can also place arbitrary local files into the instance file
        system at creation time by using the <option>--file
        &lt;dst-path=src-path&gt;</option> option. You can store up to
        five files. For example, if you have a special authorized keys file
        named <filename>special_authorized_keysfile</filename> that you want
        to put on the instance rather than using the regular SSH key
        injection, you can use the <option>--file</option> option as shown
        in the following example:
       </para>
<screen><prompt role="user">$</prompt> <?db-font-size 75%?>nova boot --image ubuntu-cloudimage --flavor 1 vm-name \
  --file /root/.ssh/authorized_keys=special_authorized_keysfile</screen>
      </note>
     </step>
     <step>
      <para>
       Check if the instance is online:
      </para>
<screen><prompt role="user">$</prompt> <?db-font-size 75%?>nova list</screen>
      <para>
       The list shows the ID, name, status, and private (and if assigned,
       public) IP addresses for all instances in the project to which you
       belong:
      </para>
<screen><?db-font-size 50%?>+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer       | ACTIVE | None       | Running     | private=10.0.0.3 |
| 8a99547e-7385-4ad1-ae50-4ecfaaad5f42 | myInstanceFromVolume | ACTIVE | None       | Running     | private=10.0.0.4 |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
      <para>
       If the status for the instance is ACTIVE, the instance is online.
      </para>
      <para>
       To view the available options for the <command>nova list</command>
       command, run the following command:
      </para>
<screen><prompt role="user">$</prompt> <?db-font-size 75%?>nova help list</screen>
     </step>
    </procedure>
    <note>
     <para>
      If you did not provide a key pair, security groups, or rules, you can
      access the instance only from inside the cloud through VNC. Even
      pinging the instance is not possible.
     </para>
    </note>
   </sect2>

<?hard-pagebreak?>

   <sect2 xml:id="boot_from_volume" xml:base="../common/section_cli_nova_boot_from_volume.xml">
    <title>Launch an instance from a volume</title>
    <para>
     You can boot instances from a volume instead of an image.
    </para>
    <para>
     To complete these tasks, use these parameters on the nova
     <command>boot</command> command:
    </para>
    <informaltable>
     <tgroup cols="3">
      <colspec colwidth="30%"/>
      <colspec colwidth="30%"/>
      <colspec colwidth="30%"/>
      <thead>
       <row>
        <entry>
         <para>
          Task
         </para>
        </entry>
        <entry>
         <para>
          nova boot parameter
         </para>
        </entry>
        <entry>
         <para>
          See
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          Boot an instance from an image and attach a non-bootable volume.
         </para>
        </entry>
        <entry>
         <para>
          <option>--block-device</option>
         </para>
        </entry>
        <entry>
         <para>
          <xref linkend="attach_volume_to_instance"/>
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Create a volume from an image and boot an instance from that
          volume.
         </para>
        </entry>
        <entry>
         <para>
          <option>--block-device</option>
         </para>
        </entry>
        <entry>
         <para>
          <xref linkend="create_volume_from_image_and_boot"/>
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Boot from an existing source image, volume, or snapshot.
         </para>
        </entry>
        <entry>
         <para>
          <option>--block-device</option>
         </para>
        </entry>
        <entry>
         <para>
          <xref linkend="create_volume_from_image_and_boot"/>
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Attach a swap disk to an instance.
         </para>
        </entry>
        <entry>
         <para>
          <option>--swap</option>
         </para>
        </entry>
        <entry>
         <para>
          <xref linkend="attach-disk-to-instance"/>
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Attach an ephemeral disk to an instance.
         </para>
        </entry>
        <entry>
         <para>
          <option>--ephemeral</option>
         </para>
        </entry>
        <entry>
         <para>
          <xref linkend="attach-disk-to-instance"/>
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <note>
     <para>
      To attach a volume to a running instance, see
      <xref linkend="cli_attach_volume"/>.
     </para>
    </note>
    <sect3 xml:id="attach_volume_to_instance">
     <title>Boot instance from image and attach non-bootable volume</title>
     <para>
      Create a non-bootable volume and attach that volume to an instance
      that you boot from an image.
     </para>
     <para>
      To create a non-bootable volume, do not create it from an image. The
      volume must be entirely empty with no partition table and no file
      system.
     </para>
     <procedure>
      <step>
       <para>
        Create a non-bootable volume:
       </para>
<screen><prompt role="user">$</prompt> cinder create --display-name my-volume 8
+--------------------------------+--------------------------------------+
|            Property            |                Value                 |
+--------------------------------+--------------------------------------+
|          attachments           |                  []                  |
|       availability_zone        |                 nova                 |
|            bootable            |                false                 |
|           created_at           |      2014-05-09T16:33:11.000000      |
|          description           |                 None                 |
|           encrypted            |                False                 |
|               id               | d620d971-b160-4c4e-8652-2513d74e2080 |
|            metadata            |                  {}                  |
|              name              |              my-volume               |
|     os-vol-host-attr:host      |                 None                 |
| os-vol-mig-status-attr:migstat |                 None                 |
| os-vol-mig-status-attr:name_id |                 None                 |
|  os-vol-tenant-attr:tenant_id  |   ccef9e62b1e645df98728fb2b3076f27   |
|              size              |                  8                   |
|          snapshot_id           |                 None                 |
|          source_volid          |                 None                 |
|             status             |               creating               |
|            user_id             |   fef060ae7bfd4024b3edb97dff59017a   |
|          volume_type           |                 None                 |
+--------------------------------+--------------------------------------+</screen>
      </step>
      <step>
       <para>
        List volumes:
       </para>
<screen><prompt role="user">$</prompt> cinder list
+--------------------------------------+-----------+-----------+------+-------------+----------+-------------+
|                  ID                  |   Status  |    Name   | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+-----------+------+-------------+----------+-------------+
| d620d971-b160-4c4e-8652-2513d74e2080 | available | my-volume |  8   |     None    |  false   |             |
+--------------------------------------+-----------+-----------+------+-------------+----------+-------------+</screen>
      </step>
      <step xml:id="launch_image_with_attached_volume">
       <para>
        Boot an instance from an image and attach the empty volume to the
        instance:
       </para>
<screen><prompt role="user">$</prompt> nova boot --flavor 2 --image 98901246-af91-43d8-b5e6-a4506aa8f369 \
        --block-device source=volume,id=d620d971-b160-4c4e-8652-2513d74e2080,dest=volume,shutdown=preserve \
        myInstanceWithVolume
+--------------------------------------+----------------------------------------------------------------+
| Property                             | Value                                                          |
+--------------------------------------+----------------------------------------------------------------+
| OS-DCF:diskConfig                    | MANUAL                                                         |
| OS-EXT-AZ:availability_zone          | nova                                                           |
| OS-EXT-SRV-ATTR:host                 | -                                                              |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                                                              |
| OS-EXT-SRV-ATTR:instance_name        | instance-00000004                                              |
| OS-EXT-STS:power_state               | 0                                                              |
| OS-EXT-STS:task_state                | scheduling                                                     |
| OS-EXT-STS:vm_state                  | building                                                       |
| OS-SRV-USG:launched_at               | -                                                              |
| OS-SRV-USG:terminated_at             | -                                                              |
| accessIPv4                           |                                                                |
| accessIPv6                           |                                                                |
| adminPass                            | ZaiYeC8iucgU                                                   |
| config_drive                         |                                                                |
| created                              | 2014-05-09T16:34:50Z                                           |
| flavor                               | m1.small (2)                                                   |
| hostId                               |                                                                |
| id                                   | 1e1797f3-1662-49ff-ae8c-a77e82ee1571                           |
| image                                | cirros-0.3.1-x86_64-uec (98901246-af91-43d8-b5e6-a4506aa8f369) |
| key_name                             | -                                                              |
| metadata                             | {}                                                             |
| name                                 | myInstanceWithVolume                                           |
| os-extended-volumes:volumes_attached | [{"id": "d620d971-b160-4c4e-8652-2513d74e2080"}]               |
| progress                             | 0                                                              |
| security_groups                      | default                                                        |
| status                               | BUILD                                                          |
| tenant_id                            | ccef9e62b1e645df98728fb2b3076f27                               |
| updated                              | 2014-05-09T16:34:51Z                                           |
| user_id                              | fef060ae7bfd4024b3edb97dff59017a                               |
+--------------------------------------+----------------------------------------------------------------+</screen>
      </step>
     </procedure>
    </sect3>
    <sect3 xml:id="create_volume_from_image_and_boot">
     <title>Create volume from image and boot instance</title>
     <para>
      You can create a volume from an existing image, volume, or snapshot.
      This procedure shows you how to create a volume from an image, and use
      the volume to boot an instance.
     </para>
     <procedure>
      <step>
       <para>
        List the available images:
       </para>
<screen><prompt role="user">$</prompt> nova image-list
+--------------------------------------+---------------------------------+--------+--------+
| ID                                   | Name                            | Status | Server |
+--------------------------------------+---------------------------------+--------+--------+
| 484e05af-a14d-4567-812b-28122d1c2260 | Fedora-x86_64-20-20131211.1-sda | ACTIVE |        |
| 98901246-af91-43d8-b5e6-a4506aa8f369 | cirros-0.3.1-x86_64-uec         | ACTIVE |        |
| b6e95589-7eb2-4171-8bab-d225d9262c73 | cirros-0.3.1-x86_64-uec-kernel  | ACTIVE |        |
| c90893ea-e732-40ac-a23d-4e36b2082c35 | cirros-0.3.1-x86_64-uec-ramdisk | ACTIVE |        |
+--------------------------------------+---------------------------------+--------+--------+</screen>
       <para>
        Note the ID of the image that you want to use to create a volume.
       </para>
      </step>
      <step>
       <para>
        List the available flavors:
       </para>
<screen><prompt role="user">$</prompt> nova flavor-list
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID  | Name      | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1   | m1.tiny   | 512       | 1    | 0         |      | 1     | 1.0         | True      |
| 2   | m1.small  | 2048      | 20   | 0         |      | 1     | 1.0         | True      |
| 3   | m1.medium | 4096      | 40   | 0         |      | 2     | 1.0         | True      |
| 4   | m1.large  | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
| 5   | m1.xlarge | 16384     | 160  | 0         |      | 8     | 1.0         | True      |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+</screen>
       <para>
        Note the ID of the flavor that you want to use to create a volume.
       </para>
      </step>
      <step>
       <para>
        To create a bootable volume from an image and launch an instance
        from this volume, use the <option>--block-device</option> parameter.
       </para>
       <para>
        For example:
       </para>
<screen><prompt role="user">$</prompt> nova boot --flavor <replaceable>FLAVOR</replaceable> --block-device source=<replaceable>SOURCE</replaceable>,id=<replaceable>ID</replaceable>,dest=<replaceable>DEST</replaceable>,size=<replaceable>SIZE</replaceable>,shutdown=<replaceable>PRESERVE</replaceable>,bootindex=<replaceable>INDEX</replaceable><replaceable>NAME</replaceable></screen>
       <para>
        The parameters are:
       </para>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          <option>--flavor</option><replaceable>FLAVOR</replaceable>. The
          flavor ID or name.
         </para>
        </listitem>
        <listitem>
         <para>
          <option>--block-device</option>
          source=<replaceable>SOURCE</replaceable>,id=<replaceable>ID</replaceable>,dest=<replaceable>DEST</replaceable>,size=<replaceable>SIZE</replaceable>,shutdown=<replaceable>PRESERVE</replaceable>,bootindex=<replaceable>INDEX</replaceable>
         </para>
         <variablelist>
          <varlistentry>
           <term>
                        source=SOURCE
                      </term>
           <listitem>
            <para>
             The type of object used to create the block device. Valid
             values are <literal>volume</literal>,
             <literal>snapshot</literal>, <literal>image</literal>, and
             <literal>blank</literal>.
            </para>
           </listitem>
          </varlistentry>
          <varlistentry>
           <term>
                        id=ID
                      </term>
           <listitem>
            <para>
             The ID of the source object.
            </para>
           </listitem>
          </varlistentry>
          <varlistentry>
           <term>
                        dest=DEST
                      </term>
           <listitem>
            <para>
             The type of the target virtual device. Valid values are
             <literal>volume</literal> and <literal>local</literal>.
            </para>
           </listitem>
          </varlistentry>
          <varlistentry>
           <term>
                        size=SIZE
                      </term>
           <listitem>
            <para>
             The size of the volume that is created.
            </para>
           </listitem>
          </varlistentry>
          <varlistentry>
           <term>
                        shutdown={preserve|remove}
                      </term>
           <listitem>
            <para>
             What to do with the volume when the instance is deleted.
             <literal>preserve</literal> does not delete the volume.
             <literal>remove</literal> deletes the volume.
            </para>
           </listitem>
          </varlistentry>
          <varlistentry>
           <term>
                        bootindex=INDEX
                      </term>
           <listitem>
            <para>
             Orders the boot disks. Use <literal>0</literal> to boot from
             this volume.
            </para>
           </listitem>
          </varlistentry>
         </variablelist>
        </listitem>
        <listitem>
         <para>
          <replaceable>NAME</replaceable>. The name for the server.
         </para>
        </listitem>
       </itemizedlist>
      </step>
      <step xml:id="launch_image_from_volume">
       <para>
        Create a bootable volume from an image, before the instance boots.
        The volume is not deleted when the instance is terminated:
       </para>
<screen><prompt role="user">$</prompt> nova boot --flavor 2 \
    --block-device source=image,id=e0b7734d-2331-42a3-b19e-067adc0da17d,dest=volume,size=10,shutdown=preserve,bootindex=0 \
    myInstanceFromVolume
+--------------------------------------+-------------------------------------------------+
| Property                             | Value                                           |
+--------------------------------------+-------------------------------------------------+
| OS-EXT-STS:task_state                | scheduling                                      |
| image                                | Attempt to boot from volume - no image supplied |
| OS-EXT-STS:vm_state                  | building                                        |
| OS-EXT-SRV-ATTR:instance_name        | instance-00000003                               |
| OS-SRV-USG:launched_at               | None                                            |
| flavor                               | m1.small                                        |
| id                                   | 2e65c854-dba9-4f68-8f08-fe332e546ecc            |
| security_groups                      | [{u'name': u'default'}]                         |
| user_id                              | 352b37f5c89144d4ad0534139266d51f                |
| OS-DCF:diskConfig                    | MANUAL                                          |
| accessIPv4                           |                                                 |
| accessIPv6                           |                                                 |
| progress                             | 0                                               |
| OS-EXT-STS:power_state               | 0                                               |
| OS-EXT-AZ:availability_zone          | nova                                            |
| config_drive                         |                                                 |
| status                               | BUILD                                           |
| updated                              | 2014-02-02T13:29:54Z                            |
| hostId                               |                                                 |
| OS-EXT-SRV-ATTR:host                 | None                                            |
| OS-SRV-USG:terminated_at             | None                                            |
| key_name                             | None                                            |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | None                                            |
| name                                 | myInstanceFromVolume                            |
| adminPass                            | TzjqyGsRcJo9                                    |
| tenant_id                            | f7ac731cc11f40efbc03a9f9e1d1d21f                |
| created                              | 2014-02-02T13:29:53Z                            |
| os-extended-volumes:volumes_attached | []                                              |
| metadata                             | {}                                              |
+--------------------------------------+-------------------------------------------------+</screen>
      </step>
      <step>
       <para>
        List volumes to see the bootable volume and its attached
        <literal>myInstanceFromVolume</literal> instance:
       </para>
<screen><prompt role="user">$</prompt> cinder list
+--------------------------------------+--------+--------------+------+-------------+----------+--------------------------------------+
|                  ID                  | Status | Display Name | Size | Volume Type | Bootable |             Attached to              |
+--------------------------------------+--------+--------------+------+-------------+----------+--------------------------------------+
| 2fff50ab-1a9c-4d45-ae60-1d054d6bc868 | in-use |              |  10  |     None    |   true   | 2e65c854-dba9-4f68-8f08-fe332e546ecc |
+--------------------------------------+--------+--------------+------+-------------+----------+--------------------------------------+</screen>
      </step>
     </procedure>
    </sect3>
    <sect3 xml:id="attach-disk-to-instance">
     <title>Attach swap or ephemeral disk to an instance</title>
     <para>
      Use the nova <command>boot</command><option>--swap</option> parameter
      to attach a swap disk on boot or the nova
      <command>boot</command><option>--ephemeral</option> parameter to
      attach an ephemeral disk on boot. When you terminate the instance,
      both disks are deleted.
     </para>
     <para>
      Boot an instance with a 512Â MB swap disk and 2Â GB ephemeral disk:
     </para>
<screen><prompt role="user">$</prompt> nova boot --flavor <replaceable>FLAVOR</replaceable> --image <replaceable>IMAGE_ID</replaceable> --swap 512 --ephemeral size=2 <replaceable>NAME</replaceable></screen>
     <note>
      <para>
       The flavor defines the maximum swap and ephemeral disk size. You
       cannot exceed these maximum values.
      </para>
     </note>
    </sect3>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_manage_instances">
   <title>Manage instances and hosts</title>

   <para>
    Instances are virtual machines that run inside the cloud on physical
    compute nodes. The Compute service manages instances. A host is the node
    on which a group of instances resides.
   </para>

   <para>
    This section describes how to perform the different tasks involved in
    instance management, such as adding floating IP addresses, stopping and
    starting instances, and terminating instances. This section also
    discusses node management tasks.
   </para>

   <sect2 xml:id="manage_ip_addresses">
    <title>Manage IP addresses</title>
    <para>
     Each instance has a private, fixed IP address and can also have a
     public, or floating, address. Private IP addresses are used for
     communication between instances, and public addresses are used for
     communication with networks outside the cloud, including the Internet.
    </para>
    <para>
     When you launch an instance, it is automatically assigned a private IP
     address that stays the same until you explicitly terminate the
     instance. Rebooting an instance has no effect on the private IP
     address.
    </para>
    <para>
     A pool of floating IP addresses, configured by the cloud administrator,
     is available in OpenStack Compute. The project quota defines the
     maximum number of floating IP addresses that you can allocate to the
     project. After you allocate a floating IP address to a project, you
     can:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Associate the floating IP address with an instance of the project.
       Only one floating IP address can be allocated to an instance at any
       given time.
      </para>
     </listitem>
     <listitem>
      <para>
       Disassociate a floating IP address from an instance in the project.
      </para>
     </listitem>
     <listitem>
      <para>
       Delete a floating IP from the project; deleting a floating IP
       automatically deletes that IP's associations.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Use the <command>nova floating-ip-*</command> commands to manage
     floating IP addresses.
    </para>
    <sect3 xml:id="floating_ips_proc">
     <title>List floating IP address information</title>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        To list all pools that provide floating IP addresses, run:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-pool-list
+--------+
| name   |
+--------+
| public |
| test   |
+--------+</screen>
       <note>
        <para>
         If this list is empty, the cloud administrator must configure a
         pool of floating IP addresses.
        </para>
       </note>
      </listitem>
      <listitem>
       <para>
        To list all floating IP addresses that are allocated to the current
        project, run:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-list
+--------------+--------------------------------------+----------+--------+
| Ip           | Instance Id                          | Fixed Ip | Pool   |
+--------------+--------------------------------------+----------+--------+
| 172.24.4.225 | 4a60ff6a-7a3c-49d7-9515-86ae501044c6 | 10.0.0.2 | public |
| 172.24.4.226 | None                                 | None     | public |
+--------------+--------------------------------------+----------+--------+</screen>
       <para>
        For each floating IP address that is allocated to the current
        project, the command outputs the floating IP address, the ID for the
        instance to which the floating IP address is assigned, the
        associated fixed IP address, and the pool from which the floating IP
        address was allocated.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="floating_ip_allocate">
     <title>Associate floating IP addresses</title>
     <para>
      You can assign a floating IP address to a project and to an instance.
     </para>
     <procedure>
      <step>
       <para>
        Run the following command to allocate a floating IP address to the
        current project. By default, the floating IP address is allocated
        from the <systemitem>public</systemitem> pool. The command outputs
        the allocated IP address.
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-create
+--------------+-------------+----------+--------+
| Ip           | Instance Id | Fixed Ip | Pool   |
+--------------+-------------+----------+--------+
| 172.24.4.225 | None        | None     | public |
+--------------+-------------+----------+--------+</screen>
       <note>
        <para>
         If more than one IP address pool is available, you can specify the
         pool from which to allocate the IP address, using the pool's name.
         For example, to allocate a floating IP address from the
         <literal>test</literal> pool, run:
        </para>
<screen><prompt role="user">$</prompt> nova floating-ip-create test</screen>
       </note>
      </step>
      <step>
       <para>
        List all project instances with which a floating IP address could be
        associated:
       </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+------+---------+------------+-------------+------------------+
| ID                                   | Name | Status  | Task State | Power State | Networks         |
+--------------------------------------+------+---------+------------+-------------+------------------+
| d5c854f9-d3e5-4fce-94d9-3d9f9f8f2987 | VM1  | ACTIVE  | -          | Running     | private=10.0.0.3 |
| 42290b01-0968-4313-831f-3b489a63433f | VM2  | SHUTOFF | -          | Shutdown    | private=10.0.0.4 |
+--------------------------------------+------+---------+------------+-------------+------------------+</screen>
      </step>
      <step>
       <para>
        Associate an IP address with an instance in the project, as follows:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-associate <replaceable>INSTANCE_NAME_OR_ID</replaceable><replaceable>FLOATING_IP_ADDRESS</replaceable></screen>
       <para>
        For example:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-associate VM1 172.24.4.225</screen>
       <para>
        Notice that the instance is now associated with two IP addresses:
       </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+------+---------+------------+-------------+--------------------------------+
| ID                                   | Name | Status  | Task State | Power State | Networks                       |
+--------------------------------------+------+---------+------------+-------------+--------------------------------+
| d5c854f9-d3e5-4fce-94d9-3d9f9f8f2987 | VM1  | ACTIVE  | -          | Running     | private=10.0.0.3, 172.24.4.225 |
| 42290b01-0968-4313-831f-3b489a63433f | VM2  | SHUTOFF | -          | Shutdown    | private=10.0.0.4               |
+--------------------------------------+------+---------+------------+-------------+--------------------------------+</screen>
       <para>
        After you associate the IP address and configure security group
        rules for the instance, the instance is publicly available at the
        floating IP address.
       </para>
       <note>
        <para>
         If an instance is connected to multiple networks, you can associate
         a floating IP address with a specific fixed IP address using the
         optional <option>--fixed-address</option> parameter:
        </para>
<screen><prompt role="user">$</prompt> nova floating-ip-associate --fixed-address <replaceable>FIXED_IP_ADDRESS</replaceable><replaceable>INSTANCE_NAME_OR_ID</replaceable><replaceable>FLOATING_IP_ADDRESS</replaceable></screen>
       </note>
      </step>
     </procedure>
    </sect3>
    <sect3 xml:id="floating_ip_disassociate">
     <title>Disassociate floating IP addresses</title>
     <procedure>
      <step>
       <para>
        Release a floating IP address from an instance, as follows:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-disassociate <replaceable>INSTANCE_NAME_OR_ID</replaceable><replaceable>FLOATING_IP_ADDRESS</replaceable></screen>
      </step>
      <step>
       <para>
        Release the floating IP address from the current project, as
        follows:
       </para>
<screen><prompt role="user">$</prompt> nova floating-ip-delete <replaceable>FLOATING_IP_ADDRESS</replaceable></screen>
       <para>
        The IP address is returned to the pool of IP addresses that is
        available for all projects. If the IP address is still associated
        with a running instance, it is automatically disassociated from that
        instance.
       </para>
      </step>
     </procedure>
    </sect3>
   </sect2>

   <sect2 xml:id="nova_cli_resize">
    <title>Change the size of your server</title>
    <para>
     You change the size of a server by changing its flavor.
    </para>
    <procedure>
     <step>
      <para>
       Show information about your server, including its size, which is
       shown as the value of the flavor property.
      </para>
<screen><prompt role="user">$</prompt> nova show myCirrosServer
        +-------------------------------------+----------------------------------------------------------------+
| Property                            | Value                                                          |
+-------------------------------------+----------------------------------------------------------------+
| status                              | ACTIVE                                                         |
| updated                             | 2013-07-18T15:08:20Z                                           |
| OS-EXT-STS:task_state               | None                                                           |
| OS-EXT-SRV-ATTR:host                | devstack                                                       |
| key_name                            | None                                                           |
| image                               | cirros-0.3.2-x86_64-uec (397e713c-b95b-4186-ad46-6126863ea0a9) |
| private network                     | 10.0.0.3                                                       |
| hostId                              | 6e1e69b71ac9b1e6871f91e2dfc9a9b9ceca0f05db68172a81d45385       |
| OS-EXT-STS:vm_state                 | active                                                         |
| OS-EXT-SRV-ATTR:instance_name       | instance-00000005                                              |
| OS-EXT-SRV-ATTR:hypervisor_hostname | devstack                                                       |
| flavor                              | m1.small (2)                                                   |
| id                                  | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5                           |
| security_groups                     | [{u'name': u'default'}]                                        |
| user_id                             | 376744b5910b4b4da7d8e6cb483b06a8                               |
| name                                | myCirrosServer                                                 |
| created                             | 2013-07-18T15:07:59Z                                           |
| tenant_id                           | 66265572db174a7aa66eba661f58eb9e                               |
| OS-DCF:diskConfig                   | MANUAL                                                         |
| metadata                            | {u'description': u'Small test image', u'creator': u'joecool'}  |
| accessIPv4                          |                                                                |
| accessIPv6                          |                                                                |
| progress                            | 0                                                              |
| OS-EXT-STS:power_state              | 1                                                              |
| OS-EXT-AZ:availability_zone         | nova                                                           |
| config_drive                        |                                                                |
+-------------------------------------+----------------------------------------------------------------+</screen>
      <para>
       The size (flavor) of the server is <literal>m1.small (2)</literal>.
      </para>
     </step>
     <step>
      <para>
       List the available flavors with the following command:
      </para>
<screen><prompt role="user">$</prompt> nova flavor-list
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID  | Name      | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1   | m1.tiny   | 512       | 1    | 0         |      | 1     | 1.0         | True      |
| 2   | m1.small  | 2048      | 20   | 0         |      | 1     | 1.0         | True      |
| 3   | m1.medium | 4096      | 40   | 0         |      | 2     | 1.0         | True      |
| 4   | m1.large  | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
| 5   | m1.xlarge | 16384     | 160  | 0         |      | 8     | 1.0         | True      |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+</screen>
     </step>
     <step>
      <para>
       To resize the server, pass the server ID or name and the new flavor
       to the <command>nova resize</command> command. Include the
       <literal>--poll</literal> parameter to report the resize progress.
      </para>
<screen><prompt role="user">$</prompt> nova resize myCirrosServer 4 --poll</screen>
<screen>Instance resizing... 100% complete
Finished   </screen>
     </step>
     <step>
      <para>
       Show the status for your server:
      </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+----------------+--------+-----------------------------------------+
| ID                                   | Name           | Status | Networks                                |
+--------------------------------------+----------------+--------+-----------------------------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer | RESIZE | private=172.16.101.6, public=10.4.113.6 |
+--------------------------------------+----------------+--------+-----------------------------------------+</screen>
      <para>
       When the resize completes, the status becomes VERIFY_RESIZE.
      </para>
     </step>
     <step>
      <para>
       Confirm the resize:
      </para>
<screen><prompt role="user">$</prompt> nova resize-confirm 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5</screen>
      <para>
       The server status becomes ACTIVE.
      </para>
     </step>
     <step>
      <para>
       If the resize fails or does not work as expected, you can revert the
       resize:
      </para>
<screen><prompt role="user">$</prompt> nova resize-revert 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5</screen>
      <para>
       The server status becomes ACTIVE.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="search_ip">
    <title>Search for an instance using IP address</title>
    <para>
     You can search for an instance using the IP address parameter,
     <literal>--ip</literal>, with the <command>nova list</command> command.
    </para>
<screen><prompt role="user">$</prompt> nova list --<option>ip</option><replaceable>IP_ADDRESS</replaceable></screen>
    <para>
     The following example shows the results of a search on
     <filename>10.0.0.4</filename>.
    </para>
<screen><prompt role="user">$</prompt> nova list --<option>ip</option><replaceable>10.0.0.4</replaceable>
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 8a99547e-7385-4ad1-ae50-4ecfaaad5f42 | myInstanceFromVolume | ACTIVE | None       | Running     | private=10.0.0.4 |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
   </sect2>

   <sect2 xml:id="nova_cli_stop_start">
    <title>Stop and start an instance</title>
    <para>
     Use one of the following methods to stop and start an instance.
    </para>
    <sect3 xml:id="pause_server">
     <title>Pause and unpause an instance</title>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        To pause an instance, run the following command:
       </para>
<screen><prompt role="user">$</prompt> nova pause <replaceable>INSTANCE_NAME</replaceable> </screen>
       <para>
        This command stores the state of the VM in RAM. A paused instance
        continues to run in a frozen state.
       </para>
      </listitem>
      <listitem>
       <para>
        To unpause the instance, run the following command:
       </para>
<screen><prompt role="user">$</prompt> nova unpause <replaceable>INSTANCE_NAME</replaceable> </screen>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="suspend_resume">
     <title>Suspend and resume an instance</title>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        To initiate a hypervisor-level suspend operation, run the following
        command:
       </para>
<screen><prompt role="user">$</prompt> nova suspend <replaceable>INSTANCE_NAME</replaceable></screen>
      </listitem>
      <listitem>
       <para>
        To resume a suspended instance, run the following command:
       </para>
<screen><prompt role="user">$</prompt> nova resume <replaceable>INSTANCE_NAME</replaceable></screen>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="shelve_server">
     <title>Shelve and unshelve an instance</title>
     <para>
      Shelving is useful if you have an instance that you are not using, but
      would like retain in your list of servers. For example, you can stop
      an instance at the end of a work week, and resume work again at the
      start of the next week. All associated data and resources are kept;
      however, anything still in memory is not retained. If a shelved
      instance is no longer needed, it can also be entirely removed.
     </para>
     <para>
      You can complete the following shelving tasks:
     </para>
     <variablelist>
      <varlistentry>
       <term>Shelve an instance</term>
       <listitem>
        <para>
         Shuts down the instance, and stores it together with associated
         data and resources (a snapshot is taken if not volume backed).
         Anything in memory is lost. Use the following command:
        </para>
<screen><prompt role="user">$</prompt> nova shelve <replaceable>SERVERNAME</replaceable></screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Unshelve an instance</term>
       <listitem>
        <para>
         Restores the instance:
        </para>
<screen><prompt role="user">$</prompt> nova unshelve <replaceable>SERVERNAME</replaceable></screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Remove a shelved instance</term>
       <listitem>
        <para>
         Removes the instance from the server; data and resource
         associations are deleted. If an instance is no longer needed, you
         can move that instance off the hypervisor in order to minimize
         resource usage:
        </para>
<screen><prompt role="user">$</prompt> nova shelve-offload <replaceable>SERVERNAME</replaceable></screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect3>
   </sect2>

   <sect2 xml:id="reboot">
    <title>Reboot an instance</title>
    <para>
     You can soft or hard reboot a running instance. A soft reboot attempts
     a graceful shut down and restart of the instance. A hard reboot power
     cycles the instance.
    </para>
    <procedure>
     <step>
      <para>
       By default, when you reboot an instance, it is a soft reboot.
      </para>
<screen><prompt role="user">$</prompt> nova reboot <replaceable>SERVER</replaceable></screen>
     </step>
    </procedure>
    <procedure>
     <step>
      <para>
       To perform a hard reboot, pass the <option>--hard</option> parameter,
       as follows:
      </para>
<screen><prompt role="user">$</prompt> nova reboot --hard <replaceable>SERVER</replaceable></screen>
     </step>
    </procedure>
    <para>
     It is also possible to reboot a running instance into rescue mode. This
     operation may be required, if a filesystem of an instance becomes
     corrupted with a prolonged usage, for example.
    </para>
    <note>
     <para>
      Pause, suspend, and stop operations are not allowed when an instance
      is running in rescue mode, as triggering these actions causes the loss
      of the original instance state and makes it impossible to unrescue the
      instance.
     </para>
    </note>
    <para>
     Rescue mode provides a mechanism for access, even if an image renders
     the instance inaccessible. By default, it starts an instance from the
     initial image attaching the current boot disk as a secondary one.
    </para>
    <procedure>
     <step>
      <para>
       To perform an instance reboot into rescue mode, run the following
       command:
      </para>
<screen><prompt role="user">$</prompt> nova rescue <replaceable>SERVER</replaceable></screen>
     </step>
    </procedure>
    <procedure>
     <step>
      <para>
       To restart the instance from the normal boot disk, run the following
       command:
      </para>
<screen><prompt role="user">$</prompt> nova unrescue <replaceable>SERVER</replaceable></screen>
     </step>
    </procedure>
    <procedure>
     <step>
      <para>
       If you want to rescue an instance with a specific image, rather than
       the default one, use the <option>--rescue_image_ref</option>
       parameter, as follows:
      </para>
<screen><prompt role="user">$</prompt> nova rescue --rescue_image_ref <replaceable>IMAGE_ID</replaceable><replaceable> SERVER</replaceable></screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="terminating">
    <title>Delete an instance</title>
    <para>
     When you no longer need an instance, you can delete it.
    </para>
    <procedure>
     <step>
      <para>
       List all instances:
      </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer       | ACTIVE | None       | Running     | private=10.0.0.3 |
| 8a99547e-7385-4ad1-ae50-4ecfaaad5f42 | myInstanceFromVolume | ACTIVE | None       | Running     | private=10.0.0.4 |
| d7efd3e4-d375-46d1-9d57-372b6e4bdb7f | newServer            | ERROR  | None       | NOSTATE     |                  |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
     </step>
     <step>
      <para>
       Run the <command>nova delete</command> command to delete the
       instance. The following example shows deletion of the
       <filename>newServer</filename> instance, which is in
       <literal>ERROR</literal> state:
      </para>
<screen><prompt role="user">$</prompt> nova delete newServer</screen>
      <para>
       The command does not notify that your server was deleted.
      </para>
     </step>
     <step>
      <para>
       To verify that the server was deleted, run the <command>nova
       list</command> command:
      </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer       | ACTIVE | None       | Running     | private=10.0.0.3 |
| 8a99547e-7385-4ad1-ae50-4ecfaaad5f42 | myInstanceFromVolume | ACTIVE | None       | Running     | private=10.0.0.4 |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
      <para>
       The deleted instance does not appear in the list.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="instance_console">
    <title>Access an instance through a console</title>
    <para>
     In order to see the console output of an instance, regardless of
     whether or not the console log has output, either VNC or SPICE is used.
     This allows for relaying keyboard and mouse activity to and from the
     instance in question.
    </para>
    <para>
     There are three common remote console access methods in use with
     OpenStack:
    </para>
    <variablelist>
     <varlistentry>
      <term>novnc</term>
      <listitem>
       <para>
        An in-browser VNC client implemented using HTML5 Canvas and
        WebSockets
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>spice</term>
      <listitem>
       <para>
        A complete in-browser client solution for interaction with
        virtualized instances
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>xvpvnc</term>
      <listitem>
       <para>
        A Java client offering console access to an instance
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Example:
    </para>
    <para>
     To access an instance through a remote console, run the following
     command:
    </para>
<screen><prompt role="user">$</prompt> nova <command>get-vnc-console</command><replaceable>INSTANCE_NAME</replaceable><replaceable>VNC_TYPE</replaceable></screen>
    <para>
     The command returns a URL from which you can access your instance:
    </para>
<screen>+--------+------------------------------------------------------------------------------+
| Type   | Url                                                                          |
+--------+------------------------------------------------------------------------------+
| xvpvnc | http://192.168.5.96:6081/console?token=c83ae3a3-15c4-4890-8d45-aefb494a8d6c |
+--------+------------------------------------------------------------------------------+</screen>
    <para>
     <replaceable>VNC_TYPE</replaceable> can be replaced by any of the above
     values as connection types.
    </para>
    <para>
     When using SPICE to view the console of an instance, a browser plugin
     can be used directly on the instance page, or the
     <command>get-vnc-console</command> command can be used with it, as
     well, by returning a token-authenticated address such as the one above.
    </para>
    <para>
     For further information and comparisons (including security
     considerations, please see the
     <link xlink:href="http://docs.openstack.org/security-guide/content/ch026_compute.html">security
     guide</link>.
    </para>
   </sect2>

   <sect2 xml:id="baremetal">
    <title>Manage bare-metal nodes</title>
    <para>
     The bare-metal driver for OpenStack Compute manages provisioning of
     physical hardware by using common cloud APIs and tools such as
     Orchestration (Heat). The use case for this driver is for single tenant
     clouds such as a high-performance computing cluster or for deploying
     OpenStack itself.
    </para>
    <para>
     If you use the bare-metal driver, you must create a network interface
     and add it to a bare-metal node. Then, you can launch an instance from
     a bare-metal image.
    </para>
    <note>
     <para>
      Development efforts are focused on moving the driver out of the
      Compute code base in the Icehouse release.
     </para>
    </note>
    <para>
     You can list and delete bare-metal nodes. When you delete a node, any
     associated network interfaces are removed. You can list and remove
     network interfaces that are associated with a bare-metal node.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Commands</title>
     <listitem>
      <para>
       <command>baremetal-interface-add</command>. Adds a network interface
       to a bare-metal node.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-interface-list</command>. Lists network interfaces
       associated with a bare-metal node.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-interface-remove</command>. Removes a network
       interface from a bare-metal node.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-node-create</command>. Creates a bare-metal node.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-node-delete</command>. Removes a bare-metal node
       and any associated interfaces.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-node-list</command>. Lists available bare-metal
       nodes.
      </para>
     </listitem>
     <listitem>
      <para>
       <command>baremetal-node-show</command>. Shows information about a
       bare-metal node.
      </para>
     </listitem>
    </itemizedlist>
    <sect3 xml:id="cli_nova_baremetal-create">
     <title>Create a bare-metal node</title>
     <para>
      When you create a bare-metal node, your PM address, user name, and
      password should match those that are configured in your hardware's
      BIOS/IPMI configuration.
     </para>
<screen><prompt role="user">$</prompt> nova baremetal-node-create --pm_address PM_ADDRESS --pm_user PM_USERNAME \
  --pm_password PM_PASSWORD $(hostname -f) 1 512 10 aa:bb:cc:dd:ee:ff</screen>
     <para>
      The following example shows the command and results from creating a
      node with the PM address <filename>1.2.3.4</filename>, the PM user
      name <systemitem class="username">ipmi</systemitem>, and password
      <literal>ipmi</literal>.
     </para>
<screen><prompt role="user">$</prompt> nova baremetal-node-create --pm_address 1.2.3.4 --pm_user ipmi \
  --pm_password ipmi $(hostname -f) 1 512 10 aa:bb:cc:dd:ee:ff
+------------------+-------------------+
| Property         | Value             |
+------------------+-------------------+
| instance_uuid    | None              |
| pm_address       | 1.2.3.4           |
| interfaces       | []                |
| prov_vlan_id     | None              |
| cpus             | 1                 |
| memory_mb        | 512               |
| prov_mac_address | aa:bb:cc:dd:ee:ff |
| service_host     | ubuntu            |
| local_gb         | 10                |
| id               | 1                 |
| pm_user          | ipmi              |
| terminal_port    | None              |
+------------------+-------------------+</screen>
    </sect3>
    <sect3 xml:id="cli_nova_baremetal-interface">
     <title>Add a network interface to the node:</title>
     <para>
      For each NIC on the node, you must create an interface, specifying the
      interface's MAC address.
     </para>
<screen><prompt role="user">$</prompt> nova baremetal-interface-add 1 aa:bb:cc:dd:ee:ff
+-------------+-------------------+
| Property    | Value             |
+-------------+-------------------+
| datapath_id | 0                 |
| id          | 1                 |
| port_no     | 0                 |
| address     | aa:bb:cc:dd:ee:ff |
+-------------+-------------------+</screen>
    </sect3>
    <sect3 xml:id="cli_nova_baremetal-instancelaunch">
     <title>Launch an instance from a bare-metal image:</title>
     <para>
      A bare-metal instance is an instance created directly on a physical
      machine without any virtualization layer running underneath it. Nova
      retains power control via IPMI. In some situations, Nova may retain
      network control via Neutron and OpenFlow.
     </para>
<screen><prompt role="user">$</prompt> nova boot --image my-baremetal-image --flavor my-baremetal-flavor test
+-----------------------------+--------------------------------------+
| Property                    | Value                                |
+-----------------------------+--------------------------------------+
| status                      | BUILD                                |
| id                          | cc302a8f-cd81-484b-89a8-b75eb3911b1b |

... wait for instance to become active ...</screen>
     <note>
      <para>
       Set the <option>--availability_zone</option> parameter to specify
       which zone or node to use to start the server. Separate the zone from
       the host name with a comma. For example:
      </para>
<screen><prompt role="user">$</prompt> nova boot --availability_zone zone:<replaceable>HOST</replaceable>,<replaceable>NODE</replaceable></screen>
      <para>
       <literal>host</literal> is optional for the
       <literal>--availability_zone</literal> parameter. You can specify
       simply <literal>zone:,node</literal>. You must still use the comma.
      </para>
     </note>
    </sect3>
    <sect3 xml:id="cli_nova_baremetal-list">
     <title>List bare-metal nodes and interfaces:</title>
     <para>
      Use the <command>nova baremetal-node-list</command> command to view
      all bare-metal nodes and interfaces. When a node is in use, its status
      includes the UUID of the instance that runs on it:
     </para>
<screen><prompt role="user">$</prompt> nova baremetal-node-list
+----+--------+------+-----------+---------+-------------------+------+------------+-------------+-------------+---------------+
| ID | Host   | CPUs | Memory_MB | Disk_GB | MAC Address       | VLAN | PM Address | PM Username | PM Password | Terminal Port |
+----+--------+------+-----------+---------+-------------------+------+------------+-------------+-------------+---------------+
| 1  | ubuntu | 1    | 512       | 10      | aa:bb:cc:dd:ee:ff | None | 1.2.3.4    | ipmi        |             | None          |
+----+--------+------+-----------+---------+-------------------+------+------------+-------------+-------------+---------------+</screen>
    </sect3>
    <sect3 xml:id="cli_nova_baremetal-details">
     <title>Show details for a bare-metal node:</title>
     <para>
      Use the <command>nova baremetal-node-list</command> command to view
      the details for a bare-metal node.
     </para>
<screen><prompt role="user">$</prompt> nova baremetal-node-show 1
+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| instance_uuid    | cc302a8f-cd81-484b-89a8-b75eb3911b1b |
| pm_address       | 1.2.3.4                              |
| interfaces       |
  [{u'datapath_id': u'0', u'id': 1, u'port_no': 0, u'address': u'aa:bb:cc:dd:ee:ff'}] |
| prov_vlan_id     | None                                 |
| cpus             | 1                                    |
| memory_mb        | 512                                  |
| prov_mac_address | aa:bb:cc:dd:ee:ff                    |
| service_host     | ubuntu                               |
| local_gb         | 10                                   |
| id               | 1                                    |
| pm_user          | ipmi                                 |
| terminal_port    | None                                 |
+------------------+--------------------------------------+</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="usage_statistics" xml:base="../common/section_cli_nova_usage_statistics.xml">
    <title>Show usage statistics for hosts and instances</title>
    <para>
     You can show basic statistics on resource usage for hosts and
     instances.
    </para>
    <note>
     <para>
      For more sophisticated monitoring, see the
      <link xlink:href="https://launchpad.net/ceilometer">ceilometer</link>
      project. You can also use tools, such as
      <link xlink:href="http://ganglia.info/">Ganglia</link> or
      <link xlink:href="http://graphite.wikidot.com/">Graphite</link>, to
      gather more detailed data.
     </para>
    </note>
    <sect3 xml:id="host_usage_statistics">
     <title>Show host usage statistics</title>
     <para>
      The following examples show the host usage statistics for a host
      called <filename>devstack</filename>.
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        List the hosts and the nova-related services that run on them:
       </para>
<screen><prompt role="user">$</prompt> nova host-list
+-----------+-------------+----------+
| host_name | service     | zone     |
+-----------+-------------+----------+
| devstack  | conductor   | internal |
| devstack  | compute     | nova     |
| devstack  | cert        | internal |
| devstack  | network     | internal |
| devstack  | scheduler   | internal |
| devstack  | consoleauth | internal |
+-----------+-------------+----------+</screen>
      </listitem>
      <listitem>
       <para>
        Get a summary of resource usage of all of the instances running on
        the host:
       </para>
<screen><prompt role="user">$</prompt> nova host-describe devstack
 +-----------+----------------------------------+-----+-----------+---------+
| HOST     | PROJECT                          | cpu | memory_mb | disk_gb |
+----------+----------------------------------+-----+-----------+---------+
| devstack | (total)                          | 2   | 4003      | 157     |
| devstack | (used_now)                       | 3   | 5120      | 40      |
| devstack | (used_max)                       | 3   | 4608      | 40      |
| devstack | b70d90d65e464582b6b2161cf3603ced | 1   | 512       | 0       |
| devstack | 66265572db174a7aa66eba661f58eb9e | 2   | 4096      | 40      |
+----------+----------------------------------+-----+-----------+---------+</screen>
       <para>
        The <literal>cpu</literal> column shows the sum of the virtual CPUs
        for instances running on the host.
       </para>
       <para>
        The <literal>memory_mb</literal> column shows the sum of the memory
        (in MB) allocated to the instances that run on the host.
       </para>
       <para>
        The <literal>disk_gb</literal> column shows the sum of the root and
        ephemeral disk sizes (in GB) of the instances that run on the host.
       </para>
       <para>
        The row that has the value <literal>used_now</literal> in the
        <literal>PROJECT</literal> column shows the sum of the resources
        allocated to the instances that run on the host, plus the resources
        allocated to the virtual machine of the host itself.
       </para>
       <para>
        The row that has the value <literal>used_max</literal> row in the
        <literal>PROJECT</literal> column shows the sum of the resources
        allocated to the instances that run on the host.
       </para>
      </listitem>
     </itemizedlist>
     <note>
      <para>
       These values are computed by using information about the flavors of
       the instances that run on the hosts. This command does not query the
       CPU usage, memory usage, or hard disk usage of the physical host.
      </para>
     </note>
    </sect3>
    <sect3 xml:id="instance_usage_statistics">
     <title>Show instance usage statistics</title>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Get CPU, memory, I/O, and network statistics for an instance.
       </para>
       <orderedlist spacing="normal">
        <listitem>
         <para>
          List instances:
         </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| ID                                   | Name                 | Status | Task State | Power State | Networks         |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+
| 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 | myCirrosServer       | ACTIVE | None       | Running     | private=10.0.0.3 |
| 8a99547e-7385-4ad1-ae50-4ecfaaad5f42 | myInstanceFromVolume | ACTIVE | None       | Running     | private=10.0.0.4 |
+--------------------------------------+----------------------+--------+------------+-------------+------------------+</screen>
        </listitem>
        <listitem>
         <para>
          Get diagnostic statistics:
         </para>
<screen><prompt role="user">$</prompt> nova diagnostics myCirrosServer
+------------------+----------------+
| Property         | Value          |
+------------------+----------------+
| vnet1_rx         | 1210744        |
| cpu0_time        | 19624610000000 |
| vda_read         | 0              |
| vda_write        | 0              |
| vda_write_req    | 0              |
| vnet1_tx         | 863734         |
| vnet1_tx_errors  | 0              |
| vnet1_rx_drop    | 0              |
| vnet1_tx_packets | 3855           |
| vnet1_tx_drop    | 0              |
| vnet1_rx_errors  | 0              |
| memory           | 2097152        |
| vnet1_rx_packets | 5485           |
| vda_read_req     | 0              |
| vda_errors       | -1             |
+------------------+----------------+</screen>
        </listitem>
       </orderedlist>
      </listitem>
      <listitem>
       <para>
        Get summary statistics for each tenant:
       </para>
<screen><prompt role="user">$</prompt> nova usage-list
Usage from 2013-06-25 to 2013-07-24:
+----------------------------------+-----------+--------------+-----------+---------------+
| Tenant ID                        | Instances | RAM MB-Hours | CPU Hours | Disk GB-Hours |
+----------------------------------+-----------+--------------+-----------+---------------+
| b70d90d65e464582b6b2161cf3603ced | 1         | 344064.44    | 672.00    | 0.00          |
| 66265572db174a7aa66eba661f58eb9e | 3         | 671626.76    | 327.94    | 6558.86       |
+----------------------------------+-----------+--------------+-----------+---------------+</screen>
      </listitem>
     </itemizedlist>
    </sect3>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="inserting_userdata">
   <title>Provide user data to instances</title>

   <para>
    A user data file is a special key in the metadata service that holds a
    file that cloud-aware applications in the guest instance can access. For
    example, one application that uses user data is the
    <link xlink:href="https://help.ubuntu.com/community/CloudInit">cloud-init</link>
    system, which is an open-source package from Ubuntu that is available on
    various Linux distributions and which handles early initialization of a
    cloud instance.
   </para>

   <para>
    You can place user data in a local file and pass it through the
    <option>--user-data &lt;user-data-file&gt;</option> parameter at
    instance creation:
   </para>

<screen><prompt role="user">$</prompt> nova boot --image ubuntu-cloudimage --flavor 1 --user-data mydata.file</screen>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_migrate_instances">
<?dbhtml stop-chunking?>

   <title>Use snapshots to migrate instances</title>

   <para>
    To use snapshots to migrate instances from OpenStack projects to clouds,
    complete these steps.
   </para>

   <procedure>
    <step>
     <para>
      In the source project, perform the following steps:
     </para>
     <orderedlist spacing="normal">
      <listitem>
       <para>
        <link linkend="create_snapshot">Create a snapshot of the
        instance.</link>
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend="download_snapshot">Download the snapshot as an
        image.</link>
       </para>
      </listitem>
     </orderedlist>
    </step>
    <step>
     <para>
      In the destination project, perform the following steps:
     </para>
     <orderedlist spacing="normal">
      <listitem>
       <para>
        <link linkend="import_snapshot">Import the snapshot to the new
        environment.</link>
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend="boot_from_snapshot">Boot a new instance from the
        snapshot.</link>
       </para>
      </listitem>
     </orderedlist>
    </step>
   </procedure>

   <note>
    <para>
     Some cloud providers allow only administrators to perform this task.
    </para>
   </note>

   <sect2 xml:id="create_snapshot">
    <title>Create a snapshot of the instance</title>
    <procedure>
     <step>
      <para>
       Shut down the source VM before you take the snapshot to ensure that
       all data is flushed to disk. If necessary, list the instances to view
       get the instance name.
      </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+------------+--------+------------------------------+
| ID                                   | Name       | Status | Networks                     |
+--------------------------------------+------------+--------+------------------------------+
| c41f3074-c82a-4837-8673-fa7e9fea7e11 | myInstance | ACTIVE | private=10.0.0.3             |
+--------------------------------------+------------+--------+------------------------------+</screen>
<screen><prompt role="user">$</prompt> nova stop example</screen>
     </step>
     <step>
      <para>
       Use the <command>nova list</command> command to confirm that the
       instance shows a <literal>SHUTOFF</literal> status.
      </para>
<screen><prompt role="user">$</prompt> nova list
+--------------------------------------+------------+---------+------------------------------+
| ID                                   | Name       | Status  | Networks                     |
+--------------------------------------+------------+---------+------------------------------+
| c41f3074-c82a-4837-8673-fa7e9fea7e11 | myInstance | SHUTOFF | private=10.0.0.3             |
+--------------------------------------+------------+---------+------------------------------+</screen>
     </step>
     <step>
      <para>
       Use the <command>nova image-create</command> command to take a
       snapshot. Use the <command>nova image-list</command> command to check
       the status until the status is <literal>ACTIVE</literal>:
      </para>
<screen><prompt role="user">$</prompt> nova image-create --poll myInstance myInstanceSnapshot
Instance snapshotting... 50% complete</screen>
<screen><prompt role="user">$</prompt> nova image-list
+--------------------------------------+---------------------------------+--------+--------+
| ID                                   | Name                            | Status | Server |
+--------------------------------------+---------------------------------+--------+--------+
| 657ebb01-6fae-47dc-986a-e49c4dd8c433 | cirros-0.3.2-x86_64-uec         | ACTIVE |        |
| 72074c6d-bf52-4a56-a61c-02a17bf3819b | cirros-0.3.2-x86_64-uec-kernel  | ACTIVE |        |
| 3c5e5f06-637b-413e-90f6-ca7ed015ec9e | cirros-0.3.2-x86_64-uec-ramdisk | ACTIVE |        |
| f30b204e-1ce6-40e7-b8d9-b353d4d84e7d | myInstanceSnapshot              | ACTIVE |        |
+--------------------------------------+---------------------------------+--------+--------+</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="download_snapshot">
    <title>Download the snapshot as an image</title>
    <procedure>
     <step>
      <para>
       Get the image ID:
      </para>
<screen><prompt role="user">$</prompt> nova image-list
+--------------------------------------+-------------------+--------+--------------------------------------+
| ID                                   | Name              | Status | Server                               |
+--------------------------------------+-------------------+--------+--------------------------------------+
| f30b204e-1ce6-40e7-b8d9-b353d4d84e7d | myInstanceSnapshot| ACTIVE | c41f3074-c82a-4837-8673-fa7e9fea7e11 |
+--------------------------------------+-------------------+--------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       Download the snapshot by using the image ID that was returned in the
       previous step:
      </para>
<screen><prompt role="user">$</prompt> glance image-download --file snapshot.raw f30b204e-1ce6-40e7-b8d9-b353d4d84e7d</screen>
      <note>
       <para>
        The <command>glance image-download</command> command requires the
        image ID and cannot use the image name.
       </para>
       <para>
        Ensure there is sufficient space on the destination file system for
        the image file.
       </para>
      </note>
     </step>
     <step>
      <para>
       Make the image available to the new environment, either through HTTP
       or with direct upload to a machine (<command>scp</command>).
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="import_snapshot">
    <title>Import the snapshot to new environment</title>
    <para>
     In the new project or cloud environment, import the snapshot:
    </para>
<screen><prompt role="user">$</prompt> glance image-create --copy-from <replaceable>IMAGE_URL</replaceable></screen>
   </sect2>

   <sect2 xml:id="boot_from_snapshot">
    <title>Boot a new instance from the snapshot</title>
    <para>
     In the new project or cloud environment, use the snapshot to create the
     new instance:
    </para>
<screen><prompt role="user">$</prompt> nova boot --flavor m1.tiny --image myInstanceSnapshot myNewInstance</screen>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="config-drive">
   <title>Store metadata on a configuration drive</title>

   <para>
    You can configure OpenStack to write metadata to a special configuration
    drive that attaches to the instance when it boots. The instance can
    mount this drive and read files from it to get information that is
    normally available through the
    <link xlink:href="http://docs.openstack.org/admin-guide-cloud/content/section_metadata-service.html">metadata
    service</link>. This metadata is different from the user data.
   </para>

   <para>
    One use case for using the configuration drive is to pass a networking
    configuration when you do not use DHCP to assign IP addresses to
    instances. For example, you might pass the IP address configuration for
    the instance through the configuration drive, which the instance can
    mount and access before you configure the network settings for the
    instance.
   </para>

   <para>
    Any modern guest operating system that is capable of mounting an ISO
    9660 or VFAT file system can use the configuration drive.
   </para>

   <sect2 xml:id="requirements">
    <title>Requirements and guidelines</title>
    <para>
     To use the configuration drive, you must follow the following
     requirements for the compute host and image.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Compute host requirements</title>
     <listitem>
      <para>
       The following hypervisors support the configuration drive: libvirt,
       XenServer, Hyper-V, and VMware.
      </para>
     </listitem>
     <listitem>
      <para>
       To use configuration drive with libvirt, XenServer, or VMware, you
       must first install the
       <systemitem class="resource">genisoimage</systemitem> package on each
       compute host. Otherwise, instances do not boot properly.
      </para>
      <para>
       Use the <literal>mkisofs_cmd</literal> flag to set the path where you
       install the <systemitem class="resource">genisoimage</systemitem>
       program. If <systemitem class="resource">genisoimage</systemitem> is
       in same path as the
       <systemitem class="service">nova-compute</systemitem> service, you do
       not need to set this flag.
      </para>
     </listitem>
     <listitem>
      <para>
       To use configuration drive with Hyper-V, you must set the
       <literal>mkisofs_cmd</literal> value to the full path to an
       <literal>mkisofs.exe</literal> installation. Additionally, you must
       set the <literal>qemu_img_cmd</literal> value in the
       <literal>hyperv</literal> configuration section to the full path to
       an <literal>qemu-img</literal> command installation.
      </para>
     </listitem>
    </itemizedlist>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Image requirements</title>
     <listitem>
      <para>
       An image built with a recent version of the
       <systemitem class="resource">cloud-init</systemitem> package can
       automatically access metadata passed through the configuration drive.
       The <systemitem class="resource">cloud-init</systemitem> package
       version 0.7.1 works with Ubuntu and Fedora based images, such as Red
       Hat Enterprise Linux.
      </para>
     </listitem>
     <listitem>
      <para>
       If an image does not have the
       <systemitem class="resource">cloud-init</systemitem> package
       installed, you must customize the image to run a script that mounts
       the configuration drive on boot, reads the data from the drive, and
       takes appropriate action such as adding the public key to an account.
       See <xref linkend="config_drive_contents"/> for details about how
       data is organized on the configuration drive.
      </para>
     </listitem>
     <listitem>
      <para>
       If you use Xen with a configuration drive, use the
       <literal>xenapi_disable_agent</literal> configuration parameter to
       disable the agent.
      </para>
     </listitem>
    </itemizedlist>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Guidelines</title>
     <listitem>
      <para>
       Do not rely on the presence of the EC2 metadata in the configuration
       drive, because this content might be removed in a future release. For
       example, do not rely on files in the <filename>ec2</filename>
       directory.
      </para>
     </listitem>
     <listitem>
      <para>
       When you create images that access configuration drive data and
       multiple directories are under the <filename>openstack</filename>
       directory, always select the highest API version by date that your
       consumer supports. For example, if your guest image supports the
       2012-03-05, 2012-08-05, and 2013-04-13 versions, try 2013-04-13 first
       and fall back to a previous version if 2013-04-13 is not present.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="enable_config_drive">
    <title>Enable and access the configuration drive</title>
    <procedure>
     <step>
      <para>
       To enable the configuration drive, pass the <literal>--config-drive
       true</literal> parameter to the <command>nova boot</command> command.
      </para>
      <para>
       The following example enables the configuration drive and passes user
       data, two files, and two key/value metadata pairs, all of which are
       accessible from the configuration drive:
      </para>
<screen><prompt role="user">$</prompt> nova boot --config-drive true --image my-image-name --key-name mykey --flavor 1 --user-data ./my-user-data.txt myinstance --file /etc/network/interfaces=/home/myuser/instance-interfaces --file known_hosts=/home/myuser/.ssh/known_hosts --meta role=webservers --meta essential=false</screen>
      <para>
       You can also configure the Compute service to always create a
       configuration drive by setting the following option in the
       <filename>/etc/nova/nova.conf</filename> file:
      </para>
<screen remap="programlisting-ini">force_config_drive=true</screen>
      <note>
       <para>
        If a user passes the <literal>--config-drive true</literal> flag to
        the <command>nova boot</command> command, an administrator cannot
        disable the configuration drive.
       </para>
      </note>
     </step>
     <step>
      <para>
       If your guest operating system supports accessing disk by label, you
       can mount the configuration drive as the
       <filename>/dev/disk/by-label/<replaceable>configurationDriveVolumeLabel</replaceable></filename>
       device. In the following example, the configuration drive has the
       <filename>config-2</filename> volume label.
      </para>
<screen><prompt role="user">#</prompt> mkdir -p /mnt/config
<prompt role="user">#</prompt> mount /dev/disk/by-label/config-2 /mnt/config</screen>
      <note>
       <para>
        Ensure that you use at least version 0.3.1 of CirrOS for
        configuration drive support.
       </para>
      </note>
      <para>
       If your guest operating system does not use <literal>udev</literal>,
       the <filename>/dev/disk/by-label</filename> directory is not present.
      </para>
      <para>
       You can use the <command>blkid</command> command to identify the
       block device that corresponds to the configuration drive. For
       example, when you boot the CirrOS image with the
       <literal>m1.tiny</literal> flavor, the device is
       <filename>/dev/vdb</filename>:
      </para>
<screen><prompt role="user">#</prompt> blkid -t LABEL="config-2" -odevice</screen>
<screen>/dev/vdb</screen>
      <para>
       Once identified, you can mount the device:
      </para>
<screen><prompt role="user">#</prompt> mkdir -p /mnt/config
<prompt role="user">#</prompt> mount /dev/vdb /mnt/config</screen>
     </step>
    </procedure>
    <sect3 xml:id="config_drive_contents">
     <title>Configuration drive contents</title>
     <para>
      In this example, the contents of the configuration drive are as
      follows:
     </para>
<screen>ec2/2009-04-04/meta-data.json
ec2/2009-04-04/user-data
ec2/latest/meta-data.json
ec2/latest/user-data
openstack/2012-08-10/meta_data.json
openstack/2012-08-10/user_data
openstack/content
openstack/content/0000
openstack/content/0001
openstack/latest/meta_data.json
openstack/latest/user_data</screen>
     <para>
      The files that appear on the configuration drive depend on the
      arguments that you pass to the <command>nova boot</command> command.
     </para>
    </sect3>
    <sect3 xml:id="os_metadata_format">
     <title>OpenStack metadata format</title>
     <para>
      The following example shows the contents of the
      <filename>openstack/2012-08-10/meta_data.json</filename> and
      <filename>openstack/latest/meta_data.json</filename> files. These
      files are identical. The file contents are formatted for readability.
     </para>
<screen remap="programlisting-json">{
    "availability_zone": "nova",
    "files": [
        {
            "content_path": "/content/0000",
            "path": "/etc/network/interfaces"
        },
        {
            "content_path": "/content/0001",
            "path": "known_hosts"
        }
    ],
    "hostname": "test.novalocal",
    "launch_index": 0,
    "name": "test",
    "meta": {
        "role": "webservers",
        "essential": "false"
    },
    "public_keys": {
        "mykey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDBqUfVvCSez0/Wfpd8dLLgZXV9GtXQ7hnMN+Z0OWQUyebVEHey1CXuin0uY1cAJMhUq8j98SiW+cU0sU4J3x5l2+xi1bodDm1BtFWVeLIOQINpfV1n8fKjHB+ynPpe1F6tMDvrFGUlJs44t30BrujMXBe8Rq44cCk6wqyjATA3rQ== Generated by Nova\n"
    },
    "uuid": "83679162-1378-4288-a2d4-70e13ec132aa"
}
</screen>
     <para>
      Note the effect of the <literal>--file
      /etc/network/interfaces=/home/myuser/instance-interfaces</literal>
      argument that was passed to the <command>nova boot</command> command.
      The contents of this file are contained in the
      <filename>openstack/content/0000</filename> file on the configuration
      drive, and the path is specified as
      <filename>/etc/network/interfaces</filename> in the
      <filename>meta_data.json</filename> file.
     </para>
    </sect3>
    <sect3 xml:id="ec2_metadata_format">
     <title>EC2 metadata format</title>
     <para>
      The following example shows the contents of the
      <filename>ec2/2009-04-04/meta-data.json</filename> and the
      <filename>ec2/latest/meta-data.json</filename> files. These files are
      identical. The file contents are formatted to improve readability.
     </para>
<screen remap="programlisting-json">{
    "ami-id": "ami-00000001",
    "ami-launch-index": 0,
    "ami-manifest-path": "FIXME",
    "block-device-mapping": {
        "ami": "sda1",
        "ephemeral0": "sda2",
        "root": "/dev/sda1",
        "swap": "sda3"
    },
    "hostname": "test.novalocal",
    "instance-action": "none",
    "instance-id": "i-00000001",
    "instance-type": "m1.tiny",
    "kernel-id": "aki-00000002",
    "local-hostname": "test.novalocal",
    "local-ipv4": null,
    "placement": {
        "availability-zone": "nova"
    },
    "public-hostname": "test.novalocal",
    "public-ipv4": "",
    "public-keys": {
        "0": {
            "openssh-key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDBqUfVvCSez0/Wfpd8dLLgZXV9GtXQ7hnMN+Z0OWQUyebVEHey1CXuin0uY1cAJMhUq8j98SiW+cU0sU4J3x5l2+xi1bodDm1BtFWVeLIOQINpfV1n8fKjHB+ynPpe1F6tMDvrFGUlJs44t30BrujMXBe8Rq44cCk6wqyjATA3rQ== Generated by Nova\n"
        }
    },
    "ramdisk-id": "ari-00000003",
    "reservation-id": "r-7lfps8wj",
    "security-groups": [
        "default"
    ]
}
</screen>
    </sect3>
    <sect3 xml:id="user_data">
     <title>User data</title>
     <para>
      The <filename>openstack/2012-08-10/user_data</filename>,
      <filename>openstack/latest/user_data</filename>,
      <filename>ec2/2009-04-04/user-data</filename>, and
      <filename>ec2/latest/user-data</filename> file are present only if the
      <literal>--user-data</literal> flag and the contents of the user data
      file are passed to the <command>nova boot</command> command.
     </para>
    </sect3>
    <sect3 xml:id="config_drive_format">
     <title>Configuration drive format</title>
     <para>
      The default format of the configuration drive as an ISO 9660 file
      system. To explicitly specify the ISO 9660 format, add the following
      line to the <filename>/etc/nova/nova.conf</filename> file:
     </para>
<screen remap="programlisting-ini">config_drive_format=iso9660</screen>
     <para>
      By default, you cannot attach the configuration drive image as a CD
      drive instead of as a disk drive. To attach a CD drive, add the
      following line to the <filename>/etc/nova/nova.conf</filename> file:
     </para>
<screen remap="programlisting-ini">config_drive_cdrom=true</screen>
     <para>
      For legacy reasons, you can configure the configuration drive to use
      VFAT format instead of ISO 9660. It is unlikely that you would require
      VFAT format because ISO 9660 is widely supported across operating
      systems. However, to use the VFAT format, add the following line to
      the <filename>/etc/nova/nova.conf</filename> file:
     </para>
<screen remap="programlisting-ini">config_drive_format=vfat</screen>
     <para>
      If you choose VFAT, the configuration drive is 64Â MB.
     </para>
    </sect3>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="neutron_client_sample_commands" xml:base="../common/section_cli_neutron_manage_networks.xml">
   <title>Create and manage networks</title>

   <para>
    Before you run commands, set the following environment variables:
   </para>

<screen remap="programlisting-bash">export OS_USERNAME=admin
export OS_PASSWORD=password
export OS_TENANT_NAME=admin
export OS_AUTH_URL=http://localhost:5000/v2.0</screen>

   <sect2 xml:id="cli_networks">
    <title>Create networks</title>
    <procedure>
     <step>
      <para>
       List the extensions of the system:
      </para>
<screen><prompt role="user">$</prompt> neutron ext-list -c alias -c name</screen>
<screen>+-----------------+--------------------------+
| alias           | name                     |
+-----------------+--------------------------+
| agent_scheduler | Agent Schedulers         |
| binding         | Port Binding             |
| quotas          | Quota management support |
| agent           | agent                    |
| provider        | Provider Network         |
| router          | Neutron L3 Router        |
| lbaas           | LoadBalancing service    |
| extraroute      | Neutron Extra Route      |
+-----------------+--------------------------+</screen>
     </step>
     <step>
      <para>
       Create a network:
      </para>
<screen><prompt role="user">$</prompt> neutron net-create net1</screen>
<screen>Created a new network:
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| id                        | 2d627131-c841-4e3a-ace6-f2dd75773b6d |
| name                      | net1                                 |
| provider:network_type     | vlan                                 |
| provider:physical_network | physnet1                             |
| provider:segmentation_id  | 1001                                 |
| router:external           | False                                |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   |                                      |
| tenant_id                 | 3671f46ec35e4bbca6ef92ab7975e463     |
+---------------------------+--------------------------------------+</screen>
      <note>
       <para>
        Some fields of the created network are invisible to non-admin users.
       </para>
      </note>
     </step>
     <step>
      <para>
       Create a network with specified provider network type:
      </para>
<screen><prompt role="user">$</prompt> neutron net-create net2 --provider:network-type local</screen>
<screen>Created a new network:
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| id                        | 524e26ea-fad4-4bb0-b504-1ad0dc770e7a |
| name                      | net2                                 |
| provider:network_type     | local                                |
| provider:physical_network |                                      |
| provider:segmentation_id  |                                      |
| router:external           | False                                |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   |                                      |
| tenant_id                 | 3671f46ec35e4bbca6ef92ab7975e463     |
+---------------------------+--------------------------------------+</screen>
      <para>
       Just as shown previously, the unknown option
       <literal>--provider:network-type</literal> is used to create a
       <literal>local</literal> provider network.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_subnets">
    <title>Create subnets</title>
    <procedure>
     <step>
      <para>
       Create a subnet:
      </para>
<screen><prompt role="user">$</prompt> neutron subnet-create net1 192.168.2.0/24 --name subnet1</screen>
<screen>Created a new subnet:
+------------------+--------------------------------------------------+
| Field            | Value                                            |
+------------------+--------------------------------------------------+
| allocation_pools | {"start": "192.168.2.2", "end": "192.168.2.254"} |
| cidr             | 192.168.2.0/24                                   |
| dns_nameservers  |                                                  |
| enable_dhcp      | True                                             |
| gateway_ip       | 192.168.2.1                                      |
| host_routes      |                                                  |
| id               | 15a09f6c-87a5-4d14-b2cf-03d97cd4b456             |
| ip_version       | 4                                                |
| name             | subnet1                                          |
| network_id       | 2d627131-c841-4e3a-ace6-f2dd75773b6d             |
| tenant_id        | 3671f46ec35e4bbca6ef92ab7975e463                 |
+------------------+--------------------------------------------------+</screen>
      <para>
       The <command>subnet-create</command> command has the following
       positional and optional parameters:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         The name or ID of the network to which the subnet belongs.
        </para>
        <para>
         In this example, <literal>net1</literal> is a positional argument
         that specifies the network name.
        </para>
       </listitem>
       <listitem>
        <para>
         The CIDR of the subnet.
        </para>
        <para>
         In this example, <literal>192.168.2.0/24</literal> is a positional
         argument that specifies the CIDR.
        </para>
       </listitem>
       <listitem>
        <para>
         The subnet name, which is optional.
        </para>
        <para>
         In this example, <literal>--name subnet1</literal> specifies the
         name of the subnet.
        </para>
       </listitem>
      </itemizedlist>
      <para>
       For information and examples on more advanced use of neutron's
       <literal>subnet</literal> subcommand, see the
       <link xlink:href="http://docs.openstack.org/admin-guide-cloud/content/advanced_networking.html">Cloud
       Administrator Guide</link>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_routers">
    <title>Create routers</title>
    <procedure>
     <step>
      <para>
       Create a router:
      </para>
<screen><prompt role="user">$</prompt> neutron router-create <replaceable>router1</replaceable></screen>
<screen>Created a new router:
+-----------------------+--------------------------------------+
| Field                 | Value                                |
+-----------------------+--------------------------------------+
| admin_state_up        | True                                 |
| external_gateway_info |                                      |
| id                    | 6e1f11ed-014b-4c16-8664-f4f615a3137a |
| name                  | router1                              |
| status                | ACTIVE                               |
| tenant_id             | 7b5970fbe7724bf9b74c245e66b92abf     |
+-----------------------+--------------------------------------+</screen>
      <para>
       Take note of the unique router identifier returned, this will be
       required in subsequent steps.
      </para>
     </step>
     <step>
      <para>
       Link the router to the external provider network:
      </para>
<screen><prompt role="user">$</prompt> neutron router-gateway-set <replaceable>ROUTER</replaceable><replaceable>NETWORK</replaceable></screen>
      <para>
       Replace <replaceable>ROUTER</replaceable> with the unique identifier
       of the router, replace <replaceable>NETWORK</replaceable> with the
       unique identifier of the external provider network.
      </para>
     </step>
     <step>
      <para>
       Link the router to the subnet:
      </para>
<screen><prompt role="user">$</prompt> neutron router-interface-add <replaceable>ROUTER</replaceable><replaceable>SUBNET</replaceable></screen>
      <para>
       Replace <replaceable>ROUTER</replaceable> with the unique identifier
       of the router, replace <replaceable>SUBNET</replaceable> with the
       unique identifier of the subnet.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_ports">
    <title>Create ports</title>
    <procedure>
     <step>
      <para>
       Create a port with specified IP address:
      </para>
<screen><prompt role="user">$</prompt> neutron port-create net1 --fixed-ip ip_address=192.168.2.40</screen>
<screen>Created a new port:
+----------------------+-------------------------------------------------------------------------------------+
| Field                | Value                                                                               |
+----------------------+-------------------------------------------------------------------------------------+
| admin_state_up       | True                                                                                |
| binding:capabilities | {"port_filter": false}                                                              |
| binding:vif_type     | ovs                                                                                 |
| device_id            |                                                                                     |
| device_owner         |                                                                                     |
| fixed_ips            | {"subnet_id": "15a09f6c-87a5-4d14-b2cf-03d97cd4b456", "ip_address": "192.168.2.40"} |
| id                   | f7a08fe4-e79e-4b67-bbb8-a5002455a493                                                |
| mac_address          | fa:16:3e:97:e0:fc                                                                   |
| name                 |                                                                                     |
| network_id           | 2d627131-c841-4e3a-ace6-f2dd75773b6d                                                |
| status               | DOWN                                                                                |
| tenant_id            | 3671f46ec35e4bbca6ef92ab7975e463                                                    |
+----------------------+-------------------------------------------------------------------------------------+</screen>
      <para>
       In the previous command, <literal>net1</literal> is the network name,
       which is a positional argument. <literal>--fixed-ip
       ip_address=192.168.2.40</literal> is an option, which specifies the
       port's fixed IP address we wanted.
      </para>
      <note>
       <para>
        When creating a port, you can specify any unallocated IP in the
        subnet even if the address is not in a pre-defined pool of allocated
        IP addresses (set by your cloud provider).
       </para>
      </note>
     </step>
     <step>
      <para>
       Create a port without specified IP address:
      </para>
<screen><prompt role="user">$</prompt> neutron port-create net1</screen>
<screen>Created a new port:
+----------------------+------------------------------------------------------------------------------------+
| Field| Value                                                                                              |
+----------------------+------------------------------------------------------------------------------------+
| admin_state_up       | True                                                                               |
| binding:capabilities | {"port_filter": false}                                                             |
| binding:vif_type     | ovs                                                                                |
| device_id            |                                                                                    |
| device_owner         |                                                                                    |
| fixed_ips            | {"subnet_id": "15a09f6c-87a5-4d14-b2cf-03d97cd4b456", "ip_address": "192.168.2.2"} |
| id                   | baf13412-2641-4183-9533-de8f5b91444c                                               |
| mac_address          | fa:16:3e:f6:ec:c7                                                                  |
| name                 |                                                                                    |
| network_id           | 2d627131-c841-4e3a-ace6-f2dd75773b6d                                               |
| status               | DOWN                                                                               |
| tenant_id            | 3671f46ec35e4bbca6ef92ab7975e463                                                   |
+----------------------+------------------------------------------------------------------------------------+</screen>
      <note>
       <para>
        Note that the system allocates one IP address if you do not specify
        an IP address in the <command>neutron port-create</command> command.
       </para>
      </note>
     </step>
     <step>
      <para>
       Query ports with specified fixed IP addresses:
      </para>
<screen><prompt role="user">$</prompt> neutron port-list --fixed-ips ip_address=192.168.2.2 ip_address=192.168.2.40</screen>
<screen>+--------------------------------------+------+-------------------+-------------------------------------------------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                                                           |
+--------------------------------------+------+-------------------+-------------------------------------------------------------------------------------+
| baf13412-2641-4183-9533-de8f5b91444c |      | fa:16:3e:f6:ec:c7 | {"subnet_id": "15a09f6c-87a5-4d14-b2cf-03d97cd4b456", "ip_address": "192.168.2.2"}  |
| f7a08fe4-e79e-4b67-bbb8-a5002455a493 |      | fa:16:3e:97:e0:fc | {"subnet_id": "15a09f6c-87a5-4d14-b2cf-03d97cd4b456", "ip_address": "192.168.2.40"} |
+--------------------------------------+------+-------------------+-------------------------------------------------------------------------------------+                 </screen>
      <para>
       <literal>--fixed-ips ip_address=192.168.2.2
       ip_address=192.168.2.40</literal> is one unknown option.
      </para>
      <para>
       <emphasis role="bold">How to find unknown options?</emphasis> The
       unknown options can be easily found by watching the output of
       <literal>create_xxx</literal> or <literal>show_xxx</literal> command.
       For example, in the port creation command, we see the fixed_ips
       fields, which can be used as an unknown option.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="managing-openstack-object-storage-with-swift-cli">
   <title>Manage objects and containers</title>

<?dbhtml stop-chunking?>

   <para>
    The OpenStack Object Storage service provides the
    <command>swift</command> client, which is a command-line interface
    (CLI). Use this client to list objects and containers, upload objects to
    containers, and download or delete objects from containers. You can also
    gather statistics and update metadata for accounts, containers, and
    objects.
   </para>

   <para>
    This client is based on the native swift client library,
    <literal>client.py</literal>, which seamlessly re-authenticates if the
    current token expires during processing, retries operations multiple
    times, and provides a processing concurrency of 10.
   </para>

   <sect2 xml:id="cli_create_containers">
    <title>Create and manage containers</title>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       To create a container, run the following command and replace
       <replaceable>CONTAINER</replaceable> with the name of your container.
      </para>
<screen><prompt role="user">$</prompt> swift post <replaceable>CONTAINER</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       To list all containers, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift list</screen>
     </listitem>
     <listitem>
      <para>
       To check the status of containers, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift stat</screen>
<screen>Account: AUTH_7b5970fbe7724bf9b74c245e77c03bcg
Containers: 2
Objects: 3
Bytes: 268826
Accept-Ranges: bytes
X-Timestamp: 1392683866.17952
Content-Type: text/plain; charset=utf-8</screen>
      <para>
       You can also use the <command>swift stat</command> command with the
       <replaceable>ACCOUNT</replaceable> or
       <replaceable>CONTAINER</replaceable> names as parameters.
      </para>
<screen><prompt role="user">$</prompt> swift stat <replaceable>CONTAINER</replaceable></screen>
<screen>Account: AUTH_7b5970fbe7724bf9b74c245e77c03bcg
Container: storage1
Objects: 2
Bytes: 240221
Read ACL:
Write ACL:
Sync To:
Sync Key:
Accept-Ranges: bytes
X-Timestamp: 1392683866.20180
Content-Type: text/plain; charset=utf-8</screen>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="cli_manage_access_swift">
    <title>Manage access</title>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Users have roles on accounts. For example, a user with the admin role
       has full access to all containers and objects in an account. You can
       set access control lists (ACLs) at the container level and support
       lists for read and write access, which you set with the
       <literal>X-Container-Read</literal> and
       <literal>X-Container-Write</literal> headers.
      </para>
      <para>
       To give a user read access, use the <command>swift post</command>
       command with the <option>-r</option> parameter. To give a user write
       access, use the <option>-w</option> parameter.
      </para>
      <para>
       The following example enables the <literal>testuser</literal> user to
       read objects in the container:
      </para>
<screen><prompt role="user">$</prompt> swift post -r 'testuser'</screen>
      <para>
       You can also use this command with a list of users.
      </para>
     </listitem>
     <listitem>
      <para>
       If you use StaticWeb middleware to enable Object Storage to serve
       public web content, use <literal>.r:</literal>, followed by a list of
       allowed referrers.
      </para>
      <para>
       The following command gives object access to all referring domains:
      </para>
<screen><prompt role="user">$</prompt> swift post -r '.r:*'</screen>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="cli_manage_objects">
    <title>Manage objects</title>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       To upload an object to a container, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift upload <replaceable>CONTAINER</replaceable><replaceable>OBJECT_FILENAME</replaceable></screen>
      <para>
       To upload in chunks, for large files, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift upload -S <replaceable>CHUNK_SIZE</replaceable><replaceable>CONTAINER</replaceable><replaceable>OBJECT_FILENAME</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       To check the status of the object, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift stat <replaceable>CONTAINER</replaceable><replaceable>OBJECT_FILENAME</replaceable></screen>
<screen>Account: AUTH_7b5970fbe7724bf9b74c245e77c03bcg
Container: storage1
Object: images
Content Type: application/octet-stream
Content Length: 211616
Last Modified: Tue, 18 Feb 2014 00:40:36 GMT
ETag: 82169623d55158f70a0d720f238ec3ef
Meta Orig-Filename: images.jpg
Accept-Ranges: bytes
X-Timestamp: 1392684036.33306</screen>
     </listitem>
     <listitem>
      <para>
       To list the objects in a container, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift list <replaceable>CONTAINER</replaceable></screen>
     </listitem>
     <listitem>
      <para>
       To download an object from a container, run the following command:
      </para>
<screen><prompt role="user">$</prompt> swift download <replaceable>CONTAINER</replaceable><replaceable>OBJECT_FILENAME</replaceable></screen>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="env-vars">
    <title>Environment variables required to run examples</title>
    <para>
     To run the cURL command examples for the Object Storage API requests,
     set these environment variables:
    </para>
    <variablelist>
     <varlistentry>
      <term>
              publicURL
            </term>
      <listitem>
       <para>
        The public URL that is the HTTP endpoint from where you can access
        Object Storage. It includes the Object Storage API version number
        and your account name. For example,
        <literal>https://23.253.72.207/v1/my_account</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              token
            </term>
      <listitem>
       <para>
        The authentication token for Object Storage.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     To obtain these values, run the <command>swift stat -v</command>
     command.
    </para>
    <para>
     As shown in this example, the public URL appears in the
     <literal>StorageURL</literal> field, and the token appears in the
     <literal>Auth Token</literal> field:
    </para>
<screen remap="programlisting">StorageURL: https://23.253.72.207/v1/my_account
Auth Token: {token}
Account: my_account
Containers: 2
Objects: 3
Bytes: 47
Meta Book: MobyDick
X-Timestamp: 1389453423.35964
X-Trans-Id: txee55498935404a2caad89-0052dd3b77
Content-Type: text/plain; charset=utf-8
Accept-Ranges: bytes</screen>
   </sect2>

   <sect2 xml:id="discoverability">
    <title>Discoverability</title>
    <para>
     Your Object Storage system might not enable all features that this
     document describes. These features are:
    </para>
    <itemizedlist role="compact" mark="bullet" spacing="normal">
     <listitem>
      <para>
       <xref linkend="large-object-creation"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <xref linkend="archive-auto-extract"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <xref linkend="static-website"/>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     To discover which features are enabled in your Object Storage system,
     use the <literal>/info</literal> request.
    </para>
    <para>
     To use the <literal>/info</literal> request, send a
     <command>GET</command> request using the <literal>/info</literal> path
     to the Object Store endpoint as shown in this example:
    </para>
<screen><prompt role="user">$</prompt> curl https://storage.example.com/info</screen>
    <para>
     This example shows a truncated response body:
    </para>
<screen remap="programlisting-json">{
   "swift":{
      "version":"1.11.0"
   },
   "staticweb":{

   },
   "tempurl":{

   }
}</screen>
    <para>
     This output shows that the Object Storage system has enabled the static
     website and temporary URL features.
    </para>
<?sbr?>
    <note>
     <para>
      In some cases, the <literal>/info</literal> request will return an
      error. This could be because your service provider has disabled the
      <literal>/info</literal> request function, or because you are using an
      older version that does not support it.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="set-object-versions">
    <title>Object versioning</title>
    <para>
     You can store multiple versions of your content so that you can recover
     from unintended overwrites. Object versioning is an easy way to
     implement version control, which you can use with any type of content.
    </para>
    <note>
     <para>
      You cannot version a large-object manifest file, but the large-object
      manifest file can point to versioned segments.
     </para>
    </note>
    <para>
     We strongly recommended that you put non-current objects in a different
     container than the container where current object versions reside.
    </para>
    <procedure>
     <title>To enable and use object versioning</title>
     <step>
      <para>
       To enable object versioning, ask your cloud provider to set the
       <option>allow_versions</option> option to <literal>TRUE</literal> in
       the container configuration file.
      </para>
     </step>
     <step>
      <para>
       Create an <literal>archive</literal> container to store older
       versions of objects:
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/archive -X PUT -H "Content-Length: 0" -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 201 Created
Content-Length: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx46f8c29050834d88b8d7e-0052e1859d
Date: Thu, 23 Jan 2014 21:11:57 GMT</screen>
     </step>
     <step>
      <para>
       Create a <literal>current</literal> container to store current
       versions of objects.
      </para>
      <para>
       Include the <literal>X-Versions-Location</literal> header. This
       header defines the container that holds the non-current versions of
       your objects. You must UTF-8-encode and then URL-encode the container
       name before you include it in the
       <literal>X-Versions-Location</literal> header. This header enables
       object versioning for all objects in the <literal>current</literal>
       container. Changes to objects in the <literal>current</literal>
       container automatically create non-current versions in the
       <literal>archive</literal> container.
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/current -X PUT -H "Content-Length: 0" -H "X-Auth-Token: $token" -H "X-Versions-Location: archive"</screen>
<screen>HTTP/1.1 201 Created
Content-Length: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: txb91810fb717347d09eec8-0052e18997
Date: Thu, 23 Jan 2014 21:28:55 GMT</screen>
     </step>
     <step>
      <para>
       Create the first version of an object in the
       <literal>current</literal> container:
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/current/my_object --data-binary 1 -X PUT -H "Content-Length: 0" -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 201 Created
Last-Modified: Thu, 23 Jan 2014 21:31:22 GMT
Content-Length: 0
Etag: d41d8cd98f00b204e9800998ecf8427e
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx5992d536a4bd4fec973aa-0052e18a2a
Date: Thu, 23 Jan 2014 21:31:22 GMT</screen>
      <para>
       Nothing is written to the non-current version container when you
       initially <command>PUT</command> an object in the
       <literal>current</literal> container. However, subsequent
       <command>PUT</command> requests that edit an object trigger the
       creation of a version of that object in the
       <literal>archive</literal> container.
      </para>
      <para>
       These non-current versions are named as follows:
      </para>
<screen remap="programlisting">&lt;length&gt;&lt;object_name&gt;&lt;timestamp&gt;</screen>
      <para>
       Where <literal>length</literal> is the 3-character, zero-padded
       hexadecimal character length of the object,
       <literal>&lt;object_name&gt;</literal> is the object name, and
       <literal>&lt;timestamp&gt;</literal> is the time when the
       object was initially created as a current version.
      </para>
     </step>
     <step>
      <para>
       Create a second version of the object in the
       <literal>current</literal> container:
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/current/my_object --data-binary 2 -X PUT -H "Content-Length: 0" -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 201 Created
Last-Modified: Thu, 23 Jan 2014 21:41:32 GMT
Content-Length: 0
Etag: d41d8cd98f00b204e9800998ecf8427e
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx468287ce4fc94eada96ec-0052e18c8c
Date: Thu, 23 Jan 2014 21:41:32 GMT</screen>
     </step>
     <step>
      <para>
       Issue a <command>GET</command> request to a versioned object to get
       the current version of the object. You do not have to do any request
       redirects or metadata lookups.
      </para>
      <para>
       List older versions of the object in the <literal>archive</literal>
       container:
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/archive?prefix=009my_object -X GET -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 200 OK
Content-Length: 30
X-Container-Object-Count: 1
Accept-Ranges: bytes
X-Timestamp: 1390513280.79684
X-Container-Bytes-Used: 0
Content-Type: text/plain; charset=utf-8
X-Trans-Id: tx9a441884997542d3a5868-0052e18d8e
Date: Thu, 23 Jan 2014 21:45:50 GMT

009my_object/1390512682.92052</screen>
      <note>
       <para>
        A <command>POST</command> request to a versioned object updates only
        the metadata for the object and does not create a new version of the
        object. New versions are created only when the content of the object
        changes.
       </para>
      </note>
     </step>
     <step>
      <para>
       Issue a <command>DELETE</command> request to a versioned object to
       remove the current version of the object and replace it with the
       next-most current version in the non-current container.
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/current/my_object -X DELETE -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 204 No Content
Content-Length: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx006d944e02494e229b8ee-0052e18edd
Date: Thu, 23 Jan 2014 21:51:25 GMT</screen>
      <para>
       List objects in the <literal>archive</literal> container to show that
       the archived object was moved back to the <literal>current</literal>
       container:
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/archive?prefix=009my_object -X GET -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 204 No Content
Content-Length: 0
X-Container-Object-Count: 0
Accept-Ranges: bytes
X-Timestamp: 1390513280.79684
X-Container-Bytes-Used: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx044f2a05f56f4997af737-0052e18eed
Date: Thu, 23 Jan 2014 21:51:41 GMT</screen>
      <para>
       This next-most current version carries with it any metadata last set
       on it. If you want to completely remove an object and you have five
       versions of it, you must <command>DELETE</command> it five times.
      </para>
     </step>
     <step>
      <para>
       To disable object versioning for the <literal>current</literal>
       container, remove its <literal>X-Versions-Location</literal> metadata
       header by sending an empty key value.
      </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL/current -X PUT -H "Content-Length: 0" -H "X-Auth-Token: $token" -H "X-Versions-Location: "</screen>
<screen>HTTP/1.1 202 Accepted
Content-Length: 76
Content-Type: text/html; charset=UTF-8
X-Trans-Id: txe2476de217134549996d0-0052e19038
Date: Thu, 23 Jan 2014 21:57:12 GMT

&lt;html&gt;&lt;h1&gt;Accepted&lt;/h1&gt;&lt;p&gt;The request is accepted for processing.&lt;/p&gt;&lt;/html&gt;</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="serialized-response-formats">
    <title>Serialized response formats</title>
    <para>
     By default, the Object Storage API uses a <literal>text/plain</literal>
     response format. In addition, both JSON and XML data serialization
     response formats are supported.
    </para>
    <note>
     <para>
      To run the cURL command examples, you must export
      <link linkend="env-vars">environment variables</link>.
     </para>
    </note>
    <para>
     To define the response format, use one of these methods:
    </para>
    <informaltable>
     <tgroup cols="0">
      <thead>
       <row>
        <entry>
         <para>
          Method
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          <literal>format=<replaceable>format</replaceable></literal> query
          parameter
         </para>
        </entry>
        <entry>
         <para>
          Append this parameter to the URL for a <command>GET</command>
          request, where <replaceable>format</replaceable> is
          <literal>json</literal> or <literal>xml</literal>.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>Accept</literal> request header
         </para>
        </entry>
        <entry>
         <para>
          Include this header in the <command>GET</command> request. The
          valid header values are:
         </para>
         <itemizedlist mark="bullet" spacing="normal">
          <listitem>
           <para>
            <literal>text/plain</literal>
           </para>
           <para>
            Plain text response format. The default.
           </para>
          </listitem>
          <listitem>
           <para>
            <literal>application/jsontext</literal>
           </para>
           <para>
            JSON data serialization response format.
           </para>
          </listitem>
          <listitem>
           <para>
            <literal>application/xml</literal>or <literal>text/xml</literal>
           </para>
           <para>
            XML data serialization response format.
           </para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <example>
     <title>JSON example with format query parameter</title>
     <para>
      For example, this request uses the <option>format</option> query
      parameter to ask for a JSON response:
     </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL?format=json -X GET -H "X-Auth-Token: $token"</screen>
<screen>HTTP/1.1 200 OK
Content-Length: 96
X-Account-Object-Count: 1
X-Timestamp: 1389453423.35964
X-Account-Meta-Subject: Literature
X-Account-Bytes-Used: 14
X-Account-Container-Count: 2
Content-Type: application/json; charset=utf-8
Accept-Ranges: bytes
X-Trans-Id: tx274a77a8975c4a66aeb24-0052d95365
Date: Fri, 17 Jan 2014 15:59:33 GMT</screen>
     <para>
      Object Storage lists container names with additional information in
      JSON format:
     </para>
<screen remap="programlisting-json">[
   {
      "count":0,
      "bytes":0,
      "name":"janeausten"
   },
   {
      "count":1,
      "bytes":14,
      "name":"marktwain"
   }
]</screen>
    </example>
    <example>
     <title>XML example with Accept header</title>
     <para>
      This request uses the <literal>Accept</literal> request header to ask
      for an XML response:
     </para>
<screen><prompt role="user">$</prompt> curl -i $publicURL -X GET -H "X-Auth-Token: $token" -H "Accept: application/xml; charset=utf-8"</screen>
<screen>HTTP/1.1 200 OK
Content-Length: 263
X-Account-Object-Count: 3
X-Account-Meta-Book: MobyDick
X-Timestamp: 1389453423.35964
X-Account-Bytes-Used: 47
X-Account-Container-Count: 2
Content-Type: application/xml; charset=utf-8
Accept-Ranges: bytes
X-Trans-Id: txf0b4c9727c3e491694019-0052e03420
Date: Wed, 22 Jan 2014 21:12:00 GMT</screen>
     <para>
      Object Storage lists container names with additional information in
      XML format:
     </para>
<screen remap="programlisting-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;account name="AUTH_73f0aa26640f4971864919d0eb0f0880"&gt;
    &lt;container&gt;
        &lt;name&gt;janeausten&lt;/name&gt;
        &lt;count&gt;2&lt;/count&gt;
        &lt;bytes&gt;33&lt;/bytes&gt;
    &lt;/container&gt;
    &lt;container&gt;
        &lt;name&gt;marktwain&lt;/name&gt;
        &lt;count&gt;1&lt;/count&gt;
        &lt;bytes&gt;14&lt;/bytes&gt;
    &lt;/container&gt;
&lt;/account&gt;</screen>
     <para>
      The remainder of the examples in this guide use standard,
      non-serialized responses. However, all <command>GET</command> requests
      that perform list operations accept the <option>format</option> query
      parameter or <literal>Accept</literal> request header.
     </para>
    </example>
   </sect2>

   <sect2 xml:id="large-object-creation">
    <title>Large objects</title>
    <para>
     By default, the content of an object cannot be greater than 5Â GB.
     However, you can use a number of smaller objects to construct a large
     object. The large object is comprised of two types of objects:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <emphasis role="bold">Segment objects</emphasis> store the object
       content. You can divide your content into segments, and upload each
       segment into its own segment object. Segment objects do not have any
       special features. You create, update, download, and delete segment
       objects just as you would normal objects.
      </para>
     </listitem>
     <listitem>
      <para>
       A <emphasis role="bold">manifest object</emphasis> links the segment
       objects into one logical large object. When you download a manifest
       object, Object Storage concatenates and returns the contents of the
       segment objects in the response body of the request. This behavior
       extends to the response headers returned by <command>GET</command>
       and <command>HEAD</command> requests. The
       <literal>Content-Length</literal> response header value is the total
       size of all segment objects. Object Storage calculates the
       <literal>ETag</literal> response header value by taking the
       <literal>ETag</literal> value of each segment, concatenating them
       together, and returning the MD5 checksum of the result. The manifest
       object types are:
      </para>
      <variablelist>
       <varlistentry>
        <term>
                  Static large
                            objects
                </term>
        <listitem>
         <para>
          The manifest object content is an ordered list of the names of the
          segment objects in JSON format. See
          <xref linkend="static-large-objects"/>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
                  Dynamic large
                            objects
                </term>
        <listitem>
         <para>
          The manifest object has no content but it has a
          <literal>X-Object-Manifest</literal> metadata header. The value of
          this header is <literal>{container}/{prefix}</literal>, where
          <literal>{container}</literal> is the name of the container where
          the segment objects are stored, and <literal>{prefix}</literal> is
          a string that all segment objects have in common. See
          <xref linkend="dynamic-large-object-creation"/>.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </itemizedlist>
    <note>
     <para>
      If you make a <command>COPY</command> request by using a manifest
      object as the source, the new object is a normal, and not a segment,
      object. If the total size of the source segment objects exceeds 5Â GB,
      the <command>COPY</command> request fails. However, you can make a
      duplicate of the manifest object and this new object can be larger
      than 5Â GB.
     </para>
    </note>
    <sect3 xml:id="static-large-objects">
     <title>Static large objects</title>
     <para>
      To create a static large object, divide your content into pieces and
      create (upload) a segment object to contain each piece.
     </para>
     <para>
      You must record the <literal>ETag</literal> response header that the
      <command>PUT</command> operation returns. Alternatively, you can
      calculate the MD5 checksum of the segment prior to uploading and
      include this in the <literal>ETag</literal> request header. This
      ensures that the upload cannot corrupt your data.
     </para>
     <para>
      List the name of each segment object along with its size and MD5
      checksum in order.
     </para>
     <para>
      Create a manifest object. Include the
      <option>?multipart-manifest=put</option> query string at the end of
      the manifest object name to indicate that this is a manifest object.
     </para>
     <para>
      The body of the <command>PUT</command> request on the manifest object
      comprises a json list, where each element contains the following
      attributes:
     </para>
     <variablelist>
      <varlistentry>
       <term>
                path
              </term>
       <listitem>
        <para>
         The container and object name in the format:
         <literal>{container-name}/{object-name}</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
                etag
              </term>
       <listitem>
        <para>
         The MD5 checksum of the content of the segment object. This value
         must match the <literal>ETag</literal> of that object.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
                size_bytes
              </term>
       <listitem>
        <para>
         The size of the segment object. This value must match the
         <literal>Content-Length</literal> of that object.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <example>
      <title>Static large object manifest list</title>
      <para>
       This example shows three segment objects. You can use several
       containers and the object names do not have to conform to a specific
       pattern, in contrast to dynamic large objects.
      </para>
<screen>[
    {
        "path": "mycontainer/objseg1",
        "etag": "0228c7926b8b642dfb29554cd1f00963",
        "size_bytes": 1468006
    },
    {
        "path": "mycontainer/pseudodir/seg-obj2",
        "etag": "5bfc9ea51a00b790717eeb934fb77b9b",
        "size_bytes": 1572864
    },
    {
        "path": "other-container/seg-final",
        "etag": "b9c3da507d2557c1ddc51f27c54bae51",
        "size_bytes": 256
    }
]
</screen>
     </example>
     <para>
      The <literal>Content-Length</literal> request header must contain the
      length of the json contentâ€”not the length of the segment objects.
      However, after the <command>PUT</command> operation completes, the
      <literal>Content-Length</literal> metadata is set to the total length
      of all the object segments. A similar situation applies to the
      <literal>ETag</literal>. If used in the <command>PUT</command>
      operation, it must contain the MD5 checksum of the json content. The
      <literal>ETag</literal> metadata value is then set to be the MD5
      checksum of the concatenated <literal>ETag</literal> values of the
      object segments. You can also set the <literal>Content-Type</literal>
      request header and custom object metadata.
     </para>
     <para>
      When the <command>PUT</command> operation sees the
      <option>?multipart-manifest=put</option> query parameter, it reads the
      request body and verifies that each segment object exists and that the
      sizes and ETags match. If there is a mismatch, the
      <command>PUT</command>operation fails.
     </para>
     <para>
      If everything matches, the manifest object is created. The
      <literal>X-Static-Large-Object</literal> metadata is set to
      <literal>true</literal> indicating that this is a static object
      manifest.
     </para>
     <para>
      Normally when you perform a <command>GET</command> operation on the
      manifest object, the response body contains the concatenated content
      of the segment objects. To download the manifest list, use the
      <option>?multipart-manifest=get</option> query parameter. The
      resulting list is not formatted the same as the manifest you
      originally used in the <command>PUT</command> operation.
     </para>
     <para>
      If you use the <command>DELETE</command> operation on a manifest
      object, the manifest object is deleted. The segment objects are not
      affected. However, if you add the
      <option>?multipart-manifest=delete</option> query parameter, the
      segment objects are deleted and if all are successfully deleted, the
      manifest object is also deleted.
     </para>
     <para>
      To change the manifest, use a <command>PUT</command> operation with
      the <option>?multipart-manifest=put</option> query parameter. This
      request creates a manifest object. You can also update the object
      metadata in the usual way.
     </para>
    </sect3>
    <sect3 xml:id="dynamic-large-object-creation">
     <title>Dynamic large objects</title>
     <para>
      You must segment objects that are larger than 5Â GB before you can
      upload them. You then upload the segment objects like you would any
      other object and create a dynamic large manifest object. The manifest
      object tells Object Storage how to find the segment objects that
      comprise the large object. The segments remain individually
      addressable, but retrieving the manifest object streams all the
      segments concatenated. There is no limit to the number of segments
      that can be a part of a single large object.
     </para>
     <para>
      To ensure the download works correctly, you must upload all the object
      segments to the same container and ensure that each object name is
      prefixed in such a way that it sorts in the order in which it should
      be concatenated. You also create and upload a manifest file. The
      manifest file is a zero-byte file with the extra
      <literal>X-Object-Manifest</literal><literal>{container}/{prefix}</literal>
      header, where <literal>{container}</literal> is the container the
      object segments are in and <literal>{prefix}</literal> is the common
      prefix for all the segments. You must UTF-8-encode and then URL-encode
      the container and common prefix in the
      <literal>X-Object-Manifest</literal> header.
     </para>
     <para>
      It is best to upload all the segments first and then create or update
      the manifest. With this method, the full object is not available for
      downloading until the upload is complete. Also, you can upload a new
      set of segments to a second location and update the manifest to point
      to this new location. During the upload of the new segments, the
      original manifest is still available to download the first set of
      segments.
     </para>
     <example>
      <title>Upload segment of large object request: HTTP</title>
<screen>PUT /{api_version}/{account}/{container}/{object} HTTP/1.1
Host: storage.example.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
ETag: 8a964ee2a5e88be344f36c22562a6486
Content-Length: 1
X-Object-Meta-PIN: 1234
</screen>
     </example>
     <para>
      No response body is returned. A status code of
      <literal>2<replaceable>nn</replaceable></literal> (between 200 and
      299, inclusive) indicates a successful write; status
      <literal>411</literal><emphasis>Length Required</emphasis> denotes a
      missing <literal>Content-Length</literal> or
      <literal>Content-Type</literal> header in the request. If the MD5
      checksum of the data written to the storage system does NOT match the
      (optionally) supplied ETag value, a
      <literal>422</literal><emphasis>Unprocessable Entity</emphasis>
      response is returned.
     </para>
     <para>
      You can continue uploading segments, like this example shows, prior to
      uploading the manifest.
     </para>
     <example>
      <title>Upload next segment of large object request: HTTP</title>
<screen>PUT /{api_version}/{account}/{container}/{object} HTTP/1.1
Host: storage.example.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
ETag: 8a964ee2a5e88be344f36c22562a6486
Content-Length: 1
X-Object-Meta-PIN: 1234
</screen>
     </example>
     <para>
      Next, upload the manifest you created that indicates the container
      where the object segments reside. Note that uploading additional
      segments after the manifest is created causes the concatenated object
      to be that much larger but you do not need to recreate the manifest
      file for subsequent additional segments.
     </para>
     <example>
      <title>Upload manifest request: HTTP</title>
<screen>PUT /{api_version}/{account}/{container}/{object} HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
Content-Length: 0
X-Object-Meta-PIN: 1234
X-Object-Manifest: {container}/{prefix}
</screen>
     </example>
     <example>
      <title>Upload manifest response: HTTP</title>
<screen>[...]
</screen>
     </example>
     <para>
      The <literal>Content-Type</literal> in the response for a
      <command>GET</command> or <command>HEAD</command> on the manifest is
      the same as the <literal>Content-Type</literal> set during the
      <command>PUT</command> request that created the manifest. You can
      change the <literal>Content-Type</literal> by reissuing the
      <command>PUT</command> request.
     </para>
    </sect3>
    <sect3 xml:id="comparison_dynamic_static_objects">
     <title>Comparison of static and dynamic large objects</title>
     <para>
      While static and dynamic objects have similar behavior, this table
      describes their differences:
     </para>
     <table>
      <title>Static and dynamic large objects</title>
      <tgroup cols="3">
       <colspec colwidth="20%"/>
       <colspec colwidth="40%"/>
       <colspec colwidth="40%"/>
       <thead>
        <row>
         <entry>
          <para/>
         </entry>
         <entry>
          <para>
           Static large object
          </para>
         </entry>
         <entry>
          <para>
           Dynamic large object
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           End-to-end integrity
          </para>
         </entry>
         <entry>
          <para>
           Assured. The list of segments includes the MD5 checksum
           (<literal>ETag</literal>) of each segment. You cannot upload the
           manifest object if the <literal>ETag</literal> in the list
           differs from the uploaded segment object. If a segment is somehow
           lost, an attempt to download the manifest object results in an
           error.
          </para>
         </entry>
         <entry>
          <para>
           Not guaranteed. The eventual consistency model means that
           although you have uploaded a segment object, it might not appear
           in the container listing until later. If you download the
           manifest before it appears in the container, it does not form
           part of the content returned in response to a
           <command>GET</command> request.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Upload order
          </para>
         </entry>
         <entry>
          <para>
           You must upload the segment objects before you upload the
           manifest object.
          </para>
         </entry>
         <entry>
          <para>
           You can upload manifest and segment objects in any order. You are
           recommended to upload the manifest object after the segments in
           case a premature download of the manifest occurs. However, this
           is not enforced.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Removal or addition of segment objects
          </para>
         </entry>
         <entry>
          <para>
           You cannot add or remove segment objects from the manifest.
           However, you can create a completely new manifest object of the
           same name with a different manifest list.
          </para>
         </entry>
         <entry>
          <para>
           You can upload new segment objects or remove existing segments.
           The names must simply match the <literal>{prefix}</literal>
           supplied in <literal>X-Object-Manifest</literal>.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Segment object size and number
          </para>
         </entry>
         <entry>
          <para>
           Segment objects must be at least 1Â MB in size (by default). The
           final segment object can be any size. At most, 1000 segments are
           supported (by default).
          </para>
         </entry>
         <entry>
          <para>
           Segment objects can be any size.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Segment object container name
          </para>
         </entry>
         <entry>
          <para>
           The manifest list includes the container name of each object.
           Segment objects can be in different containers.
          </para>
         </entry>
         <entry>
          <para>
           All segment objects must be in the same container.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Manifest object metadata
          </para>
         </entry>
         <entry>
          <para>
           The object has <literal>X-Static-Large-Object</literal> set to
           <literal>true</literal>. You do not set this metadata directly.
           Instead the system sets it when you <command>PUT</command> a
           static manifest object.
          </para>
         </entry>
         <entry>
          <para>
           The <literal>X-Object-Manifest</literal> value is the
           <literal>{container}/{prefix}</literal>, which indicates where
           the segment objects are located. You supply this request header
           in the <command>PUT</command> operation.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           Copying the manifest object
          </para>
         </entry>
         <entry>
          <para>
           Include the <option>?multipart-manifest=get</option> query string
           in the <command>COPY</command> request. The new object contains
           the same manifest as the original. The segment objects are not
           copied. Instead, both the original and new manifest objects share
           the same set of segment objects.
          </para>
         </entry>
         <entry>
          <para>
           The <command>COPY</command> operation does not create a manifest
           object. To duplicate a manifest object, use the
           <command>GET</command> operation to read the value of
           <literal>X-Object-Manifest</literal> and use this value in the
           <literal>X-Object-Manifest</literal> request header in a
           <command>PUT</command> operation. This creates a new manifest
           object that shares the same set of segment objects as the
           original manifest object.
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </sect3>
   </sect2>

   <sect2 xml:id="large-lists">
    <title>Page through large lists of containers or objects</title>
    <para>
     If you have a large number of containers or objects, you can use the
     <option>marker</option>, <option>limit</option>, and
     <option>end_marker</option> parameters to control how many items are
     returned in a list and where the list starts or ends.
    </para>
    <variablelist>
     <varlistentry>
      <term>
              marker
            </term>
      <listitem>
       <para>
        When you request a list of containers or objects, Object Storage
        returns a maximum of 10,000 names for each request. To get
        subsequent names, you must make another request with the
        <option>marker</option> parameter. Set the <literal>marker</literal>
        parameter to the name of the last item returned in the previous
        list. You must URL-encode the <option>marker</option> value before
        you send the HTTP request. Object Storage returns a maximum of
        10,000 names starting after the last item returned.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              limit
            </term>
      <listitem>
       <para>
        To return fewer than 10,000 names, use the <option>limit</option>
        parameter. If the number of names returned equals the specified
        <option>limit</option> (or 10,000 if you omit the
        <option>limit</option> parameter), you can assume there are more
        names to list. If the number of names in the list is exactly
        divisible by the <option>limit</option> value, the last request has
        no content.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              end_marker
            </term>
      <listitem>
       <para>
        Limits the result set to names that are less than the
        <option>end_marker</option> parameter value. You must URL-encode the
        <option>end_marker</option> value before you send the HTTP request.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <procedure>
     <title>To page through a large list of containers</title>
     <para>
      Assume the following list of container names:
     </para>
<screen>apples
bananas
kiwis
oranges
pears</screen>
     <step>
      <para>
       Use a <option>limit</option> of two:
      </para>
<screen># curl -i $publicURL/?limit=2 -X GET -H "X-Auth-Token: $token"</screen>
<screen>apples
bananas</screen>
      <para>
       Because two container names are returned, there are more names to
       list.
      </para>
     </step>
     <step>
      <para>
       Make another request with a <option>marker</option> parameter set to
       the name of the last item returned:
      </para>
<screen># curl -i $publicURL/?limit=2&amp;amp;marker=bananas -X GET -H "X-Auth-Token: $token"</screen>
<screen>kiwis
oranges</screen>
      <para>
       Again, two items are returned, and there might be more.
      </para>
     </step>
     <step>
      <para>
       Make another request with a <option>marker</option> of the last item
       returned:
      </para>
<screen># curl -i $publicURL/?limit=2&amp;amp;marker=oranges -X GET -H "X-Auth-Token: $token"</screen>
<screen>pears</screen>
      <para>
       You receive a one-item response, which is fewer than the
       <option>limit</option> number of names. This indicates that this is
       the end of the list.
      </para>
     </step>
     <step>
      <para>
       Use the <option>end_marker</option> parameter to limit the result set
       to object names that are less than the <option>end_marker</option>
       parameter value:
      </para>
<screen># curl -i $publicURL/?end_marker=oranges -X GET -H "X-Auth-Token: $token"</screen>
<screen>apples
bananas
kiwis</screen>
      <para>
       You receive a result set of all container names before the
       <option>end-marker</option> value.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="archive-auto-extract">
<?dbhtml stop-chunking?>
    <title>Auto-extract archive files</title>
    <para>
     Use the auto-extract archive feature to upload a tar archive file.
    </para>
    <para>
     The Object Storage system extracts files from the archive file and
     creates an object.
    </para>
    <sect3 xml:id="archive-auto-extract-put">
     <title>Auto-extract archive request</title>
     <para>
      To upload an archive file, make a <command>PUT</command> request. Add
      the <option>extract-archive=<replaceable>format</replaceable></option>
      query parameter to indicate that you are uploading a tar archive file
      instead of normal content.
     </para>
     <para>
      Valid values for the <replaceable>format</replaceable> variable are
      <literal>tar</literal>, <literal>tar.gz</literal>, or
      <literal>tar.bz2</literal>.
     </para>
     <para>
      The path you specify in the <command>PUT</command> request is used for
      the location of the object and the prefix for the resulting object
      names.
     </para>
     <para>
      In the <command>PUT</command> request, you can specify the path for:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        An account
       </para>
      </listitem>
      <listitem>
       <para>
        Optionally, a specific container
       </para>
      </listitem>
      <listitem>
       <para>
        Optionally, a specific object prefix
       </para>
      </listitem>
     </itemizedlist>
     <para>
      For example, if the first object in the tar archive is
      <filename>/home/file1.txt</filename> and you specify the
      <filename>/v1/12345678912345/mybackup/castor/</filename> path, the
      operation creates the <filename>castor/home/file1.txt</filename>
      object in the <literal>mybackup</literal> container in the
      <literal>12345678912345</literal> account.
     </para>
    </sect3>
    <sect3 xml:id="archive-auto-extract-create">
     <title>Create an archive for auto-extract</title>
     <para>
      You must use the tar utility to create the tar archive file.
     </para>
     <para>
      You can upload regular files but you cannot upload other items (for
      example, empty directories or symbolic links).
     </para>
     <para>
      You must UTF-8-encode the member names.
     </para>
     <para>
      The archive auto-extract feature supports these formats:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        The POSIX.1-1988 Ustar format.
       </para>
      </listitem>
      <listitem>
       <para>
        The GNU tar format. Includes the long name, long link, and sparse
        extensions.
       </para>
      </listitem>
      <listitem>
       <para>
        The POSIX.1-2001 pax format.
       </para>
       <para>
        Use gzip or bzip2 to compress the archive.
       </para>
       <para>
        Use the <option>extract-archive</option> query parameter to specify
        the format. Valid values for this parameter are
        <literal>tar</literal>, <literal>tar.gz</literal>, or
        <literal>tar.bz2</literal>.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="archive-auto-extract-response">
     <title>Auto-extract archive response</title>
     <para>
      When Object Storage processes the request, it performs multiple
      sub-operations. Even if all sub-operations fail, the operation returns
      a <literal>201</literal><literal>Created</literal> status. Some
      sub-operations might succeed while others fail: Examine the response
      body to determine the results of each auto-extract archive
      sub-operation.
     </para>
     <para>
      You can set the <literal>Accept</literal> request header to one of
      these values to define the response format:
     </para>
     <variablelist>
      <varlistentry>
       <term>
                text/plain
              </term>
       <listitem>
        <para>
         Formats response as plain text. If you omit the
         <literal>Accept</literal> header, <literal>text/plain</literal> is
         the default.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <variablelist>
      <varlistentry>
       <term>
                application/json
              </term>
       <listitem>
        <para>
         Formats response as JSON.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
                application/xml
              </term>
       <listitem>
        <para>
         Formats response as XML.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <variablelist>
      <varlistentry>
       <term>
                text/xml
              </term>
       <listitem>
        <para>
         Formats response as XML.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following auto-extract archive files example shows a
      <literal>text/plain</literal> response body where no failures
      occurred:
     </para>
<screen>Number Files Created: 10
Errors:</screen>
     <para>
      The following auto-extract archive files example shows a
      <literal>text/plain</literal> response where some failures occurred.
      In this example, the Object Storage system is configured to reject
      certain character strings so that the
      <literal>400</literal><emphasis>Bad Request</emphasis> error occurs
      for any objects that use the restricted strings.
     </para>
<screen>Number Files Created: 8
Errors:
/v1/12345678912345/mycontainer/home/xx%3Cyy, 400 Bad Request
/v1/12345678912345/mycontainer/../image.gif, 400 Bad Request</screen>
     <para>
      The following example shows the failure response in
      <literal>application/json</literal> format.
     </para>
<screen remap="programlisting-json">{
   "Number Files Created":1,
   "Errors":[
      [
         "/v1/12345678912345/mycontainer/home/xx%3Cyy",
         "400 Bad Request"
      ],
      [
         "/v1/12345678912345/mycontainer/../image.gif",
         "400 Bad Request"
      ]
   ]
}</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="pseudo-hierarchical-folders-directories">
    <title>Pseudo-hierarchical folders and directories</title>
    <para>
     Although you cannot nest directories in OpenStack Object Storage, you
     can simulate a hierarchical structure within a single container by
     adding forward slash characters (<literal>/</literal>) in the object
     name. To navigate the pseudo-directory structure, you can use the
     <literal>delimiter</literal> query parameter. This example shows you
     how to use pseudo-hierarchical folders and directories.
    </para>
    <note>
     <para>
      In this example, the objects reside in a container called
      <literal>backups</literal>. Within that container, the objects are
      organized in a pseudo-directory called <literal>photos</literal>. The
      container name is not displayed in the example, but it is a part of
      the object URLs. For instance, the URL of the picture
      <literal>me.jpg</literal> is
      <literal>https://storage.swiftdrive.com/v1/CF_xer7_343/backups/photos/me.jpg</literal>.
     </para>
    </note>
    <example>
     <title>List pseudo-hierarchical folders request: HTTP</title>
     <para>
      To display a list of all the objects in the storage container, use
      <command>GET</command> without a <literal>delimiter</literal> or
      <literal>prefix</literal>.
     </para>
<screen><prompt role="user">$</prompt> curl -X GET -i -H "X-Auth-Token: $token" $publicurl/v1/AccountString/backups</screen>
     <para>
      The system returns status code 2xx (between 200 and 299, inclusive)
      and the requested list of the objects.
     </para>
<screen>photos/animals/cats/persian.jpg
photos/animals/cats/siamese.jpg
photos/animals/dogs/corgi.jpg
photos/animals/dogs/poodle.jpg
photos/animals/dogs/terrier.jpg
photos/me.jpg
photos/plants/fern.jpg
photos/plants/rose.jpg</screen>
     <para>
      Use the delimiter parameter to limit the displayed results. To use
      <literal>delimiter</literal> with pseudo-directories, you must use the
      parameter slash (<literal>/</literal>).
     </para>
<screen><prompt role="user">$</prompt> curl -X GET -i -H "X-Auth-Token: $token" $publicurl/v1/AccountString/backups?delimiter=/</screen>
     <para>
      The system returns status code 2xx (between 200 and 299, inclusive)
      and the requested matching objects. Because you use the slash, only
      the pseudo-directory <literal>photos/</literal> displays. The returned
      values from a slash <literal>delimiter</literal> query are not real
      objects. They have a content-type of
      <literal>application/directory</literal> and are in the
      <literal>subdir</literal> section of JSON and XML results.
     </para>
<screen>photos/</screen>
     <para>
      Use the <literal>prefix</literal> and <literal>delimiter</literal>
      parameters to view the objects inside a pseudo-directory, including
      further nested pseudo-directories.
     </para>
<screen><prompt role="user">$</prompt> curl -X GET -i -H "X-Auth-Token: $token" $publicurl/v1/AccountString/backups?prefix=photos/&amp;delimiter=/</screen>
     <para>
      The system returns status code 2xx (between 200 and 299, inclusive)
      and the objects and pseudo-directories within the top level
      pseudo-directory.
     </para>
<screen>photos/animals/
photos/me.jpg
photos/plants/</screen>
     <para>
      You can create an unlimited number of nested pseudo-directories. To
      navigate through them, use a longer <literal>prefix</literal>
      parameter coupled with the <literal>delimiter</literal> parameter. In
      this sample output, there is a pseudo-directory called
      <literal>dogs</literal> within the pseudo-directory
      <literal>animals</literal>. To navigate directly to the files
      contained within <literal>dogs</literal>, enter the following command:
     </para>
<screen><prompt role="user">$</prompt> curl -X GET -i -H "X-Auth-Token: $token" $publicurl/v1/AccountString/backups?prefix=photos/animals/dogs/&amp;delimiter=/</screen>
     <para>
      The system returns status code 2xx (between 200 and 299, inclusive)
      and the objects and pseudo-directories within the nested
      pseudo-directory.
     </para>
<screen>photos/animals/dogs/corgi.jpg
photos/animals/dogs/poodle.jpg
photos/animals/dogs/terrier.jpg</screen>
    </example>
   </sect2>

   <sect2 xml:id="bulk-delete">
<?dbhtml stop-chunking?>
    <title>Bulk delete</title>
    <para>
     With bulk delete, you can delete up to 10,000 objects or containers
     (configurable) in one request.
    </para>
    <sect3 xml:id="bulk-delete-request">
     <title>Bulk delete request</title>
     <para>
      To perform a bulk delete operation, add the
      <option>bulk-delete</option> query parameter to the path of a
      <command>POST</command> or <command>DELETE</command> operation.
     </para>
     <note>
      <para>
       The <command>DELETE</command> operation is supported for backwards
       compatibility.
      </para>
     </note>
     <para>
      The path is the account, such as
      <literal>/v1/12345678912345</literal>, that contains the objects and
      containers.
     </para>
     <para>
      In the request body of the <command>POST</command> or
      <command>DELETE</command> operation, list the objects or containers to
      be deleted. Separate each name with a newline character. You can
      include a maximum of 10,000 items (configurable) in the list.
     </para>
     <para>
      In addition, you must:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        UTF-8-encode and then URL-encode the names.
       </para>
      </listitem>
      <listitem>
       <para>
        To indicate an object, specify the container and object name as:
        <literal><replaceable>CONTAINER_NAME</replaceable>/<replaceable>OBJECT_NAME</replaceable></literal>.
       </para>
      </listitem>
      <listitem>
       <para>
        To indicate a container, specify the container name as:
        <literal><replaceable>CONTAINER_NAME</replaceable></literal>. Make
        sure that the container is empty. If it contains objects, Object
        Storage cannot delete the container.
       </para>
      </listitem>
      <listitem>
       <para>
        Set the <literal>Content-Type</literal> request header to
        <literal>text/plain</literal>.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="bulk-delete-response">
     <title>Bulk delete response</title>
     <para>
      When Object Storage processes the request, it performs multiple
      sub-operations. Even if all sub-operations fail, the operation returns
      a <literal>200</literal> status. The bulk operation returns a response
      body that contains details that indicate which sub-operations have
      succeeded and failed. Some sub-operations might succeed while others
      fail. Examine the response body to determine the results of each
      delete sub-operation.
     </para>
     <para>
      You can set the <literal>Accept</literal> request header to one of the
      following values to define the response format:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <literal>text/plain</literal>. Formats response as plain text. If
        you omit the <literal>Accept</literal> header,
        <literal>text/plain</literal> is the default.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>application/json</literal>. Formats response as JSON.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>application/xml</literal> or <literal>text/xml</literal>.
        Formats response as XML.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      The response body contains the following information:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        The number of files actually deleted.
       </para>
      </listitem>
      <listitem>
       <para>
        The number of not found objects.
       </para>
      </listitem>
      <listitem>
       <para>
        Errors. A list of object names and associated error statuses for the
        objects that failed to delete. The format depends on the value that
        you set in the <literal>Accept</literal> header.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      The following bulk delete response is in
      <literal>application/xml</literal> format. In this example, the
      <literal>mycontainer</literal> container is not empty, so it cannot be
      deleted.
     </para>
<screen>&lt;delete&gt;
    &lt;number_deleted&gt;2&lt;/number_deleted&gt;
    &lt;number_not_found&gt;4&lt;/number_not_found&gt;
    &lt;errors&gt;
        &lt;object&gt;
            &lt;name&gt;/v1/12345678912345/mycontainer&lt;/name&gt;
            &lt;status&gt;409 Conflict&lt;/status&gt;
        &lt;/object&gt;
    &lt;/errors&gt;
&lt;/delete&gt;</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="static-website">
    <title>Create static website</title>
    <para>
     You can use your Object Storage account to create a static website.
     This static website is created with staticweb middleware and serves
     container data with a specified index file, error file resolution, and
     optional file listings. This mode is normally active only for anonymous
     requests, which provide no authentication token. To use it with
     authenticated requests, set the header <literal>X-Web-Mode</literal> to
     <literal>TRUE</literal> on the request.
    </para>
    <para>
     The staticweb filter must be added to the pipeline in your
     <filename>/etc/swift/proxy-server.conf</filename> file below any
     authentication middleware. You must also add a staticweb middleware
     configuration section.
    </para>
    <para>
     For an example of the staticweb configuration syntax see the
     <link xlink:href="http://docs.openstack.org/juno/config-reference/content/object-storage-static-web.html">Cloud
     Administrator Guide</link>.
    </para>
    <para>
     For a complete example of the
     <filename>/etc/swift/proxy-server.conf</filename> file (including
     staticweb), see the
     <link xlink:href="http://docs.openstack.org/juno/config-reference/content/proxy-server-conf.html">Cloud
     Administrator Guide</link>.
    </para>
    <para>
     Your publicly readable containers are checked for two headers,
     <literal>X-Container-Meta-Web-Index</literal> and
     <literal>X-Container-Meta-Web-Error</literal>. The
     <literal>X-Container-Meta-Web-Error</literal> header is discussed
     below, in <xref linkend="Set_Error_Pages_for_Static_Website-dle4005"/>.
    </para>
    <para>
     Use <literal>X-Container-Meta-Web-Index</literal> to determine the
     index file (or default page served, such as
     <filename>index.html</filename>) for your website. When someone
     initially enters your site, the <filename>index.html</filename> file
     displays automatically. If you create sub-directories for your site by
     creating pseudo-directories in your container, the index page for each
     sub-directory is displayed by default. If your pseudo-directory does
     not have a file with the same name as your index file, visits to the
     sub-directory return a 404 error.
    </para>
    <para>
     You also have the option of displaying a list of files in your
     pseudo-directory instead of a web page. To do this, set the
     <literal>X-Container-Meta-Web-Listings</literal> header to
     <literal>TRUE</literal>. You may add styles to your file listing by
     setting <literal>X-Container-Meta-Web-Listings-CSS:</literal> to a
     style sheet (for example, <literal>lists.css</literal>).
    </para>
    <sect3 xml:id="Examples_for_static_web-dle4025">
     <title>Static web middleware through Object Storage</title>
     <example>
      <title>Make container publicly readable</title>
      <para>
       Make the container publicly readable. Once the container is publicly
       readable, you can access your objects directly, but you must set the
       index file to browse the main site URL and its sub-directories.
      </para>
<screen><prompt role="user">$</prompt> swift post -r '.r:*' container</screen>
     </example>
     <example>
      <title>Set site index file</title>
      <para>
       Set the index file. In this case, <filename>index.html</filename> is
       the default file displayed when the site appears.
      </para>
<screen><prompt role="user">$</prompt> swift post -m 'web-index:index.html' container</screen>
     </example>
     <example>
      <title>Enable file listing</title>
      <para>
       Turn on file listing. If you do not set the index file, the URL
       displays a list of the objects in the container. Instructions on
       styling the list with a CSS follow.
      </para>
<screen><prompt role="user">$</prompt> swift post -m 'web-listings: true' container</screen>
     </example>
     <example>
      <title>Enable CSS for file listing</title>
      <para>
       Style the file listing using a CSS.
      </para>
<screen><prompt role="user">$</prompt> swift post -m 'web-listings-css:listings.css' container</screen>
     </example>
    </sect3>
    <sect3 xml:id="Set_Error_Pages_for_Static_Website-dle4005">
     <title>Set error pages for static website</title>
     <para>
      You can create and set custom error pages for visitors to your
      website; currently, only 401 (Unauthorized) and 404 (Not Found) errors
      are supported. To do this, set the metadata header,
      <literal>X-Container-Meta-Web-Error</literal>.
     </para>
     <para>
      Error pages are served with the &lt;status&gt; code pre-pended
      to the name of the error page you set. For instance, if you set
      <literal>X-Container-Meta-Web-Error</literal> to
      <filename>error.html</filename>, 401 errors will display the page
      <filename>401error.html</filename>. Similarly, 404 errors will display
      <filename>404error.html</filename>. You must have both of these pages
      created in your container when you set the
      <literal>X-Container-Meta-Web-Error</literal> metadata, or your site
      will display generic error pages.
     </para>
     <para>
      You only have to set the <literal>X-Container-Meta-Web-Error</literal>
      metadata once for your entire static website.
     </para>
     <example>
      <title>Set error pages for static website request</title>
<screen><prompt role="user">$</prompt> swift post -m 'web-error:error.html' container</screen>
     </example>
     <para>
      Any 2<varname>nn</varname> response indicates success.
     </para>
    </sect3>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="heat-stack-create">
<?dbhtml stop-chunking?>

   <title>Create and manage stacks</title>

   <para>
    The Orchestration module enables you to orchestrate multiple composite
    cloud applications. This module supports use of both the Amazon Web
    Services (AWS) CloudFormation template format through both a Query API
    that is compatible with CloudFormation and the native OpenStack Heat
    Orchestration Template (HOT) format through a REST API.
   </para>

   <para>
    These flexible template languages enable application developers to
    describe and automate the deployment of infrastructure, services, and
    applications. The templates enable creation of most OpenStack resource
    types, such as instances, floating IP addresses, volumes, security
    groups, and users. The resources, once created, are referred to as
    stacks.
   </para>

   <para>
    The template languages are described in
    <link xlink:href="http://docs.openstack.org/developer/heat/template_guide/index.html">the
    Template Guide</link> in the
    <link xlink:href="http://docs.openstack.org/developer/heat/">Heat
    developer documentation</link>.
   </para>

   <sect2 xml:id="create_stack">
    <title>Create a stack from an example template file</title>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       To create a stack, or template, from an
       <link xlink:href="https://github.com/openstack/heat-templates">example
       template file</link>, run the following command:
      </para>
<screen><prompt role="user">$</prompt> heat stack-create mystack --template-file /<replaceable>PATH_TO_HEAT_TEMPLATES</replaceable>/WordPress_Single_Instance.template
   --parameters "InstanceType=m1.large;DBUsername=<replaceable>USERNAME</replaceable>;DBPassword=<replaceable>PASSWORD</replaceable>;KeyName=<replaceable>HEAT_KEY</replaceable>;LinuxDistribution=F17"</screen>
      <para>
       The <literal>--parameters</literal> values that you specify depend on
       the parameters that are defined in the template. If a website hosts
       the template file, you can specify the URL with the
       <literal>--template-url</literal> parameter instead of the
       <literal>--template-file</literal> parameter.
      </para>
      <para>
       The command returns the following output:
      </para>
<screen>+--------------------------------------+---------------+--------------------+----------------------+
| id                                   | stack_name    | stack_status       | creation_time        |
+--------------------------------------+---------------+--------------------+----------------------+
| 4c712026-dcd5-4664-90b8-0915494c1332 | mystack       | CREATE_IN_PROGRESS | 2013-04-03T23:22:08Z |
+--------------------------------------+---------------+--------------------+----------------------+</screen>
     </listitem>
     <listitem>
      <para>
       You can also use the <command>template-validate</command> command to
       validate a template file without creating a stack from it.
      </para>
      <note>
       <para>
        Previous versions of the heat client used
        <command>validate</command> instead of
        <command>template-validate</command>, but it has been deprecated in
        favor of <command>template-validate</command>.
       </para>
      </note>
      <para>
       To do so, run the following command:
      </para>
<screen><prompt role="user">$</prompt> heat template-validate --template-file /<replaceable>PATH_TO_HEAT_TEMPLATES</replaceable>/WordPress_Single_Instance.template</screen>
      <para>
       If validation fails, the response returns an error message.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="stack_info">
    <title>Get information about stacks</title>
    <para>
     To explore the state and history of a particular stack, you can run a
     number of commands.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       To see which stacks are visible to the current user, run the
       following command:
      </para>
<screen><prompt role="user">$</prompt> heat stack-list
+--------------------------------------+---------------+-----------------+----------------------+
| id                                   | stack_name    | stack_status    | creation_time        |
+--------------------------------------+---------------+-----------------+----------------------+
| 4c712026-dcd5-4664-90b8-0915494c1332 | mystack       | CREATE_COMPLETE | 2013-04-03T23:22:08Z |
| 7edc7480-bda5-4e1c-9d5d-f567d3b6a050 | my-otherstack | CREATE_FAILED   | 2013-04-03T23:28:20Z |
+--------------------------------------+---------------+-----------------+----------------------+</screen>
     </listitem>
     <listitem>
      <para>
       To show the details of a stack, run the following command:
      </para>
<screen><prompt role="user">$</prompt> heat stack-show mystack</screen>
     </listitem>
     <listitem>
      <para>
       A stack consists of a collection of resources. To list the resources
       and their status, run the following command:
      </para>
<screen><prompt role="user">$</prompt> heat resource-list mystack
+---------------------+--------------------+-----------------+----------------------+
| logical_resource_id | resource_type      | resource_status | updated_time         |
+---------------------+--------------------+-----------------+----------------------+
| WikiDatabase        | AWS::EC2::Instance | CREATE_COMPLETE | 2013-04-03T23:25:56Z |
+---------------------+--------------------+-----------------+----------------------+</screen>
     </listitem>
     <listitem>
      <para>
       To show the details for a specific resource in a stack, run the
       following command:
      </para>
<screen><prompt role="user">$</prompt> heat resource-show mystack WikiDatabase</screen>
     </listitem>
     <listitem>
      <para>
       Some resources have associated metadata which can change throughout
       the life cycle of a resource. Show the metadata by running the
       following command:
      </para>
<screen><prompt role="user">$</prompt> heat resource-metadata mystack WikiDatabase</screen>
     </listitem>
     <listitem>
      <para>
       A series of events is generated during the life cycle of a stack. To
       display life cycle events, run the following command::
      </para>
<screen><prompt role="user">$</prompt> heat event-list mystack
+---------------------+----+------------------------+-----------------+----------------------+
| logical_resource_id | id | resource_status_reason | resource_status | event_time           |
+---------------------+----+------------------------+-----------------+----------------------+
| WikiDatabase        | 1  | state changed          | IN_PROGRESS     | 2013-04-03T23:22:09Z |
| WikiDatabase        | 2  | state changed          | CREATE_COMPLETE | 2013-04-03T23:25:56Z |
+---------------------+----+------------------------+-----------------+----------------------+</screen>
     </listitem>
     <listitem>
      <para>
       To show the details for a particular event, run the following
       command:
      </para>
<screen><prompt role="user">$</prompt> heat event-show WikiDatabase 1</screen>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="update_stack">
    <title>Update a stack</title>
    <para>
     To update an existing stack from a modified template file, run a
     command like the following command:
    </para>
<screen><prompt role="user">$</prompt> heat stack-update mystack --template-file /path/to/heat/templates/WordPress_Single_Instance_v2.template
     --parameters "InstanceType=m1.large;DBUsername=wp;DBPassword=verybadpassword;KeyName=heat_key;LinuxDistribution=F17"
+--------------------------------------+---------------+-----------------+----------------------+
| id                                   | stack_name    | stack_status    | creation_time        |
+--------------------------------------+---------------+-----------------+----------------------+
| 4c712026-dcd5-4664-90b8-0915494c1332 | mystack       | UPDATE_COMPLETE | 2013-04-03T23:22:08Z |
| 7edc7480-bda5-4e1c-9d5d-f567d3b6a050 | my-otherstack | CREATE_FAILED   | 2013-04-03T23:28:20Z |
+--------------------------------------+---------------+-----------------+----------------------+</screen>
    <para>
     Some resources are updated in-place, while others are replaced with new
     resources.
    </para>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="ceilometer_cli_commands">
   <title>Measure cloud resources</title>

   <para>
    Telemetry measures cloud resources in OpenStack. It collects data
    related to billing. Currently, this metering service is available
    through only the <command>ceilometer</command> command-line client.
   </para>

   <para>
    To model data, Telemetry uses the following abstractions:
   </para>

   <variablelist>
    <varlistentry>
     <term>
            Meter
          </term>
     <listitem>
      <para>
       Measures a specific aspect of resource usage, such as the existence
       of a running instance, or ongoing performance, such as the CPU
       utilization for an instance. Meters exist for each type of resource.
       For example, a separate <literal>cpu_util</literal> meter exists for
       each instance. The life cycle of a meter is decoupled from the
       existence of its related resource. The meter persists after the
       resource goes away.
      </para>
      <para>
       A meter has the following attributes:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         String name
        </para>
       </listitem>
       <listitem>
        <para>
         A unit of measurement
        </para>
       </listitem>
       <listitem>
        <para>
         A type, which indicates whether values increase monotonically
         (cumulative), are interpreted as a change from the previous value
         (delta), or are stand-alone and relate only to the current duration
         (gauge)
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
            Sample
          </term>
     <listitem>
      <para>
       An individual data point that is associated with a specific meter. A
       sample has the same attributes as the associated meter, with the
       addition of time stamp and value attributes. The value attribute is
       also known as the sample <emphasis role="italic">volume</emphasis>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
            Statistic
          </term>
     <listitem>
      <para>
       A set of data point aggregates over a time duration. (In contrast, a
       sample represents a single data point.) The Telemetry service employs
       the following aggregation functions:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         <emphasis role="bold">count</emphasis>. The number of samples in
         each period.
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis role="bold">max</emphasis>. The maximum number of sample
         volumes in each period.
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis role="bold">min</emphasis>. The minimum number of sample
         volumes in each period.
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis role="bold">avg</emphasis>. The average of sample volumes
         over each period.
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis role="bold">sum</emphasis>. The sum of sample volumes
         over each period.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
            Alarm
          </term>
     <listitem>
      <para>
       A set of rules that define a monitor and a current state, with
       edge-triggered actions associated with target states. Alarms provide
       user-oriented Monitoring-as-a-Service and a general purpose utility
       for OpenStack. Orchestration auto scaling is a typical use case.
       Alarms follow a tristate model of <literal>ok</literal>,
       <literal>alarm</literal>, and <literal>insufficient data</literal>.
       For conventional threshold-oriented alarms, a static threshold value
       and comparison operator govern state transitions. The comparison
       operator compares a selected meter statistic against an evaluation
       window of configurable length into the recent past.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    This example uses the <command>heat</command> client to create an
    auto-scaling stack and the <command>ceilometer</command> client to
    measure resources.
   </para>

   <procedure>
    <step>
     <para>
      Create an auto-scaling stack by running the following command. The
      <literal>-f</literal> option specifies the name of the stack template
      file, and the <literal>-P</literal> option specifies the
      <literal>KeyName</literal> parameter as <literal>heat_key</literal>.
     </para>
<screen><prompt role="user">$</prompt> heat stack-create -f cfn/F17/AutoScalingCeilometer.yaml -P "KeyName=heat_key"</screen>
    </step>
    <step>
     <para>
      List the heat resources that were created:
     </para>
<screen><prompt role="user">$</prompt> heat resource-list
+--------------------------+-----------------------------------------+-----------------+----------------------+
| resource_name            | resource_type                           |resource_status | updated_time         |
+--------------------------+-----------------------------------------+-----------------+----------------------+
| CfnUser                  | AWS::IAM::User                          |CREATE_COMPLETE | 2013-10-02T05:53:41Z |
| WebServerKeys            | AWS::IAM::AccessKey                     |CREATE_COMPLETE | 2013-10-02T05:53:42Z |
| LaunchConfig             | AWS::AutoScaling::LaunchConfiguration   |CREATE_COMPLETE | 2013-10-02T05:53:43Z |
| ElasticLoadBalancer      | AWS::ElasticLoadBalancing::LoadBalancer |UPDATE_COMPLETE | 2013-10-02T05:55:58Z |
| WebServerGroup           | AWS::AutoScaling::AutoScalingGroup      |CREATE_COMPLETE | 2013-10-02T05:55:58Z |
| WebServerScaleDownPolicy | AWS::AutoScaling::ScalingPolicy         |CREATE_COMPLETE | 2013-10-02T05:56:00Z |
| WebServerScaleUpPolicy   | AWS::AutoScaling::ScalingPolicy         |CREATE_COMPLETE | 2013-10-02T05:56:00Z |
| CPUAlarmHigh             | OS::Ceilometer::Alarm                   |CREATE_COMPLETE | 2013-10-02T05:56:02Z |
| CPUAlarmLow              | OS::Ceilometer::Alarm                   |CREATE_COMPLETE | 2013-10-02T05:56:02Z |
+--------------------------+-----------------------------------------+-----------------+----------------------+</screen>
    </step>
    <step>
     <para>
      List the alarms that are set:
     </para>
<screen><prompt role="user">$</prompt> ceilometer alarm-list
+--------------------------------------+------------------------------+-------------------+---------+------------+-------------------------------+
| Alarm ID                             | Name                         | State             | Enabled | Continuous | Alarm condition               |
+--------------------------------------+------------------------------+-------------------+---------+------------+-------------------------------+
| 4f896b40-0859-460b-9c6a-b0d329814496 | as-CPUAlarmLow-i6qqgkf2fubs  | insufficient data | True    | False      | cpu_util &lt; 15.0 during 1x 60s |
| 75d8ecf7-afc5-4bdc-95ff-19ed9ba22920 | as-CPUAlarmHigh-sf4muyfruy5m | insufficient data | True    | False      | cpu_util &gt; 50.0 during 1x 60s |
+--------------------------------------+------------------------------+-------------------+---------+------------+-----------------------------+</screen>
    </step>
    <step>
     <para>
      List the meters that are set:
     </para>
<screen><prompt role="user">$</prompt> ceilometer meter-list
+--------------------------+------------+----------+-----------------------------------------------------------------------+------------------------------------+
| Name                     | Type       | Unit     | Resource ID                          | User ID                          | Project ID                       |
+--------------------------+------------+----------+-----------------------------------------------------------------------+------------------------------------+
| cpu                      | cumulative | ns       | 3965b41b-81b0-4386-bea5-6ec37c8841c1 | d1a2996d3b1f4e0e8645ba9650308011 | bf03bf32e3884d489004ac995ff7a61c |
| cpu                      | cumulative | ns       | 62520a83-73c7-4084-be54-275fe770ef2c | d1a2996d3b1f4e0e8645ba9650308011 | bf03bf32e3884d489004ac995ff7a61c |
| cpu_util                 | gauge      | %        | 3965b41b-81b0-4386-bea5-6ec37c8841c1 | d1a2996d3b1f4e0e8645ba9650308011 | bf03bf32e3884d489004ac995ff7a61c |
+--------------------------+------------+----------+-----------------------------------------------------------------------+------------------------------------+</screen>
    </step>
    <step>
     <para>
      List samples:
     </para>
<screen><prompt role="user">$</prompt> ceilometer sample-list -m cpu_util
+--------------------------------------+----------+-------+---------------+------+---------------------+
| Resource ID                          | Name     | Type  | Volume        | Unit | Timestamp           |
+--------------------------------------+----------+-------+---------------+------+---------------------+
| 3965b41b-81b0-4386-bea5-6ec37c8841c1 | cpu_util | gauge | 3.98333333333 | %    | 2013-10-02T10:50:12 |
+--------------------------------------+----------+-------+---------------+------+---------------------+</screen>
    </step>
    <step>
     <para>
      View statistics:
     </para>
<screen><prompt role="user">$</prompt> ceilometer statistics -m cpu_util
+--------+---------------------+---------------------+-------+---------------+---------------+---------------+---------------+----------+---------------------+---------------------+
| Period | Period Start        | Period End          | Count | Min           | Max           | Sum           | Avg           | Duration | Duration Start      | Duration End        |
+--------+---------------------+---------------------+-------+---------------+---------------+---------------+---------------+----------+---------------------+---------------------+
| 0      | 2013-10-02T10:50:12 | 2013-10-02T10:50:12 | 1     | 3.98333333333 | 3.98333333333 | 3.98333333333 | 3.98333333333 | 0.0      | 2013-10-02T10:50:12 | 2013-10-02T10:50:12 |
+--------+---------------------+---------------------+-------+---------------+---------------+---------------+---------------+----------+---------------------+---------------------+</screen>
    </step>
   </procedure>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="cli_manage_volumes" xml:base="../common/section_cli_cinder_manage_volumes.xml">
<?dbhtml stop-chunking?>

   <title>Manage volumes</title>

   <para>
    A volume is a detachable block storage device, similar to a USB hard
    drive. You can attach a volume to only one instance. To create and
    manage volumes, you use a combination of <command>nova</command> and
    <command>cinder</command> client commands.
   </para>

   <sect2 xml:id="cli_migrate_volumes" condition="adminuser">
    <title>Migrate a volume</title>
    <para>
     As an administrator, you can migrate a volume with its data from one
     location to another in a manner that is transparent to users and
     workloads. You can migrate only detached volumes with no snapshots.
    </para>
    <para>
     Possible use cases for data migration include:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Bring down a physical storage device for maintenance without
       disrupting workloads.
      </para>
     </listitem>
     <listitem>
      <para>
       Modify the properties of a volume.
      </para>
     </listitem>
     <listitem>
      <para>
       Free up space in a thinly-provisioned back end.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Migrate a volume with the <command>cinder migrate</command> command, as
     shown in the following example:
    </para>
<screen><prompt role="user">$</prompt> cinder migrate <replaceable>volumeID</replaceable><replaceable>destinationHost</replaceable> --force-host-copy <replaceable>True|False</replaceable></screen>
    <para>
     In this example, <literal>--force-host-copy True</literal> forces the
     generic host-based migration mechanism and bypasses any driver
     optimizations.
    </para>
    <note>
     <para>
      If the volume is in use or has snapshots, the specified host
      destination cannot accept the volume. If the user is not an
      administrator, the migration fails.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="cli_list_volumes" condition="enduser">
    <title>Create a volume</title>
    <para>
     This example creates a my-new-volume volume based on an image.
    </para>
    <procedure>
     <step>
      <para>
       List images, and note the ID of the image that you want to use for
       your volume:
      </para>
<screen><prompt role="user">$</prompt> nova image-list</screen>
<screen><?db-font-size 65%?>+--------------------------------------+---------------------------------+--------+--------------------------------------+
| ID                                   | Name                            | Status | Server                               |
+--------------------------------------+---------------------------------+--------+--------------------------------------+
| 397e713c-b95b-4186-ad46-6126863ea0a9 | cirros-0.3.2-x86_64-uec         | ACTIVE |                                      |
| df430cc2-3406-4061-b635-a51c16e488ac | cirros-0.3.2-x86_64-uec-kernel  | ACTIVE |                                      |
| 3cf852bd-2332-48f4-9ae4-7d926d50945e | cirros-0.3.2-x86_64-uec-ramdisk | ACTIVE |                                      |
| 7e5142af-1253-4634-bcc6-89482c5f2e8a | myCirrosImage                   | ACTIVE | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 |
| 89bcd424-9d15-4723-95ec-61540e8a1979 | mysnapshot                      | ACTIVE | f51ebd07-c33d-4951-8722-1df6aa8afaa4 |
+--------------------------------------+---------------------------------+--------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       List the availability zones, and note the ID of the availability zone
       in which you want to create your volume:
      </para>
<screen><prompt role="user">$</prompt> cinder availability-zone-list</screen>
<screen><?db-font-size 65%?>+------+-----------+
| Name |   Status  |
+------+-----------+
| nova | available |
+------+-----------+</screen>
     </step>
     <step>
      <para>
       Create a volume with 8Â GB of space, and specify the availability
       zone and image:
      </para>
<screen><prompt role="user">$</prompt> cinder create 8 --display-name my-new-volume --image-id 397e713c-b95b-4186-ad46-6126863ea0a9 --availability-zone nova</screen>
<screen><?db-font-size 65%?>+---------------------+--------------------------------------+
|       Property      |                Value                 |
+---------------------+--------------------------------------+
|     attachments     |                  []                  |
|  availability_zone  |                 nova                 |
|       bootable      |                false                 |
|      created_at     |      2013-07-25T17:02:12.472269      |
| display_description |                 None                 |
|     display_name    |            my-new-volume             |
|          id         | 573e024d-5235-49ce-8332-be1576d323f8 |
|       image_id      | 397e713c-b95b-4186-ad46-6126863ea0a9 |
|       metadata      |                  {}                  |
|         size        |                  8                   |
|     snapshot_id     |                 None                 |
|     source_volid    |                 None                 |
|        status       |               creating               |
|     volume_type     |                 None                 |
+---------------------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       To verify that your volume was created successfully, list the
       available volumes:
      </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen><?db-font-size 65%?>+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |   Display Name  | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
| 573e024d-5235-49ce-8332-be1576d323f8 | available |  my-new-volume  |  8   |     None    |   true   |             |
| bd7cf584-45de-44e3-bf7f-f7b50bf235e3 | available | my-bootable-vol |  8   |     None    |   true   |             |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+</screen>
      <para>
       If your volume was created successfully, its status is
       <literal>available</literal>. If its status is
       <literal>error</literal>, you might have exceeded your quota.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_attach_volume" condition="enduser">
    <title>Attach a volume to an instance</title>
    <procedure>
     <step>
      <para>
       Attach your volume to a server, specifying the server ID and the
       volume ID:
      </para>
<screen><prompt role="user">$</prompt> nova volume-attach 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 573e024d-5235-49ce-8332-be1576d323f8 /dev/vdb</screen>
<screen><?db-font-size 65%?>+----------+--------------------------------------+
| Property | Value                                |
+----------+--------------------------------------+
| device   | /dev/vdb                             |
| serverId | 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 |
| id       | 573e024d-5235-49ce-8332-be1576d323f8 |
| volumeId | 573e024d-5235-49ce-8332-be1576d323f8 |
+----------+--------------------------------------+</screen>
      <para>
       Note the ID of your volume.
      </para>
     </step>
     <step>
      <para>
       Show information for your volume:
      </para>
<screen><prompt role="user">$</prompt> cinder show 573e024d-5235-49ce-8332-be1576d323f8</screen>
      <para>
       The output shows that the volume is attached to the server with ID
       <literal>84c6e57d-a6b1-44b6-81eb-fcb36afd31b5</literal>, is in the
       nova availability zone, and is bootable.
      </para>
<screen><?db-font-size 65%?>+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|           Property           |                                                                                                      Value                                                                                                       |
+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|         attachments          |             [{u'device': u'/dev/vdb', u'server_id': u'84c6e57d-a6b1-44b6-81eb-fcb36afd31b5', u'id': u'573e024d-5235-49ce-8332-be1576d323f8', u'volume_id': u'573e024d-5235-49ce-8332-be1576d323f8'}]             |
|      availability_zone       |                                                                                                       nova                                                                                                       |
|           bootable           |                                                                                                       true                                                                                                       |
|          created_at          |                                                                                            2013-07-25T17:02:12.000000                                                                                            |
|     display_description      |                                                                                                       None                                                                                                       |
|         display_name         |                                                                                                  my-new-volume                                                                                                   |
|              id              |                                                                                       573e024d-5235-49ce-8332-be1576d323f8                                                                                       |
|           metadata           |                                                                                                        {}                                                                                                        |
|    os-vol-host-attr:host     |                                                                                                 devstack                                                                                                         |
| os-vol-tenant-attr:tenant_id |                                                                                         66265572db174a7aa66eba661f58eb9e                                                                                         |
|             size             |                                                                                                        8                                                                                                         |
|         snapshot_id          |                                                                                                       None                                                                                                       |
|         source_volid         |                                                                                                       None                                                                                                       |
|            status            |                                                                                                      in-use                                                                                                      |
|    volume_image_metadata     | {u'kernel_id': u'df430cc2-3406-4061-b635-a51c16e488ac', u'image_id': u'397e713c-b95b-4186-ad46-6126863ea0a9', u'ramdisk_id': u'3cf852bd-2332-48f4-9ae4-7d926d50945e', u'image_name': u'cirros-0.3.2-x86_64-uec'} |
|         volume_type          |                                                                                                       None                                                                                                       |
+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_extend_volumes" condition="enduser">
    <title>Resize a volume</title>
    <procedure>
     <step>
      <para>
       To resize your volume, you must first detach it from the server.
      </para>
      <para>
       To detach the volume from your server, pass the server ID and volume
       ID to the following command:
      </para>
<screen><prompt role="user">$</prompt> nova volume-detach 84c6e57d-a6b1-44b6-81eb-fcb36afd31b5 573e024d-5235-49ce-8332-be1576d323f8</screen>
      <para>
       The <command>volume-detach</command> command does not return any
       output.
      </para>
     </step>
     <step>
      <para>
       List volumes:
      </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen><?db-font-size 65%?>+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |   Display Name  | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
| 573e024d-5235-49ce-8332-be1576d323f8 | available |  my-new-volume  |  8   |     None    |   true   |             |
| bd7cf584-45de-44e3-bf7f-f7b50bf235e3 | available | my-bootable-vol |  8   |     None    |   true   |             |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+</screen>
      <para>
       Note that the volume is now available.
      </para>
     </step>
     <step>
      <para>
       Resize the volume by passing the volume ID and the new size (a value
       greater than the old one) as parameters:
      </para>
<screen><prompt role="user">$</prompt> cinder extend 573e024d-5235-49ce-8332-be1576d323f8 10</screen>
      <para>
       The <command>extend</command> command does not return any output.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_delete_volumes" condition="enduser">
    <title>Delete a volume</title>
    <procedure>
     <step>
      <para>
       To delete your volume, you must first detach it from the server.
      </para>
      <para>
       To detach the volume from your server and check for the list of
       existing volumes, see steps 1 and 2 in
       <xref linkend="cli_extend_volumes"/>.
      </para>
     </step>
     <step>
      <para>
       Delete the volume using either the volume name or ID:
      </para>
<screen><prompt role="user">$</prompt> cinder delete my-new-volume</screen>
      <para>
       The delete command does not return any output.
      </para>
     </step>
     <step>
      <para>
       List the volumes again, and note that the status of your volume is
       <literal>deleting</literal>:
      </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen><?db-font-size 65%?>+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |   Display Name  | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
| 573e024d-5235-49ce-8332-be1576d323f8 |  deleting |  my-new-volume  |  8   |     None    |   true   |             |
| bd7cf584-45de-44e3-bf7f-f7b50bf235e3 | available | my-bootable-vol |  8   |     None    |   true   |             |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+</screen>
      <para>
       When the volume is fully deleted, it disappears from the list of
       volumes:
      </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen><?db-font-size 65%?>+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |   Display Name  | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+
| bd7cf584-45de-44e3-bf7f-f7b50bf235e3 | available | my-bootable-vol |  8   |     None    |   true   |             |
+--------------------------------------+-----------+-----------------+------+-------------+----------+-------------+</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="cli_transfer_volumes" condition="enduser">
    <title>Transfer a volume</title>
    <para>
     You can transfer a volume from one owner to another by using the
     <command>cinder transfer*</command> commands. The volume donor, or
     original owner, creates a transfer request and sends the created
     transfer ID and authorization key to the volume recipient. The volume
     recipient, or new owner, accepts the transfer by using the ID and key.
    </para>
    <note>
     <para>
      The procedure for volume transfer is intended for tenants (both the
      volume donor and recipient) within the same cloud.
     </para>
    </note>
    <para>
     Use cases include:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Create a custom bootable volume or a volume with a large data set and
       transfer it to a customer.
      </para>
     </listitem>
     <listitem>
      <para>
       For bulk import of data to the cloud, the data ingress system creates
       a new Block Storage volume, copies data from the physical device, and
       transfers device ownership to the end user.
      </para>
     </listitem>
    </itemizedlist>
    <sect3 xml:id="create_volume_transfer">
     <title>Create a volume transfer request</title>
     <procedure>
      <step>
       <para>
        While logged in as the volume donor, list the available volumes:
       </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen>+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
|                  ID                  |   Status  | Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
| 72bfce9f-cacf-477a-a092-bf57a7712165 |   error   |     None     |  1   |     None    |  false   |             |
| a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f | available |     None     |  1   |     None    |  false   |             |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+</screen>
      </step>
      <step>
       <para>
        As the volume donor, request a volume transfer authorization code
        for a specific volume:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-create <replaceable>volumeID</replaceable></screen>
       <para>
        The volume must be in an <literal>available</literal> state or the
        request will be denied. If the transfer request is valid in the
        database (that is, it has not expired or been deleted), the volume
        is placed in an <literal>awaiting transfer</literal> state. For
        example:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-create a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f</screen>
       <para>
        The output shows the volume transfer ID in the <literal>id</literal>
        row and the authorization key.
       </para>
<screen>+------------+--------------------------------------+
|  Property  |                Value                 |
+------------+--------------------------------------+
|  auth_key  |           b2c8e585cbc68a80           |
| created_at |      2013-10-14T15:20:10.121458      |
|     id     | 6e4e9aa4-bed5-4f94-8f76-df43232f44dc |
|    name    |                 None                 |
| volume_id  | a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f |
+------------+--------------------------------------+</screen>
       <note>
        <para>
         Optionally, you can specify a name for the transfer by using the
         <literal>--display-name
         <replaceable>displayName</replaceable></literal> parameter.
        </para>
       </note>
       <note>
        <para>
         While the <option>auth_key</option> property is visible in the
         output of <command>cinder transfer-create</command>
         <replaceable>VOLUME_ID</replaceable>, it will not be available in
         subsequent <command>cinder transfer-show</command>
         <replaceable>TRANSFER_ID</replaceable> commands.
        </para>
       </note>
      </step>
      <step>
       <para>
        Send the volume transfer ID and authorization key to the new owner
        (for example, by email).
       </para>
      </step>
      <step>
       <para>
        View pending transfers:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-list</screen>
<screen>+--------------------------------------+--------------------------------------+------+
|               ID                     |             VolumeID                 | Name |
+--------------------------------------+--------------------------------------+------+
| 6e4e9aa4-bed5-4f94-8f76-df43232f44dc | a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f | None |
+--------------------------------------+--------------------------------------+------+</screen>
      </step>
      <step>
       <para>
        After the volume recipient, or new owner, accepts the transfer, you
        can see that the transfer is no longer available:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-list</screen>
<screen>+----+-----------+------+
| ID | Volume ID | Name |
+----+-----------+------+
+----+-----------+------+</screen>
      </step>
     </procedure>
    </sect3>
    <sect3 xml:id="accept_volume_transfer">
     <title>Accept a volume transfer request</title>
     <procedure>
      <step>
       <para>
        As the volume recipient, you must first obtain the transfer ID and
        authorization key from the original owner.
       </para>
      </step>
      <step>
       <para>
        Display the transfer request details by using the ID:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-show <replaceable>transferID</replaceable></screen>
       <para>
        For example:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-show 6e4e9aa4-bed5-4f94-8f76-df43232f44dc</screen>
<screen>+------------+--------------------------------------+
|  Property  |                Value                 |
+------------+--------------------------------------+
| created_at |      2013-10-14T15:20:10.000000      |
|     id     | 6e4e9aa4-bed5-4f94-8f76-df43232f44dc |
|    name    |                 None                 |
| volume_id  | a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f |
+------------+--------------------------------------+</screen>
      </step>
      <step>
       <para>
        Accept the request:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-accept <replaceable>transferID</replaceable><replaceable>authKey</replaceable></screen>
       <para>
        For example:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-accept 6e4e9aa4-bed5-4f94-8f76-df43232f44dc b2c8e585cbc68a80</screen>
<screen>+-----------+--------------------------------------+
|  Property |                Value                 |
+-----------+--------------------------------------+
|     id    | 6e4e9aa4-bed5-4f94-8f76-df43232f44dc |
|    name   |                 None                 |
| volume_id | a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f |
+-----------+--------------------------------------+</screen>
       <note>
        <para>
         If you do not have a sufficient quota for the transfer, the
         transfer is refused.
        </para>
       </note>
      </step>
     </procedure>
    </sect3>
    <sect3 xml:id="delete_transfer">
     <title>Delete a volume transfer</title>
     <procedure>
      <step>
       <para>
        List available volumes and their statuses:
       </para>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen>+--------------------------------------+-------------------+--------------+------+-------------+----------+-------------+
|                  ID                  |       Status      | Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-------------------+--------------+------+-------------+----------+-------------+
| 72bfce9f-cacf-477a-a092-bf57a7712165 |       error       |     None     |  1   |     None    |  false   |             |
| a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f | awaiting-transfer |     None     |  1   |     None    |  false   |             |
+--------------------------------------+-------------------+--------------+------+-------------+----------+-------------+</screen>
      </step>
      <step>
       <para>
        Find the matching transfer ID:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-list</screen>
<screen>+--------------------------------------+--------------------------------------+------+
|               ID                     |             VolumeID                 | Name |
+--------------------------------------+--------------------------------------+------+
| a6da6888-7cdf-4291-9c08-8c1f22426b8a | a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f | None |
+--------------------------------------+--------------------------------------+------+</screen>
      </step>
      <step>
       <para>
        Delete the volume:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-delete <replaceable>transferID</replaceable></screen>
       <para>
        For example:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-delete a6da6888-7cdf-4291-9c08-8c1f22426b8a</screen>
      </step>
      <step>
       <para>
        Verify that transfer list is now empty and that the volume is again
        available for transfer:
       </para>
<screen><prompt role="user">$</prompt> cinder transfer-list</screen>
<screen>+----+-----------+------+
| ID | Volume ID | Name |
+----+-----------+------+
+----+-----------+------+</screen>
<screen><prompt role="user">$</prompt> cinder list</screen>
<screen>+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
|                  ID                  |   Status  | Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
| 72bfce9f-cacf-477a-a092-bf57a7712165 |   error   |     None     |  1   |     None    |  false   |             |
| a1cdace0-08e4-4dc7-b9dc-457e9bcfe25f | available |     None     |  1   |     None    |  false   |             |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+</screen>
      </step>
     </procedure>
    </sect3>
   </sect2>

   <sect2 xml:id="cli_read-only-volumes">
    <title>Set a volume to read-only access</title>
    <para>
     To give multiple users shared, secure access to the same data, you can
     set a volume to read-only access.
    </para>
    <para>
     Run the following command to set a volume to read-only access:
    </para>
<screen><prompt role="user">$</prompt> cinder readonly-mode-update <replaceable>VOLUME</replaceable><replaceable>BOOLEAN</replaceable></screen>
    <para>
     <replaceable>VOLUME</replaceable> is the ID of the target volume and
     <replaceable>BOOLEAN</replaceable> is a flag that enables read-only or
     read/write access to the volume.
    </para>
    <para>
     The following values for <replaceable>BOOLEAN</replaceable> are valid:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <literal>true</literal>. Sets the read-only flag in the volume. When
       you attach the volume to an instance, the instance checks for this
       flag to determine whether to restrict volume access to read-only.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>false</literal>. Sets the volume to read/write access.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
  </sect1>
<?hard-pagebreak?>
  <sect1 xml:id="trove-manage-db">
   <title>Create and manage databases</title>

   <para>
    The Database service provides scalable and reliable cloud provisioning
    functionality for both relational and non-relational database engines.
    Users can quickly and easily use database features without the burden of
    handling complex administrative tasks.
   </para>

   <sect2 xml:id="create_db">
    <title>Create and access a database</title>
    <para>
     Assume that you have installed the Database service and populated your
     data store with images for the type and versions of databases that you
     want, and that you can create and access a database.
    </para>
    <para>
     This example shows you how to create and access a MySQL 5.5 database.
    </para>
    <procedure>
     <title>To create and access a database</title>
     <step>
      <para>
       <emphasis role="bold">Determine which flavor to use for your
       database</emphasis>
      </para>
      <para>
       When you create a database instance, you must specify a nova flavor.
       The flavor indicates various characteristics of the instance, such as
       RAM, root volume size, and so on. The default nova flavors are not
       sufficient to create database instances. You might need to create or
       obtain some new nova flavors that work for databases.
      </para>
      <para>
       The first step is to list flavors by using the nova
       <command>flavor-list</command> command.
      </para>
      <para>
       Here are the default flavors, although you may have additional custom
       flavors in your environment:
      </para>
<screen><prompt role="user">$</prompt> nova flavor-list
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID  | Name      | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1   | m1.tiny   | 512       | 1    | 0         |      | 1     | 1.0         | True      |
| 2   | m1.small  | 2048      | 20   | 0         |      | 1     | 1.0         | True      |
| 3   | m1.medium | 4096      | 40   | 0         |      | 2     | 1.0         | True      |
| 4   | m1.large  | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
| 5   | m1.xlarge | 16384     | 160  | 0         |      | 8     | 1.0         | True      |
+-----+-----------+-----------+------+-----------+------+-------+-------------+-----------+</screen>
      <para>
       Now take a look at the minimum requirements for various database
       instances:
      </para>
      <informaltable width="60%">
       <tgroup cols="4">
        <colspec colwidth="25%"/>
        <colspec colwidth="25%"/>
        <colspec colwidth="25%"/>
        <colspec colwidth="25%"/>
        <thead>
         <row>
          <entry>
           <para>
            Database
           </para>
          </entry>
          <entry>
           <para>
            RAM (MB)
           </para>
          </entry>
          <entry>
           <para>
            Disk (GB)
           </para>
          </entry>
          <entry>
           <para>
            VCPUs
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            MySQL
           </para>
          </entry>
          <entry>
           <para>
            512
           </para>
          </entry>
          <entry>
           <para>
            5
           </para>
          </entry>
          <entry>
           <para>
            1
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            Cassandra
           </para>
          </entry>
          <entry>
           <para>
            2048
           </para>
          </entry>
          <entry>
           <para>
            5
           </para>
          </entry>
          <entry>
           <para>
            1
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            MongoDB
           </para>
          </entry>
          <entry>
           <para>
            1024
           </para>
          </entry>
          <entry>
           <para>
            5
           </para>
          </entry>
          <entry>
           <para>
            1
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            Redis
           </para>
          </entry>
          <entry>
           <para>
            512
           </para>
          </entry>
          <entry>
           <para>
            5
           </para>
          </entry>
          <entry>
           <para>
            1
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         If you have a custom flavor that meets the needs of the database
         that you want to create, proceed to
         <xref linkend="create-database-instance"/> and use that flavor.
        </para>
       </listitem>
       <listitem>
        <para>
         If your environment does not have a suitable flavor, an
         administrative user must create a custom flavor by using the nova
         <command>flavor-create</command> command.
        </para>
       </listitem>
      </itemizedlist>
      <formalpara>
       <title>MySQL example</title>
       <para>
        This example creates a flavor that you can use with a MySQL
        database. This example has the following attributes:
       </para>
      </formalpara>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Flavor name: <literal>mysql_minimum</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Flavor ID: You must use an ID that is not already in use. In this
         example, IDs 1 through 5 are in use, so use ID
         <literal>6</literal>.
        </para>
       </listitem>
       <listitem>
        <para>
         RAM: <literal>512</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Root volume size in GB: <literal>5</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Virtual CPUs: <literal>1</literal>
        </para>
       </listitem>
      </itemizedlist>
<screen><prompt role="user">$</prompt> nova flavor-create mysql-minimum 6 512 5 1
+----+---------------+-----------+------+-----------+------+-------+-------------+-----------+
| ID | Name          | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+----+---------------+-----------+------+-----------+------+-------+-------------+-----------+
| 6  | mysql-minimum | 512       | 5    | 0         |      | 1     | 1.0         | True      |
+----+---------------+-----------+------+-----------+------+-------+-------------+-----------+</screen>
     </step>
     <step xml:id="create-database-instance">
      <para>
       <emphasis role="bold">Create a database instance</emphasis>
      </para>
      <para>
       This example creates a database instance with the following
       characteristics:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Name of the instance: <literal>mysql_instance_1</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Database flavor: <literal>6</literal>
        </para>
       </listitem>
      </itemizedlist>
      <para>
       In addition, this command specifies these options for the instance:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         A volume size of <literal>5</literal> (5 GB).
        </para>
       </listitem>
       <listitem>
        <para>
         The <literal>myDB</literal> database.
        </para>
       </listitem>
       <listitem>
        <para>
         The database is based on the <literal>mysql</literal> data store
         and the <literal>mysql-5.5</literal> datastore_version.
        </para>
       </listitem>
       <listitem>
        <para>
         The <literal>userA</literal> user with the
         <literal>password</literal> password.
        </para>
       </listitem>
      </itemizedlist>
<screen><prompt role="user">$</prompt> trove create mysql_instance_1 6 --size 5 --databases myDB \
    --users userA:password --datastore_version mysql-5.5 \
    --datastore mysql
+-------------------+---------------------------------------------------------------------------------------t------------------------------------------------------------------------------------------------------------------+
|      Property     |                                                                                                  Value                                                                                                  |
+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|      created      |                                                                                           2014-05-29T21:26:21                                                                                           |
|     datastore     |                                                                              {u'version': u'mysql-5.5', u'type': u'mysql'}                                                                              |
| datastore_version |                                                                                                mysql-5.5                                                                                                |
|       flavor      | {u'id': u'6', u'links': [{u'href': u'https://controller:8779/v1.0/46d0bc4fc32e4b9e8520f8fc62199f58/flavors/6', u'rel': u'self'}, {u'href': u'https://controller:8779/flavors/6', u'rel': u'bookmark'}]} |
|         id        |                                                                                   5599dad6-731e-44df-bb60-488da3da9cfe                                                                                  |
|        name       |                                                                                             mysql_instance_1                                                                                            |
|       status      |                                                                                                  BUILD                                                                                                  |
|      updated      |                                                                                           2014-05-29T21:26:21                                                                                           |
|       volume      |                                                                                               {u'size': 5}                                                                                              |
+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Get the IP address of the database
       instance</emphasis>
      </para>
      <para>
       First, use the trove <command>list</command> command to list all
       instances and their IDs:
      </para>
<screen><prompt role="user">$</prompt> trove list
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+
|                  id                  |       name       | datastore | datastore_version | status | flavor_id | size |
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+
| 5599dad6-731e-44df-bb60-488da3da9cfe | mysql_instance_1 |   mysql   |     mysql-5.5     | BUILD  |     6     |  5   |
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+</screen>
      <para>
       This command returns the instance ID of your new instance.
      </para>
      <para>
       You can now pass in the instance ID with the trove
       <command>show</command> command to get the IP address of the
       instance. In this example, replace
       <replaceable>INSTANCE_ID</replaceable> with
       <literal>5599dad6-731e-44df-bb60-488da3da9cfe</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove show <replaceable>INSTANCE_ID</replaceable>
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|      created      |         2014-05-29T21:26:21          |
|     datastore     |                mysql                 |
| datastore_version |              mysql-5.5               |
|       flavor      |                  6                   |
|         id        | 5599dad6-731e-44df-bb60-488da3da9cfe |
|         ip        |             172.16.200.2             |
|        name       |           mysql_instance_1           |
|       status      |                BUILD                 |
|      updated      |         2014-05-29T21:26:54          |
|       volume      |                  5                   |
+-------------------+--------------------------------------+</screen>
      <para>
       This command returns the IP address of the database instance.
      </para>
     </step>
     <step>
      <para>
       <emphasis role="bold">Access the new database</emphasis>
      </para>
      <para>
       You can now access the new database you just created (myDB) by using
       typical database access commands. In this MySQL example, replace
       <replaceable>IP_ADDRESS</replaceable> with
       <literal>172.16.200.2</literal>.
      </para>
<screen><prompt role="user">$</prompt> mysql -u userA -ppassword -h <replaceable>IP_ADDRESS</replaceable> myDB</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="backup_db">
    <title>Backup and restore a database</title>
    <para>
     You can use Database services to backup a database and store the backup
     artifact in the Object Storage module. Later on, if the original
     database is damaged, you can use the backup artifact to restore the
     database. The restore process creates a database instance.
    </para>
    <para>
     This example shows you how to back up and restore a MySQL database.
    </para>
    <procedure>
     <title>To backup and restore a database</title>
     <step>
      <para>
       <emphasis role="bold">Backup the database instance</emphasis>
      </para>
      <para>
       As background, assume that you have <link linkend="create_db">created
       a database instance</link> with the following characteristics:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         Name of the database instance: <literal>guest1</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Flavor ID: <literal>10</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Root volume size: <literal>2</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Databases: <literal>db1</literal> and <literal>db2</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         Users: The <literal>user1</literal> user with the
         <literal>password</literal> password
        </para>
       </listitem>
      </itemizedlist>
      <para>
       First, get the ID of the <literal>guest1</literal> database instance
       by using the trove <command>list</command> command:
      </para>
<screen><prompt role="user">$</prompt> trove list
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+
|                  id                  |  name  | datastore | datastore_version | status | flavor_id | size |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+
| 97b4b853-80f6-414f-ba6f-c6f455a79ae6 | guest1 |   mysql   |     mysql-5.5     | ACTIVE |     10    |  2   |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+</screen>
      <para>
       Back up the database instance by using the trove
       <command>backup-create</command> command. In this example, the backup
       is called <literal>backup1</literal>. In this example, replace
       <replaceable>INSTANCE_ID</replaceable> with
       <literal>97b4b853-80f6-414f-ba6f-c6f455a79ae6</literal>:
      </para>
      <note>
       <para>
        This command syntax pertains only to python-troveclient version
        1.0.6 and later. Earlier versions require you to pass in the backup
        name as the first argument.
       </para>
      </note>
<screen><prompt role="user">$</prompt> trove backup-create <replaceable>INSTANCE_ID</replaceable> backup1
+-------------+--------------------------------------+
|   Property  |                Value                 |
+-------------+--------------------------------------+
|   created   |         2014-03-18T17:09:07          |
| description |                 None                 |
|      id     | 8af30763-61fd-4aab-8fe8-57d528911138 |
| instance_id | 97b4b853-80f6-414f-ba6f-c6f455a79ae6 |
| locationRef |                 None                 |
|     name    |               backup1                |
|  parent_id  |                 None                 |
|     size    |                 None                 |
|    status   |                 NEW                  |
|   updated   |         2014-03-18T17:09:07          |
+-------------+--------------------------------------+</screen>
      <para>
       Note that the command returns both the ID of the original instance
       (<literal>instance_id</literal>) and the ID of the backup artifact
       (<literal>id</literal>).
      </para>
      <para>
       Later on, use the trove <command>backup-list</command> command to get
       this information:
      </para>
<screen><prompt role="user">$</prompt> trove backup-list
+--------------------------------------+--------------------------------------+---------+-----------+-----------+---------------------+
|                  id                  |             instance_id              |   name  |   status  | parent_id |       updated       |
+--------------------------------------+--------------------------------------+---------+-----------+-----------+---------------------+
| 8af30763-61fd-4aab-8fe8-57d528911138 | 97b4b853-80f6-414f-ba6f-c6f455a79ae6 | backup1 | COMPLETED |    None   | 2014-03-18T17:09:11 |
+--------------------------------------+--------------------------------------+---------+-----------+-----------+---------------------+</screen>
      <para>
       You can get additional information about the backup by using the
       trove <command>backup-show</command> command and passing in the
       <replaceable>BACKUP_ID</replaceable>, which is
       <literal>8af30763-61fd-4aab-8fe8-57d528911138</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove backup-show <replaceable>BACKUP_ID</replaceable>
+-------------+-------------------------------------------------------------------------------------------------------------------------------------+
|   Property  |                                                                Value                                                                |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------+
|   created   |                                                         2014-03-18T17:09:07                                                         |
| description |                                                                 None                                                                |
|      id     |                                                 8af30763-61fd-4aab-8fe8-57d528911138                                                |
| instance_id |                                                 97b4b853-80f6-414f-ba6f-c6f455a79ae6                                                |
| locationRef | http://10.0.0.1:8080/v1/AUTH_626734041baa4254ae316de52a20b390/database_backups/8af30763-61fd-4aab-8fe8-57d528911138.xbstream.gz.enc |
|     name    |                                                               backup1                                                               |
|  parent_id  |                                                                 None                                                                |
|     size    |                                                                 0.17                                                                |
|    status   |                                                              COMPLETED                                                              |
|   updated   |                                                         2014-03-18T17:09:11                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Restore a database instance</emphasis>
      </para>
      <para>
       Now assume that your <literal>guest1</literal> database instance is
       damaged and you need to restore it. In this example, you use the
       trove <command>create</command> command to create a new database
       instance called <literal>guest2</literal>.
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         You specify that the new <literal>guest2</literal> instance has the
         same flavor (<literal>10</literal>) and the same root volume size
         (<literal>2</literal>) as the original <literal>guest1</literal>
         instance.
        </para>
       </listitem>
       <listitem>
        <para>
         You use the <literal>--backup</literal> argument to indicate that
         this new instance is based on the backup artifact identified by
         <replaceable>BACKUP_ID</replaceable>. In this example, replace
         <replaceable>BACKUP_ID</replaceable> with
         <literal>8af30763-61fd-4aab-8fe8-57d528911138</literal>.
        </para>
       </listitem>
      </itemizedlist>
<screen><prompt role="user">$</prompt> trove create guest2 10 --size 2 --backup <replaceable>BACKUP_ID</replaceable>
+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|      Property     |                                                                                                     Value                                                                                                      |
+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|      created      |                                                                                              2014-03-18T17:12:03                                                                                               |
|     datastore     |                                                                                 {u'version': u'mysql-5.5', u'type': u'mysql'}                                                                                  |
| datastore_version |                                                                                                   mysql-5.5                                                                                                    |
|       flavor      | {u'id': u'10', u'links': [{u'href': u'https://10.125.1.135:8779/v1.0/626734041baa4254ae316de52a20b390/flavors/10', u'rel': u'self'}, {u'href': u'https://10.125.1.135:8779/flavors/10', u'rel': u'bookmark'}]} |
|         id        |                                                                                      ac7a2b35-a9b4-4ff6-beac-a1bcee86d04b                                                                                      |
|        name       |                                                                                                     guest2                                                                                                     |
|       status      |                                                                                                     BUILD                                                                                                      |
|      updated      |                                                                                              2014-03-18T17:12:03                                                                                               |
|       volume      |                                                                                                  {u'size': 2}                                                                                                  |
+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Verify backup</emphasis>
      </para>
      <para>
       Now check that the new <literal>guest2</literal> instance has the
       same characteristics as the original <literal>guest1</literal>
       instance.
      </para>
      <para>
       Start by getting the ID of the new <literal>guest2</literal>
       instance.
      </para>
<screen><prompt role="user">$</prompt> trove list
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+
|                  id                  |  name  | datastore | datastore_version | status | flavor_id | size |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+
| 97b4b853-80f6-414f-ba6f-c6f455a79ae6 | guest1 |   mysql   |     mysql-5.5     | ACTIVE |     10    |  2   |
| ac7a2b35-a9b4-4ff6-beac-a1bcee86d04b | guest2 |   mysql   |     mysql-5.5     | ACTIVE |     10    |  2   |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+</screen>
      <para>
       Use the trove <command>show</command> command to display information
       about the new guest2 instance. Pass in guest2's
       <replaceable>INSTANCE_ID</replaceable>, which is
       <literal>ac7a2b35-a9b4-4ff6-beac-a1bcee86d04b</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove show <replaceable>INSTANCE_ID</replaceable>
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|      created      |         2014-03-18T17:12:03          |
|     datastore     |                mysql                 |
| datastore_version |              mysql-5.5               |
|       flavor      |                  10                  |
|         id        | ac7a2b35-a9b4-4ff6-beac-a1bcee86d04b |
|         ip        |               10.0.0.3               |
|        name       |                guest2                |
|       status      |                ACTIVE                |
|      updated      |         2014-03-18T17:12:06          |
|       volume      |                  2                   |
|    volume_used    |                 0.18                 |
+-------------------+--------------------------------------+</screen>
      <para>
       Note that the data store, flavor ID, and volume size have the same
       values as in the original <literal>guest1</literal> instance.
      </para>
      <para>
       Use the trove <command>database-list</command> command to check that
       the original databases (<literal>db1</literal> and
       <literal>db2</literal>) are present on the restored instance.
      </para>
<screen><prompt role="user">$</prompt> trove database-list <replaceable>INSTANCE_ID</replaceable>
+--------------------+
|        name        |
+--------------------+
|        db1         |
|        db2         |
| performance_schema |
|        test        |
+--------------------+</screen>
      <para>
       Use the trove <command>user-list</command> command to check that the
       original user (<literal>user1</literal>) is present on the restored
       instance.
      </para>
<screen><prompt role="user">$</prompt> trove user-list <replaceable>INSTANCE_ID</replaceable>
+--------+------+-----------+
|  name  | host | databases |
+--------+------+-----------+
| user1  |  %   |  db1, db2 |
+--------+------+-----------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Notify users</emphasis>
      </para>
      <para>
       Tell the users who were accessing the now-disabled
       <literal>guest1</literal> database instance that they can now access
       <literal>guest2</literal>. Provide them with
       <literal>guest2</literal>'s name, IP address, and any other
       information they might need. (You can get this information by using
       the trove <command>show</command> command.)
      </para>
     </step>
     <step>
      <para>
       <emphasis role="bold">Clean up</emphasis>
      </para>
      <para>
       At this point, you might want to delete the disabled
       <literal>guest1</literal> instance, by using the trove
       <command>delete</command> command.
      </para>
<screen><prompt role="user">$</prompt> trove delete <replaceable>INSTANCE_ID</replaceable></screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="backup_db_incremental">
    <title>Use incremental backups</title>
    <para>
     Incremental backups let you chain together a series of backups. You
     start with a regular backup. Then, when you want to create a subsequent
     incremental backup, you specify the parent backup.
    </para>
    <para>
     Restoring a database instance from an incremental backup is the same as
     creating a database instance from a regular backupâ€”the Database
     service handles the complexities of applying the chain of incremental
     backups.
    </para>
    <para>
     This example shows you how to use incremental backups with a MySQL
     database.
    </para>
    <formalpara>
     <title>Assumptions</title>
     <para>
      Assume that you have <link linkend="backup_db">created a regular
      backup</link> for the following database instance:
     </para>
    </formalpara>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Instance name: <literal>guest1</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       ID of the instance (<replaceable>INSTANCE_ID</replaceable>):
       <literal>792a6a56-278f-4a01-9997-d997fa126370</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       ID of the regular backup artifact
       (<replaceable>BACKUP_ID</replaceable>):
       <literal>6dc3a9b7-1f3e-4954-8582-3f2e4942cddd</literal>
      </para>
     </listitem>
    </itemizedlist>
    <procedure>
     <title>To create and use incremental backups</title>
     <step>
      <para>
       <emphasis role="bold">Create your first incremental backup</emphasis>
      </para>
      <para>
       Use the trove <command>backup-create</command> command and specify:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         The <replaceable>INSTANCE_ID</replaceable> of the database instance
         you are doing the incremental backup for (in this example,
         <literal>792a6a56-278f-4a01-9997-d997fa126370</literal>)
        </para>
       </listitem>
       <listitem>
        <para>
         The name of the incremental backup you are creating:
         <literal>backup1.1</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         The <replaceable>BACKUP_ID</replaceable> of the parent backup. In
         this case, the parent is the regular backup, with an ID of
         <literal>6dc3a9b7-1f3e-4954-8582-3f2e4942cddd</literal>
        </para>
       </listitem>
      </itemizedlist>
<screen><prompt role="user">$</prompt> trove backup-create <replaceable>INSTANCE_ID</replaceable> backup1.1  --parent <replaceable>BACKUP_ID</replaceable>
+-------------+--------------------------------------+
|   Property  |                Value                 |
+-------------+--------------------------------------+
|   created   |         2014-03-19T14:09:13          |
| description |                 None                 |
|      id     | 1d474981-a006-4f62-b25f-43d7b8a7097e |
| instance_id | 792a6a56-278f-4a01-9997-d997fa126370 |
| locationRef |                 None                 |
|     name    |              backup1.1               |
|  parent_id  | 6dc3a9b7-1f3e-4954-8582-3f2e4942cddd |
|     size    |                 None                 |
|    status   |                 NEW                  |
|   updated   |         2014-03-19T14:09:13          |
+-------------+--------------------------------------+</screen>
      <para>
       Note that this command returns both the ID of the database instance
       you are incrementally backing up (<literal>instance_id</literal>) and
       a new ID for the new incremental backup artifact you just created
       (<literal>id</literal>).
      </para>
     </step>
     <step>
      <para>
       <emphasis role="bold">Create your second incremental
       backup</emphasis>
      </para>
      <para>
       The name of your second incremental backup is
       <literal>backup1.2</literal>. This time, when you specify the parent,
       pass in the ID of the incremental backup you just created in the
       previous step (<literal>backup1.1</literal>). In this example, it is
       <literal>1d474981-a006-4f62-b25f-43d7b8a7097e</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove backup-create <replaceable>INSTANCE_ID</replaceable>  backup1.2  --parent <replaceable>BACKUP_ID</replaceable>
+-------------+--------------------------------------+
|   Property  |                Value                 |
+-------------+--------------------------------------+
|   created   |         2014-03-19T14:09:13          |
| description |                 None                 |
|      id     | bb84a240-668e-49b5-861e-6a98b67e7a1f |
| instance_id | 792a6a56-278f-4a01-9997-d997fa126370 |
| locationRef |                 None                 |
|     name    |              backup1.2               |
|  parent_id  | 1d474981-a006-4f62-b25f-43d7b8a7097e |
|     size    |                 None                 |
|    status   |                 NEW                  |
|   updated   |         2014-03-19T14:09:13          |
+-------------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Restore using incremental backups</emphasis>
      </para>
      <para>
       Now assume that your <literal>guest1</literal> database instance is
       damaged and you need to restore it from your incremental backups. In
       this example, you use the trove <command>create</command> command to
       create a new database instance called <literal>guest2</literal>.
      </para>
      <para>
       To incorporate your incremental backups, you simply use the
       <literal>--backup</literal> parameter to pass in the
       <replaceable>BACKUP_ID</replaceable> of your most recent incremental
       backup. The Database service handles the complexities of applying the
       chain of all previous incremental backups.
      </para>
<screen><prompt role="user">$</prompt> trove create guest2 10 --size 1 --backup <replaceable>BACKUP_ID</replaceable>
+-------------------+-----------------------------------------------------------+
|      Property     |                       Value                               |
+-------------------+-----------------------------------------------------------+
|      created      |                  2014-03-19T14:10:56                      |
|     datastore     |         {u'version': u'mysql-5.5', u'type': u'mysql'}     |
| datastore_version |                      mysql-5.5                            |
|       flavor      | {u'id': u'10', u'links':                                  |
|                   | [{u'href': u'https://10.125.1.135:8779/v1.0/              |
|                   |  626734041baa4254ae316de52a20b390/flavors/10', u'rel':    |
|                   |  u'self'}, {u'href': u'https://10.125.1.135:8779/         |
|                   |  flavors/10', u'rel': u'bookmark'}]}                      |
|         id        |         a3680953-eea9-4cf2-918b-5b8e49d7e1b3              |
|        name       |                      guest2                               |
|       status      |                      BUILD                                |
|      updated      |                  2014-03-19T14:10:56                      |
|       volume      |                   {u'size': 1}                            |
+-------------------+-----------------------------------------------------------+</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="manage_db_config">
    <title>Manage database configuration</title>
    <para>
     You can manage database configuration tasks by using configuration
     groups. Configuration groups let you set configuration options, in
     bulk, on one or more databases.
    </para>
    <para>
     This example assumes you have <link linkend="create_db">created a MySQL
     database</link> and shows you how to use a configuration group to
     configure it. Although this example sets just one option on one
     database, you can use these same procedures to set multiple options on
     multiple database instances throughout your environment. This can
     provide significant time savings in managing your cloud.
    </para>
    <procedure>
     <title>To bulk-configure a database or databases</title>
     <step>
      <para>
       <emphasis role="bold">List available options</emphasis>
      </para>
      <para>
       First, determine which configuration options you can set. Different
       data store versions have different configuration options.
      </para>
      <para>
       List the names and IDs of all available versions of the
       <literal>mysql</literal> data store:
      </para>
<screen><prompt role="user">$</prompt> trove datastore-version-list mysql
+--------------------------------------+-----------+
|                  id                  |    name   |
+--------------------------------------+-----------+
| eeb574ce-f49a-48b6-820d-b2959fcd38bb | mysql-5.5 |
+--------------------------------------+-----------+</screen>
      <para>
       Pass in the data store version ID with the trove
       <command>configuration-parameter-list</command> command to get the
       available options:
      </para>
<screen><prompt role="user">$</prompt> trove configuration-parameter-list <replaceable>DATASTORE_VERSION_ID</replaceable>
+--------------------------------+---------+---------+----------------------+------------------+
|              name              |   type  |   min   |         max          | restart_required |
+--------------------------------+---------+---------+----------------------+------------------+
|    auto_increment_increment    | integer |    1    |        65535         |      False       |
|     auto_increment_offset      | integer |    1    |        65535         |      False       |
|           autocommit           | integer |    0    |          1           |      False       |
|    bulk_insert_buffer_size     | integer |    0    | 18446744073709547520 |      False       |
|      character_set_client      |  string |         |                      |      False       |
|    character_set_connection    |  string |         |                      |      False       |
|     character_set_database     |  string |         |                      |      False       |
|    character_set_filesystem    |  string |         |                      |      False       |
|     character_set_results      |  string |         |                      |      False       |
|      character_set_server      |  string |         |                      |      False       |
|      collation_connection      |  string |         |                      |      False       |
|       collation_database       |  string |         |                      |      False       |
|        collation_server        |  string |         |                      |      False       |
|        connect_timeout         | integer |    1    |        65535         |      False       |
|        expire_logs_days        | integer |    1    |        65535         |      False       |
|    innodb_buffer_pool_size     | integer |    0    |     68719476736      |       True       |
|     innodb_file_per_table      | integer |    0    |          1           |       True       |
| innodb_flush_log_at_trx_commit | integer |    0    |          2           |      False       |
|     innodb_log_buffer_size     | integer | 1048576 |      4294967296      |       True       |
|       innodb_open_files        | integer |    10   |      4294967296      |       True       |
|   innodb_thread_concurrency    | integer |    0    |         1000         |      False       |
|      interactive_timeout       | integer |    1    |        65535         |      False       |
|        join_buffer_size        | integer |    0    |      4294967296      |      False       |
|        key_buffer_size         | integer |    0    |      4294967296      |      False       |
|          local_infile          | integer |    0    |          1           |      False       |
|       max_allowed_packet       | integer |   1024  |      1073741824      |      False       |
|       max_connect_errors       | integer |    1    | 18446744073709547520 |      False       |
|        max_connections         | integer |    1    |        65535         |      False       |
|      max_user_connections      | integer |    1    |        100000        |      False       |
|    myisam_sort_buffer_size     | integer |    4    | 18446744073709547520 |      False       |
|           server_id            | integer |    1    |        100000        |       True       |
|        sort_buffer_size        | integer |  32768  | 18446744073709547520 |      False       |
|          sync_binlog           | integer |    0    | 18446744073709547520 |      False       |
|          wait_timeout          | integer |    1    |       31536000       |      False       |
+--------------------------------+---------+---------+----------------------+------------------+</screen>
      <para>
       In this example, the <command>configuration-parameter-list</command>
       command returns a list of options that work with MySQL 5.5.
      </para>
     </step>
     <step>
      <para>
       <emphasis role="bold">Create a configuration group</emphasis>
      </para>
      <para>
       A configuration group contains a comma-separated list of key-value
       pairs. Each pair consists of a configuration option and its value.
      </para>
      <para>
       You can create a configuration group by using the trove
       <command>configuration-create</command> command. The general syntax
       for this command is:
      </para>
<screen><prompt role="user">$</prompt> trove configuration-create <replaceable>NAME</replaceable><replaceable>VALUES</replaceable> --datastore <replaceable>DATASTORE_NAME</replaceable></screen>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         <replaceable>NAME</replaceable>. The name you want to use for this
         group.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>VALUES</replaceable>. The list of key-value pairs.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>DATASTORE_NAME</replaceable>. The name of the
         associated data store.
        </para>
       </listitem>
      </itemizedlist>
      <para>
       Set <replaceable>VALUES</replaceable> as a JSON dictionary, for
       example:
      </para>
<screen remap="programlisting-json">{"myFirstKey" : "someString", "mySecondKey" : someInt}</screen>
      <para>
       This example creates a configuration group called
       <literal>group1</literal>. <literal>group1</literal> contains just
       one key and value pair, and this pair sets the
       <option>sync_binlog</option> option to <literal>1</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove configuration-create group1 '{"sync_binlog" : 1}' --datastore mysql
+----------------------+--------------------------------------+
|       Property       |                Value                 |
+----------------------+--------------------------------------+
| datastore_version_id | eeb574ce-f49a-48b6-820d-b2959fcd38bb |
|     description      |                 None                 |
|          id          | 9a9ef3bc-079b-476a-9cbf-85aa64f898a5 |
|         name         |                group1                |
|        values        |          {"sync_binlog": 1}          |
+----------------------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Examine your existing configuration</emphasis>
      </para>
      <para>
       Before you use the newly-created configuration group, look at how the
       <option>sync_binlog</option> option is configured on your database.
       Replace the following sample connection values with values that
       connect to your database:
      </para>
<screen><prompt role="user">$</prompt> mysql -u user7 -ppassword -h 172.16.200.2 myDB7
Welcome to the MySQL monitor. Commands end with ; or \g.
...
<prompt role="user">mysql&gt;</prompt> show variables like 'sync_binlog';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| sync_binlog   | 0     |
+---------------+-------+</screen>
      <para>
       As you can see, the <option>sync_binlog</option> option is currently
       set to <literal>0</literal> for the <literal>myDB7</literal>
       database.
      </para>
     </step>
     <step>
      <para>
       <emphasis role="bold">Change the database configuration using a
       configuration group</emphasis>
      </para>
      <para>
       You can change a database's configuration by attaching a
       configuration group to a database instance. You do this by using the
       trove <command>configuration-attach</command> command and passing in
       the ID of the database instance and the ID of the configuration
       group.
      </para>
      <para>
       Get the ID of the database instance:
      </para>
<screen><prompt role="user">$</prompt> trove list
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+
|                  id                  |       name       | datastore | datastore_version | status | flavor_id | size |
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+
| 26a265dd-1c88-4333-b3ed-6b4e9e87ffbb | mysql_instance_7 |   mysql   |     mysql-5.5     | ACTIVE |     6     |  5   |
+--------------------------------------+------------------+-----------+-------------------+--------+-----------+------+</screen>
      <para>
       Get the ID of the configuration group:
      </para>
<screen><prompt role="user">$</prompt> trove configuration-list
+--------------------------------------+--------+-------------+--------------------------------------+
|                  id                  |  name  | description |         datastore_version_id         |
+--------------------------------------+--------+-------------+--------------------------------------+
| 9a9ef3bc-079b-476a-9cbf-85aa64f898a5 | group1 |     None    | eeb574ce-f49a-48b6-820d-b2959fcd38bb |
+--------------------------------------+--------+-------------+--------------------------------------+</screen>
      <para>
       Attach the configuration group to the database instance:
      </para>
      <note>
       <para>
        This command syntax pertains only to python-troveclient version
        1.0.6 and later. Earlier versions require you to pass in the
        configuration group ID as the first argument.
       </para>
      </note>
<screen><prompt role="user">$</prompt> trove configuration-attach <replaceable>DB_INSTANCE_ID</replaceable><replaceable>CONFIG_GROUP_ID</replaceable></screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Re-examine the database
       configuration</emphasis>
      </para>
      <para>
       Display the <option>sync_binlog</option> setting again:
      </para>
<screen><prompt role="user">mysql&gt;</prompt> show variables like 'sync_binlog';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| sync_binlog   | 1     |
+---------------+-------+</screen>
      <para>
       As you can see, the <option>sync_binlog</option> option is now set to
       <literal>1</literal>, as specified in the <literal>group1</literal>
       configuration group.
      </para>
     </step>
    </procedure>
    <formalpara>
     <title>Conclusion</title>
     <para>
      Using a configuration group to set a single option on a single
      database is obviously a trivial example. However, configuration groups
      can provide major efficiencies when you consider that:
     </para>
    </formalpara>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       A configuration group can specify a large number of option values.
      </para>
     </listitem>
     <listitem>
      <para>
       You can apply a configuration group to hundreds or thousands of
       database instances in your environment.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Used in this way, configuration groups let you modify your database
     cloud configuration, on the fly, on a massive scale.
    </para>
    <formalpara>
     <title>Maintenance</title>
     <para>
      There are also a number of useful maintenance features for working
      with configuration groups. You can:
     </para>
    </formalpara>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Disassociate a configuration group from a database instance, using
       the trove <command>configuration-detach</command> command.
      </para>
     </listitem>
     <listitem>
      <para>
       Modify a configuration group on the fly, using the trove
       <command>configuration-patch</command> command.
      </para>
     </listitem>
     <listitem>
      <para>
       Find out what instances are using a configuration group, using the
       trove <command>configuration-instances</command> command.
      </para>
     </listitem>
     <listitem>
      <para>
       Delete a configuration group, using the trove
       <command>configuration-delete</command> command. You might want to do
       this if no instances use a group.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="set_up_replication">
    <title>Set up database replication</title>
    <para>
     You can create a replica of an existing database instance. When you
     make subsequent changes to the original instance, the system
     automatically applies those changes to the replica.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Replicas are read-only.
      </para>
     </listitem>
     <listitem>
      <para>
       When you create a replica, do not specify the
       <option>--users</option> or <option>--databases</option> options.
      </para>
     </listitem>
     <listitem>
      <para>
       You can choose a smaller volume or flavor for a replica than for the
       original, but the replica's volume must be big enough to hold the
       data snapshot from the original.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     This example shows you how to replicate a MySQL database instance.
    </para>
    <procedure>
     <title>To set up replication</title>
     <step>
      <para>
       <emphasis role="bold">Get the instance ID</emphasis>
      </para>
      <para>
       Get the ID of the original instance you want to replicate:
      </para>
<screen><prompt role="user">$</prompt> trove list
+--------------------------------------+----------+-------------+-------------------+--------+-----------+------+
|                  id                  |  name      | datastore | datastore_version | status | flavor_id | size |
+--------------------------------------+------------+-----------+-------------------+--------+-----------+------+
| 97b4b853-80f6-414f-ba6f-c6f455a79ae6 | base_1     |   mysql   |     mysql-5.5     | ACTIVE |     10    |  2   |
+--------------------------------------+----------+-------------+-------------------+--------+-----------+------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Create the replica</emphasis>
      </para>
      <para>
       Create a new instance that will be a replica of the original
       instance. You do this by passing in the <option>--replica_of</option>
       option with the trove <command>create</command> command. This example
       creates a replica called <literal>replica_1</literal>.
       <literal>replica_1</literal> is a replica of the original instance,
       <literal>base_1</literal>:
      </para>
<screen><prompt role="user">$</prompt> trove create replica_1 6 --size=5 --datastore_version mysql-5.5 --datastore mysql --replica_of <replaceable>ID_OF_ORIGINAL_INSTANCE</replaceable></screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Verify replication status</emphasis>
      </para>
      <para>
       Pass in <literal>replica_1</literal>'s instance ID with the trove
       <command>show</command> command to verify that the newly created
       <literal>replica_1</literal> instance is a replica of the original
       <literal>base_1</literal>. Note that the
       <literal>replica_of</literal> property is set to the ID of
       <literal>base_1</literal>.
      </para>
<screen><prompt role="user">$</prompt> trove show <replaceable>INSTANCE_ID_OF_REPLICA_1</replaceable>
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2014-09-16T11:16:49                  |
| datastore         | mysql                                |
| datastore_version | mysql-5.5                            |
| flavor            | 6                                    |
| id                | 49c6eff6-ef91-4eff-91c0-efbda7e83c38 |
| name              | replica_1                            |
| replica_of        | 97b4b853-80f6-414f-ba6f-c6f455a79ae6 |
| status            | BUILD                                |
| updated           | 2014-09-16T11:16:49                  |
| volume            | 5                                    |
+-------------------+--------------------------------------+</screen>
      <para>
       Now pass in <literal>base_1</literal>'s instance ID with the trove
       <command>show</command> command to list the replica(s) associated
       with the original instance. Note that the <literal>replicas</literal>
       property is set to the ID of <literal>replica_1</literal>. If there
       are multiple replicas, they appear as a comma-separated list.
      </para>
<screen><prompt role="user">$</prompt> trove show <replaceable>INSTANCE_ID_OF_BASE_1</replaceable>
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2014-09-16T11:04:56                  |
| datastore         | mysql                                |
| datastore_version | mysql-5.5                            |
| flavor            | 6                                    |
| id                | 97b4b853-80f6-414f-ba6f-c6f455a79ae6 |
| ip                | 172.16.200.2                         |
| name              | base_1                               |
| replicas          | 49c6eff6-ef91-4eff-91c0-efbda7e83c38 |
| status            | ACTIVE                               |
| updated           | 2014-09-16T11:05:06                  |
| volume            | 5                                    |
| volume_used       | 0.11                                 |
+-------------------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Detach the replica</emphasis>
      </para>
      <para>
       If the original instance goes down, you can detach the replica. The
       replica becomes a standalone database instance. You can then take the
       new standalone instance and create a new replica of that instance.
      </para>
      <para>
       You detach a replica using the trove
       <command>detach-replica</command> command:
      </para>
<screen><prompt role="user">$</prompt> trove detach-replica <replaceable>INSTANCE_ID_OF_REPLICA</replaceable></screen>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="set_up_clustering">
    <title>Set up database clustering</title>
    <para>
     You can store data across multiple machines by setting up MongoDB
     sharded clusters.
    </para>
    <para>
     Each cluster includes:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       One or more <emphasis>shards</emphasis>. Each shard consists of a
       three member replica set (three instances organized as a replica
       set).
      </para>
     </listitem>
     <listitem>
      <para>
       One or more <emphasis>query routers</emphasis>. A query router is the
       machine that your application actually connects to. This machine is
       responsible for communicating with the config server to figure out
       where the requested data is stored. It then accesses and returns the
       data from the appropriate shard(s).
      </para>
     </listitem>
     <listitem>
      <para>
       One or more <emphasis>config servers</emphasis>. Config servers store
       the metadata that links requested data with the shard that contains
       it.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     This example shows you how to set up a MongoDB sharded cluster.
    </para>
    <note>
     <title>Before you begin</title>
     <para>
      Make sure that:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        The administrative user has registered a MongoDB datastore type and
        version.
       </para>
      </listitem>
      <listitem>
       <para>
        The administrative user has created an appropriate
        <link linkend="create_db">flavor that meets the MongoDB minimum
        requirements</link>.
       </para>
      </listitem>
     </itemizedlist>
    </note>
    <procedure>
     <title>To set up clustering</title>
     <step>
      <para>
       <emphasis role="bold">Create a cluster</emphasis>
      </para>
      <para>
       Create a cluster by using the trove <command>cluster-create</command>
       command. This command creates a one-shard cluster. Pass in:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         The name of the cluster.
        </para>
       </listitem>
       <listitem>
        <para>
         The name and version of the datastore you want to use.
        </para>
       </listitem>
       <listitem>
        <para>
         The three instances you want to include in the replication set for
         the first shard. Specify each instance by using the
         <option>--instance</option> argument and the associated flavor ID
         and volume size. Use the same flavor ID and volume size for each
         instance. In this example, flavor <literal>7</literal> is a custom
         flavor that meets the MongoDB minimum requirements.
        </para>
       </listitem>
      </itemizedlist>
<screen><prompt role="user">$</prompt> trove cluster-create cluster1 mongodb "2.4" \
  --instance flavor_id=7,volume=2 --instance flavor_id=7,volume=2 \
  --instance flavor_id=7,volume=2
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2014-08-16T01:46:51                  |
| datastore         | mongodb                              |
| datastore_version | 2.4                                  |
| id                | aa6ef0f5-dbef-48cd-8952-573ad881e717 |
| name              | cluster1                             |
| task_description  | Building the initial cluster.        |
| task_name         | BUILDING                             |
| updated           | 2014-08-16T01:46:51                  |
+-------------------+--------------------------------------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Display cluster information</emphasis>
      </para>
      <para>
       Display information about a cluster by using the trove
       <command>cluster-show</command> command. Pass in the ID of the
       cluster.
      </para>
      <para>
       The cluster ID display when you first create a cluster. (If you need
       to find it later on, use the trove <command>cluster-list</command>
       command to list the names and IDs of all the clusters in your
       system.)
      </para>
<screen><prompt role="user">$</prompt> trove cluster-show <replaceable>CLUSTER_ID</replaceable>
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2014-08-16T01:46:51                  |
| datastore         | mongodb                              |
| datastore_version | 2.4                                  |
| id                | aa6ef0f5-dbef-48cd-8952-573ad881e717 |
| ip                | 10.0.0.2                             |
| name              | cluster1                             |
| task_description  | No tasks for the cluster.            |
| task_name         | NONE                                 |
| updated           | 2014-08-16T01:59:33                  |
+-------------------+--------------------------------------+
        </screen>
      <note>
       <title>Your application connects to this IP address</title>
       <para>
        The trove <command>cluster-show</command> command displays the IP
        address of the query router. This is the IP address your application
        uses to retrieve data from the database.
       </para>
      </note>
     </step>
     <step>
      <para>
       <emphasis role="bold">List cluster instances</emphasis>
      </para>
      <para>
       List the instances in a cluster by using the trove
       <command>cluster-instances</command> command.
      </para>
<screen><prompt role="user">$</prompt> trove cluster-instances <replaceable>CLUSTER_ID</replaceable>
+--------------------------------------+----------------+-----------+------+
| ID                                   | Name           | Flavor ID | Size |
+--------------------------------------+----------------+-----------+------+
| 45532fc4-661c-4030-8ca4-18f02aa2b337 | cluster1-rs1-1 | 7         |    2 |
| 7458a98d-6f89-4dfd-bb61-5cf1dd65c121 | cluster1-rs1-2 | 7         |    2 |
| b37634fb-e33c-4846-8fe8-cf2b2c95e731 | cluster1-rs1-3 | 7         |    2 |
+--------------------------------------+----------------+-----------+------+</screen>
      <formalpara>
       <title>Naming conventions for replication sets and instances</title>
       <para>
        Note that the <literal>Name</literal> column displays an instance
        name that includes the replication set name. The replication set
        names and instance names are automatically generated, following
        these rules:
       </para>
      </formalpara>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <formalpara>
         <title>Replication set name</title>
         <para>
          This name consists of the cluster name, followed by the string
          -rs<replaceable>n</replaceable>, where
          <replaceable>n</replaceable> is 1 for the first replication set
          you create, 2 for the second replication set, and so on. In this
          example, the cluster name is <literal>cluster1</literal>, and
          there is only one replication set, so the replication set name is
          <literal>cluster1-rs1</literal>.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>Instance name</title>
         <para>
          This name consists of the replication set name followed by the
          string -<replaceable>n</replaceable>, where
          <replaceable>n</replaceable> is 1 for the first instance in a
          replication set, 2 for the the second instance, and so on. In this
          example, the instance names are <literal>cluster1-rs1-1</literal>,
          <literal>cluster1-rs1-2</literal>, and
          <literal>cluster1-rs1-3</literal>.
         </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       <emphasis role="bold">List clusters</emphasis>
      </para>
      <para>
       List all the clusters in your system, using the trove
       <command>cluster-list</command> command.
      </para>
<screen><prompt role="user">$</prompt> trove cluster-list
+--------------------------------------+----------+-----------+-------------------+-----------+
| ID                                   | Name     | Datastore | Datastore Version | Task Name |
+--------------------------------------+----------+-----------+-------------------+-----------+
| aa6ef0f5-dbef-48cd-8952-573ad881e717 | cluster1 | mongodb   | 2.4               | NONE      |
| b8829c2a-b03a-49d3-a5b1-21ec974223ee | cluster2 | mongodb   | 2.4               | BUILDING  |
+--------------------------------------+----------+-----------+-------------------+-----------+</screen>
     </step>
     <step>
      <para>
       <emphasis role="bold">Delete a cluster</emphasis>
      </para>
      <para>
       Delete a cluster, using the trove <command>cluster-delete</command>
       command.
      </para>
<screen><prompt role="user">$</prompt> trove cluster-delete <replaceable>CLUSTER_ID</replaceable></screen>
     </step>
    </procedure>
    <sect3>
     <title>Query routers and config servers</title>
     <para>
      Each cluster includes at least one query router and one config server.
      Query routers and config servers count against your quota. When you
      delete a cluster, the system deletes the associated query router(s)
      and config server(s).
     </para>
    </sect3>
   </sect2>
  </sect1>
 </chapter>
 <chapter xml:id="ch_sdk">
  <title>OpenStack Python SDK</title>
  <para>
   Use the OpenStack Python Software Development Kit (SDK) to write Python
   automation scripts that create and manage resources in your OpenStack
   cloud. The SDK implements Python bindings to the OpenStack API, which
   enables you to perform automation tasks in Python by making calls on
   Python objects rather than making REST calls directly. All OpenStack
   command-line tools are implemented using the Python SDK.
  </para>
  <para>
   You should also be familiar with:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     RESTful web services
    </para>
   </listitem>
   <listitem>
    <para>
     HTTP/1.1
    </para>
   </listitem>
   <listitem>
    <para>
     JSON and XML data serialization formats
    </para>
   </listitem>
  </itemizedlist>
  <sect1 xml:id="sdk_install">
   <title>Install the OpenStack SDK</title>

   <para>
    Each OpenStack project has its own Python library. These libraries are
    bundled with the command-line clients. For example, the Python bindings
    for the Compute API are bundled with the
    <systemitem class="resource">python-novaclient</systemitem> package.
   </para>

   <para>
    For details about how to install the clients, see
    <link linkend="install_clients">install the OpenStack command-line
    clients</link>.
   </para>
  </sect1>
  <sect1 xml:id="sdk_auth">
   <title>Authenticate</title>

   <para>
    When using the SDK, you must authenticate against an OpenStack endpoint
    before you can use OpenStack services. Each project uses a slightly
    different syntax for authentication.
   </para>

   <para>
    You must typically authenticate against a specific version of a service.
    For example, a client might need to authenticate against Identity v2.0.
   </para>

   <para>
    Python scripts that use the OpenStack SDK must have access to the
    credentials contained in the <link linkend="cli_openrc">OpenStack RC
    file</link>. Because credentials are sensitive information, do not
    include them in your scripts. This guide assumes that users source the
    <filename><replaceable>PROJECT</replaceable>-openrc.sh</filename> file
    and access the credentials by using the environment variables in the
    Python scripts.
   </para>

   <sect2 xml:id="sdk_auth_keystone">
    <title>Authenticate against an Identity endpoint</title>
    <para>
     To authenticate against the Identity v2.0 endpoint, instantiate a
     <link xlink:href="http://docs.openstack.org/developer/python-keystoneclient/api/keystoneclient.v2_0.client.html#keystoneclient.v2_0.client.Client">
     keystoneclient.v_20.client.Client</link> object:
    </para>
<screen remap="programlisting-python">from os import environ as env
import keystoneclient.v2_0.client as ksclient
keystone = ksclient.Client(auth_url=env['OS_AUTH_URL'],
                           username=env['OS_USERNAME'],
                           password=env['OS_PASSWORD'],
                           tenant_name=env['OS_TENANT_NAME'],
                           region_name=env['OS_REGION_NAME'])</screen>
    <para>
     After you instantiate a <literal>Client</literal> object, you can
     retrieve the token by accessing its <literal>auth_token</literal>
     attribute object:
    </para>
<screen remap="programlisting-python">import keystoneclient.v2_0.client as ksclient
keystone = ksclient.Client(...)
print keystone.auth_token</screen>
    <para>
     If the OpenStack cloud is configured to use public-key infrastructure
     (PKI) tokens, the Python script output looks something like this:
    </para>
<screen>MIIQUQYJKoZIhvcNAQcCoIIQQjCCED4CAQExCTAHBgUrDgMCGjCCDqcGCSqGSIb3DQEHAaCCDpgE
gg6UeyJhY2Nlc3MiOiB7InRva2VuIjogeyJpc3N1ZWRfYXQiOiAiMjAxMy0xMC0yMFQxNjo1NjoyNi
4zNTg2MjUiLCAiZXhwaXJlcyI6ICIyMDEzLTEwLTIxVDE2OjU2OjI2WiIsICJpZCI6ICJwbGFjZWhv
...
R3g14FJ0BxtTPbo6WarZ+sA3PZwdgIDyGNI-0Oqv-8ih4gJC9C6wBCel1dUXJ0Mn7BN-SfuxkooVk6
e090bcKjTWet3CC8IEj7a6LyLRVTdvmKGA5-pgp2mS5fb3G2mIad4Zeeb-zQn9V3Xf9WUGxuiVu1Hn
fhuUpJT-s9mU7+WEC3-8qkcBjEpqVCvMpmM4INI=</screen>
    <note>
     <para>
      This example shows a subset of a PKI token. A complete token is over
      5000 characters long.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="sdk_auth_glance">
    <title>Authenticate against an Image Service endpoint</title>
    <para>
     To authenticate against an Image Service endpoint, instantiate a
     <link xlink:href="http://docs.openstack.org/developer/python-glanceclient/api/glanceclient.v2.client.html#glanceclient.v2.client.Client">
     glanceclient.v2.client.Client</link> object:
    </para>
<screen remap="programlisting-python">from os import environ as env
import glanceclient.v2.client as glclient
import keystoneclient.v2_0.client as ksclient

keystone = ksclient.Client(auth_url=env['OS_AUTH_URL'],
                           username=env['OS_USERNAME'],
                           password=env['OS_PASSWORD'],
                           tenant_name=env['OS_TENANT_NAME'],
                           region_name=env['OS_REGION_NAME'])
glance_endpoint = keystone.service_catalog.url_for(service_type='image')
glance = glclient.Client(glance_endpoint, token=keystone.auth_token)</screen>
   </sect2>

   <sect2 xml:id="sdk_auth_nova">
    <title>Authenticate against a Compute endpoint</title>
    <para>
     To authenticate against a Compute endpoint, instantiate a
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.client.html#novaclient.v1_1.client.Client">
     novaclient.v_1_1.client.Client</link> object:
    </para>
<screen remap="programlisting-python">from os import environ as env
import novaclient.v1_1.client as nvclient
nova = nvclient.Client(auth_url=env['OS_AUTH_URL'],
                       username=env['OS_USERNAME'],
                       api_key=env['OS_PASSWORD'],
                       project_id=env['OS_TENANT_NAME'],
                       region_name=env['OS_REGION_NAME'])</screen>
    <para>
     Alternatively, you can instantiate a
     <literal>novaclient.client.Client</literal> object and pass the version
     number:
    </para>
<screen remap="programlisting-python">from os import environ as env
import novaclient
nova = novaclient.client.Client("1.1", auth_url=env['OS_AUTH_URL'],
                                username=env['OS_USERNAME'],
                                api_key=env['OS_PASSWORD'],
                                project_id=env['OS_TENANT_NAME'],
                                region_name=env['OS_REGION_NAME'])</screen>
    <para>
     If you authenticate against an endpoint that uses a custom
     authentication back end, you must load the authentication plug-in and
     pass it to the constructor.
    </para>
    <para>
     The Rackspace public cloud is an OpenStack deployment that uses a
     custom authentication back end. To authenticate against this cloud, you
     must install the
     <link xlink:href="https://pypi.python.org/pypi/rackspace-novaclient/">
     rackspace-novaclient</link> library that contains the Rackspace
     authentication plug-in, called <literal>rackspace</literal>. The
     following Python code shows the additional modifications required to
     instantiate a <literal>Client</literal> object that can authenticate
     against the Rackspace custom authentication back end.
    </para>
<screen remap="programlisting-python">import novaclient.auth_plugin
import novaclient.v1_1.client as nvclient
from os import environ as env
auth_system = 'rackspace'
auth_plugin = novaclient.auth_plugin.load_plugin('rackspace')
nova = nvclient.Client(auth_url=env['OS_AUTH_URL'],
                       username=env['OS_USERNAME'],
                       api_key=env['OS_PASSWORD'],
                       project_id=env['OS_TENANT_NAME'],
                       region_name=env['OS_REGION_NAME'],
                       auth_system='rackspace',
                       auth_plugin=auth_plugin)</screen>
    <para>
     If you set the <literal>OS_AUTH_SYSTEM</literal> environment variable,
     check for this variable in your Python script to determine whether you
     need to load a custom authentication back end:
    </para>
<screen remap="programlisting-python">import novaclient.auth_plugin
import novaclient.v1_1.client as nvclient
from os import environ as env
auth_system = env.get('OS_AUTH_SYSTEM', 'keystone')
if auth_system != "keystone":
  auth_plugin = novaclient.auth_plugin.load_plugin(auth_system)
else:
  auth_plugin = None
nova = nvclient.Client(auth_url=env['OS_AUTH_URL'],
                       username=env['OS_USERNAME'],
                       api_key=env['OS_PASSWORD'],
                       project_id=env['OS_TENANT_NAME'],
                       region_name=env['OS_REGION_NAME'],
                       auth_system=auth_system,
                       auth_plugin=auth_plugin)</screen>
   </sect2>

   <sect2 xml:id="sdk_auth_neutron">
    <title>Authenticate against a Networking endpoint</title>
    <para>
     To authenticate against a Networking endpoint, instantiate a
     <literal>neutronclient.v_2_0.client.Client</literal> object:
    </para>
<screen remap="programlisting-python">from os import environ as env
from neutronclient.v2_0 import client as neutronclient
neutron = neutronclient.Client(auth_url=env['OS_AUTH_URL'],
                               username=env['OS_USERNAME'],
                               password=env['OS_PASSWORD'],
                               tenant_name=env['OS_TENANT_NAME'],
                               region_name=env['OS_REGION_NAME'])</screen>
    <para>
     You can also authenticate by explicitly specifying the endpoint and
     token:
    </para>
<screen remap="programlisting-python">from os import environ as env
import keystoneclient.v2_0.client as ksclient
from neutronclient.v2_0 import client as neutronclient
keystone = ksclient.Client(auth_url=env['OS_AUTH_URL'],
                           username=env['OS_USERNAME'],
                           password=env['OS_PASSWORD'],
                           tenant_name=env['OS_TENANT_NAME'],
                           region_name=env['OS_REGION_NAME'])
endpoint_url = keystone.service_catalog.url_for(service_type='network')
token = keystone.auth_token
neutron = neutronclient.Client(endpoint_url=endpoint_url, token=token)</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="sdk_manage_images">
<?dbhtml stop-chunking?>

   <title>Manage images</title>

   <para>
    When working with images in the SDK, you will call both
    <literal>glance</literal> and <literal>nova</literal> methods.
   </para>

   <sect2 xml:id="sdk-glance-image-list">
    <title>List images</title>
    <para>
     To list the available images, call the
     <literal>glanceclient.v2.images.Controller.list</literal> method:
    </para>
<screen remap="programlisting-python">import glanceclient.v2.client as glclient
glance = glclient.Client(...)
images = glance.images.list()</screen>
    <para>
     The <literal>images</literal> method returns a Python generator, as
     shown in the following interaction with the Python interpreter:
    </para>
<screen><prompt role="user">&gt;&gt;&gt;</prompt> images = glance.images.list()
<prompt role="user">&gt;&gt;&gt;</prompt> images
&lt;generator object list at 0x105e9c2d0&gt;
<prompt role="user">&gt;&gt;&gt;</prompt> list(images)
[{u'checksum': u'f8a2eeee2dc65b3d9b6e63678955bd83',
  u'container_format': u'ami',
  u'created_at': u'2013-10-20T14:28:10Z',
  u'disk_format': u'ami',
  u'file': u'/v2/images/dbc9b2db-51d7-403d-b680-3f576380b00c/file',
  u'id': u'dbc9b2db-51d7-403d-b680-3f576380b00c',
  u'kernel_id': u'c002c82e-2cfa-4952-8461-2095b69c18a6',
  u'min_disk': 0,
  u'min_ram': 0,
  u'name': u'cirros-0.3.2-x86_64-uec',
  u'protected': False,
  u'ramdisk_id': u'4c1c9b4f-3fe9-425a-a1ec-1d8fd90b4db3',
  u'schema': u'/v2/schemas/image',
  u'size': 25165824,
  u'status': u'active',
  u'tags': [],
  u'updated_at': u'2013-10-20T14:28:11Z',
  u'visibility': u'public'},
 {u'checksum': u'69c33642f44ca552ba4bb8b66ad97e85',
  u'container_format': u'ari',
  u'created_at': u'2013-10-20T14:28:09Z',
  u'disk_format': u'ari',
  u'file': u'/v2/images/4c1c9b4f-3fe9-425a-a1ec-1d8fd90b4db3/file',
  u'id': u'4c1c9b4f-3fe9-425a-a1ec-1d8fd90b4db3',
  u'min_disk': 0,
  u'min_ram': 0,
  u'name': u'cirros-0.3.2-x86_64-uec-ramdisk',
  u'protected': False,
  u'schema': u'/v2/schemas/image',
  u'size': 3714968,
  u'status': u'active',
  u'tags': [],
  u'updated_at': u'2013-10-20T14:28:10Z',
  u'visibility': u'public'},
 {u'checksum': u'c352f4e7121c6eae958bc1570324f17e',
  u'container_format': u'aki',
  u'created_at': u'2013-10-20T14:28:08Z',
  u'disk_format': u'aki',
  u'file': u'/v2/images/c002c82e-2cfa-4952-8461-2095b69c18a6/file',
  u'id': u'c002c82e-2cfa-4952-8461-2095b69c18a6',
  u'min_disk': 0,
  u'min_ram': 0,
  u'name': u'cirros-0.3.2-x86_64-uec-kernel',
  u'protected': False,
  u'schema': u'/v2/schemas/image',
  u'size': 4955792,
  u'status': u'active',
  u'tags': [],
  u'updated_at': u'2013-10-20T14:28:09Z',
  u'visibility': u'public'}]</screen>
   </sect2>

   <sect2 xml:id="sdk-glance-image-get">
    <title>Get image by ID</title>
    <para>
     To retrieve an image object from its ID, call the <literal>
     glanceclient.v2.images.Controller.get</literal> method:
    </para>
<screen remap="programlisting-python">import glanceclient.v2.client as glclient
image_id = 'c002c82e-2cfa-4952-8461-2095b69c18a6'
glance = glclient.Client(...)
image = glance.images.get(image_id)</screen>
   </sect2>

   <sect2 xml:id="sdk-nova-image-find">
    <title>Get image by name</title>
    <para>
     The Image Service Python bindings do not support the retrieval of an
     image object by name. However, the Compute Python bindings enable you
     to get an image object by name. To get an image object by name, call
     the <literal> novaclient.v1_1.images.ImageManager.find</literal>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
name = "cirros"
nova = nvclient.Client(...)
image = nova.images.find(name=name)</screen>
   </sect2>

   <sect2 xml:id="sdk-glance-image-upload">
    <title>Upload an image</title>
    <para>
     To upload an image, call the <literal>
     glanceclient.v2.images.ImageManager.create</literal> method:
    </para>
<screen remap="programlisting-python">import glanceclient.v2.client as glclient
imagefile = "/tmp/myimage.img"
glance = glclient.Client(...)
with open(imagefile) as fimage:
  glance.images.create(name="myimage", is_public=False, disk_format="qcow2",
                       container_format="bare", data=fimage)</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="cors-headers">
   <title>Assign CORS headers to requests</title>

   <para>
    Cross-Origin Resource Sharing (CORS) is a specification that defines how
    browsers and servers communicate across origins by using HTTP headers,
    such as those assigned by Object Storage API requests. The Object
    Storage API supports the following headers:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Access-Control-Allow-Credentials
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Allow-Methods
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Allow-Origin
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Expose-Headers
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Max-Age
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Request-Headers
     </para>
    </listitem>
    <listitem>
     <para>
      Access-Control-Request-Method
     </para>
    </listitem>
    <listitem>
     <para>
      Origin
     </para>
    </listitem>
   </itemizedlist>

   <para>
    You can only assign these headers to objects. For more information, see
    <link xlink:href="http://www.w3.org/TR/access-control/">www.w3.org/TR/access-control/</link>.
   </para>

   <example>
    <title>Assign CORS header request: HTTP</title>
    <para>
     This example assigns the file origin to the <literal>Origin</literal>
     header, which ensures that the file originated from a reputable source:
    </para>
<screen><prompt role="user">$</prompt> curl -i -X POST -H "Origin: example.com" -H "X-Auth-Token:
48e17715dfce47bb90dc2a336f63493a"
https://storage.example.com/v1/MossoCloudFS_c31366f1-9f1c-40dc-a
b92-6b3f0b5a8c45/ephotos
HTTP/1.1 204 No Content
Content-Length: 0
Content-Type: text/html; charset=UTF-8
Access-Control-Allow-Origin: example.com
Access-Control-Expose-Headers: cache-control, content-language,
content-type, expires, last-modified, pragma, etag, x-timestamp, x-trans-id
X-Trans-Id: tx979bfe26be6649c489ada-0054cba1d9ord1
Date: Fri, 30 Jan 2015 15:23:05 GMT</screen>
   </example>
  </sect1>
  <sect1 xml:id="expire-objects">
   <title>Schedule objects for deletion</title>

   <para>
    Scheduling an object for deletion is helpful for managing objects that
    you do not want to permanently store, such as log files, recurring full
    backups of a dataset, or documents or images that become outdated at a
    specified future time.
   </para>

   <para>
    To schedule an object for deletion, include one of these headers with
    the <command>PUT</command> or <command>POST</command> request on the
    object:
   </para>

   <variablelist>
    <varlistentry>
     <term>X-Delete-At</term>
     <listitem>
      <para>
       A UNIX epoch timestamp, in integer form. For example,
       <literal>1348691905</literal> represents <literal>Wed, 26 Sept 2012
       20:38:25 GMT</literal>. Specifies the time when you want the object
       to expire, no longer be served, and be deleted completely from the
       object store.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>X-Delete-After</term>
     <listitem>
      <para>
       An integer value. Specifies the number of seconds from the time of
       the request to when you want to delete the object.
      </para>
      <para>
       This header is converted to an <literal>X-Delete-At</literal> header
       that is set to the sum of the <literal>X-Delete-After</literal> value
       plus the current time, in seconds.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <note>
    <para>
     Use
     <link xlink:href="http://www.epochconverter.com/">http://www.epochconverter.com/</link>
     to convert dates to and from epoch timestamps and for batch
     conversions.
    </para>
   </note>

   <para>
    Use the <command>POST</command> method to assign expiration headers to
    existing objects that you want to expire.
   </para>

   <sect2>
    <title>Delete object at specified time request</title>
    <para>
     In this example, the <literal>X-Delete-At</literal> header is assigned
     a UNIX epoch timestamp in integer form for <literal>Mon, 11 Jun 2012
     15:38:25 GMT</literal>.
    </para>
<screen><prompt role="user">$</prompt> curl -i <replaceable>publicURL</replaceable>/marktwain/goodbye -X PUT -H "X-Auth-Token: <replaceable>token</replaceable>" \
-H "X-Delete-At: 1390581073" -H "Content-Length: 14" -H \
"Content-Type: application/octet-stream"</screen>
   </sect2>

   <sect2>
    <title>Delete object after specified interval request</title>
    <para>
     In this example, the <literal>X-Delete-After</literal> header is set to
     864000 seconds. After this time, the object expires.
    </para>
<screen>PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
Host: storage.example.com
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
Content-Type: image/jpeg
X-Delete-After: 864000</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="sdk_configure_instances">
   <title>Configure access and security for instances</title>

   <para>
    When working with images in the SDK, you will call
    <literal>novaclient</literal> methods.
   </para>

<?dbhtml stop-chunking?>

   <sect2 xml:id="add_keypair_sdk">
    <title>Add a keypair</title>
    <para>
     To generate a keypair, call the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.keypairs.html#novaclient.v1_1.keypairs.KeypairManager.create">novaclient.v1_1.keypairs.KeypairManager.create</link>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
keypair_name = "staging"
keypair = nova.keypairs.create(name=keypair_name)
print keypair.private_key</screen>
    <para>
     The Python script output looks something like this:
    </para>
<screen>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA8XkaMqInSPfy0hMfWO+OZRtIgrQAbQkNcaNHmv2GN2G6xZlb\nuBRux5Xk/6SZ
ABaNPm1nRWm/ZDHnxCsFTcAl2LYOQXx3Cl2qKNY4r2di4G48GAkd\n7k5lDP2RgQatUM8npO0CD9PU
...
mmrceYYK08/lQ7JKLmVkdzdQKt77+v1oBBuHiykLfI6h1m77NRDw9r8cV\nzczYeoALifpjTPMkKS8
ECfDCuDn/vc9K1He8CRaJHf8AMLQLM3MN
-----END RSA PRIVATE KEY-----</screen>
    <para>
     You typically write the private key to a file to use it later. The file
     must be readable and writeable by only the file owner; otherwise, the
     SSH client will refuse to read the private key file. It is safest to
     create the file with the appropriate permissions, as shown in the
     following example:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
import os
nova = nvclient.Client(...)
keypair_name = "staging"
private_key_filename = "/home/alice/id-staging"
keypair = nova.keypairs.create(name=keypair_name)

# Create a file for writing that can only be read and written by owner
fp = os.open(private_key_filename, os.O_WRONLY | os.O_CREAT, 0o600)
with os.fdopen(fp, 'w') as f:
    f.write(keypair.private_key)</screen>
   </sect2>

   <sect2 xml:id="import_keypair_sdk">
    <title>Import a keypair</title>
    <para>
     If you have already generated a keypair with the public key located at
     <filename>~/.ssh/id_rsa.pub</filename>, pass the contents of the file
     to the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.keypairs.html#novaclient.v1_1.keypairs.KeypairManager.create">
     novaclient.v1_1.keypairs.KeypairManager.create</link> method to import
     the public key to Compute:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
import os.path
with open(os.path.expanduser('~/.ssh/id_rsa.pub')) as f:
    public_key = f.read()
nova = nvclient.Client(...)
nova.keypairs.create('mykey', public_key)</screen>
   </sect2>

   <sect2 xml:id="list_keypairs_sdk">
    <title>List keypairs</title>
    <para>
     To list keypairs, call the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.keypairs.html#novaclient.v1_1.keypairs.KeypairManager.list">novaclient.v1_1.keypairs.KeypairManager.list</link>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
keypairs = nova.keypairs.list()</screen>
   </sect2>

   <sect2 xml:id="security_groups_sdk">
    <title>Create and manage security groups</title>
    <para>
     To list security groups for the current project, call the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_groups.html#novaclient.v1_1.security_groups.SecurityGroupManager.list">novaclient.v_1.security_groups.SecurityGroupManager.list</link>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
security_groups = nova.security_groups.list()</screen>
    <para>
     To create a security group with a specified name and description, call
     the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_groups.html#novaclient.v1_1.security_groups.SecurityGroupManager.create">novaclient.v_1.security_groups.SecurityGroupManager.create</link>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
nova.security_groups.create(name="web", description="Web servers")</screen>
    <para>
     To delete a security group, call the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_groups.html#novaclient.v1_1.security_groups.SecurityGroupManager.delete">
     novaclient.v_1.security_groups.SecurityGroupManager.delete</link>
     method, passing either a
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_groups.html#novaclient.v1_1.security_groups.SecurityGroup">novaclient.v1_1.security_groups.SecurityGroup</link>
     object or group ID as an argument:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
group = nova.security_groups.find(name="web")
nova.security_groups.delete(group)
# The following lines would also delete the group:
# nova.security_groups.delete(group.id)
# group.delete()</screen>
   </sect2>

   <sect2 xml:id="sdk_secgroup_rules">
    <title>Create and manage security group rules</title>
    <para>
     Access the security group rules from the <literal>rules</literal>
     attribute of a
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_groups.html#novaclient.v1_1.security_groups.SecurityGroup">novaclient.v1_1.security_groups.SecurityGroup</link>
     object:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
group = nova.security_groups.find(name="web")
print group.rules</screen>
    <para>
     To add a rule, to a security group, call the
     <link xlink:href="http://docs.openstack.org/developer/python-novaclient/api/novaclient.v1_1.security_group_rules.html#novaclient.v1_1.security_group_rules.SecurityGroupRuleManager.create">novaclient.v1_1.security_group_rules.SecurityGroupRuleManager.create</link>
     method:
    </para>
<screen remap="programlisting-python">import novaclient.v1_1.client as nvclient
nova = nvclient.Client(...)
group = nova.security_groups.find(name="web")
# Add rules for ICMP, tcp/80 and tcp/443
nova.security_group_rules.create(group.id, ip_protocol="icmp",
                                 from_port=-1, to_port=-1)
nova.security_group_rules.create(group.id, ip_protocol="tcp",
                                 from_port=80, to_port=80)
nova.security_group_rules.create(group.id, ip_protocol="tcp",
                                 from_port=443, to_port=443)</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="sdk_neutron_apis">
   <title>Networking</title>

<?dbhtml stop-chunking?>

   <para>
    To use the information in this section, you should have a general
    understanding of OpenStack Networking, OpenStack Compute, and the
    integration between the two. You should also have access to a plug-in
    that implements the Networking API v2.0.
   </para>

   <sect2 xml:id="sdk_neutron_env">
    <title>Set environment variables</title>
    <para>
     Make sure that you set the relevant environment variables.
    </para>
    <para>
     As an example, see the sample shell file that sets these variables to
     get credentials:
    </para>
<screen remap="programlisting-bash">export OS_USERNAME="admin"
export OS_PASSWORD="<replaceable>password</replaceable>"
export OS_TENANT_NAME="admin"
export OS_AUTH_URL="http://<replaceable>IPADDRESS</replaceable>/v2.0"</screen>
   </sect2>

   <sect2 xml:id="sdk_neutron_get_credentials">
    <title>Get credentials</title>
    <para>
     The examples in this section use the <literal>get_credentials</literal>
     method:
    </para>
<screen remap="programlisting-python">def get_credentials():
    d = {}
    d['username'] = os.environ['OS_USERNAME']
    d['password'] = os.environ['OS_PASSWORD']
    d['auth_url'] = os.environ['OS_AUTH_URL']
    d['tenant_name'] = os.environ['OS_TENANT_NAME']
    return d</screen>
    <para>
     This code resides in the <filename>credentials.py</filename> file,
     which all samples import.
    </para>
    <para>
     Use the <literal>get_credentials()</literal> method to populate and get
     a dictionary:
    </para>
<screen remap="programlisting-python">credentials = get_credentials()</screen>
   </sect2>

   <sect2 xml:id="sdk_neutron_get_nova_credentials">
    <title>Get Nova credentials</title>
    <para>
     Few examples in this section use the
     <literal>get_nova_credentials</literal> method:
    </para>
<screen remap="programlisting-python">def get_nova_credentials():
    d = {}
    d['username'] = os.environ['OS_USERNAME']
    d['api_key'] = os.environ['OS_PASSWORD']
    d['auth_url'] = os.environ['OS_AUTH_URL']
    d['project_id'] = os.environ['OS_TENANT_NAME']
    return d</screen>
    <para>
     This code resides in the <filename>credentials.py</filename> file,
     which all samples import.
    </para>
    <para>
     Use the <literal>get_nova_credentials()</literal> method to populate
     and get a dictionary:
    </para>
<screen remap="programlisting-python">nova_credentials = get_nova_credentials()
        </screen>
   </sect2>

   <sect2 xml:id="sdk_neutron_print_values">
    <title>Print values</title>
    <para>
     The examples in this section use the <literal>print_values</literal>
     and <literal>print_values_server</literal> methods:
    </para>
<screen remap="programlisting-python">def print_values(val, type):
    if type == 'ports':
        val_list = val['ports']
    if type == 'networks':
        val_list = val['networks']
    if type == 'routers':
        val_list = val['routers']
    for p in val_list:
        for k, v in p.items():
            print("%s : %s" % (k, v))
        print('\n')


def print_values_server(val, server_id, type):
    if type == 'ports':
        val_list = val['ports']

    if type == 'networks':
        val_list = val['networks']
    for p in val_list:
        bool = False
        for k, v in p.items():
            if k == 'device_id' and v == server_id:
                bool = True
        if bool:
            for k, v in p.items():
                print("%s : %s" % (k, v))
            print('\n')</screen>
    <para>
     This code resides in the <filename>utils.py</filename> file, which all
     samples import.
    </para>
   </sect2>

   <sect2 xml:id="sdk_neutron_create_network">
    <title>Create network</title>
    <para>
     The following program creates a network:
    </para>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials

network_name = 'sample_network'
credentials = get_credentials()
neutron = client.Client(**credentials)
try:
    body_sample = {'network': {'name': network_name,
                   'admin_state_up': True}}

    netw = neutron.create_network(body=body_sample)
    net_dict = netw['network']
    network_id = net_dict['id']
    print('Network %s created' % network_id)

    body_create_subnet = {'subnets': [{'cidr': '192.168.199.0/24',
                          'ip_version': 4, 'network_id': network_id}]}

    subnet = neutron.create_subnet(body=body_create_subnet)
    print('Created subnet %s' % subnet)
finally:
    print("Execution completed")</screen>
   </sect2>

   <sect2 xml:id="sdk_neutron_list_networks">
    <title>List networks</title>
    <para>
     The following program lists networks:
    </para>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values

credentials = get_credentials()
neutron = client.Client(**credentials)
netw = neutron.list_networks()

print_values(netw, 'networks')</screen>
    <para>
     For <literal>print_values</literal> see
     <xref linkend="sdk_neutron_print_values"/>.
    </para>
   </sect2>

   <sect2 xml:id="sdk_neutron_create_port">
    <title>Create ports</title>
    <para>
     The following program creates a port:
    </para>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
import novaclient.v1_1.client as nvclient
from credentials import get_credentials
from credentials import get_nova_credentials

credentials = get_nova_credentials()
nova_client = nvclient.Client(**credentials)

# Replace with server_id and network_id from your environment

server_id = '9a52795a-a70d-49a8-a5d0-5b38d78bd12d'
network_id = 'ce5d204a-93f5-43ef-bd89-3ab99ad09a9a'
server_detail = nova_client.servers.get(server_id)
print(server_detail.id)

if server_detail != None:
    credentials = get_credentials()
    neutron = client.Client(**credentials)

    body_value = {
                     "port": {
                             "admin_state_up": True,
                             "device_id": server_id,
                             "name": "port1",
                             "network_id": network_id
                      }
                 }
    response = neutron.create_port(body=body_value)
    print(response)</screen>
    <para>
     For <literal>get_nova_credentials</literal> see
     <xref linkend="sdk_neutron_get_nova_credentials"/>.
    </para>
    <para>
     For <literal>get_credentials</literal> see
     <xref linkend="sdk_neutron_get_credentials"/>.
    </para>
   </sect2>

   <sect2 xml:id="sdk_neutron_list_ports">
    <title>List ports</title>
    <para>
     The following program lists ports:
    </para>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values

credentials = get_credentials()
neutron = client.Client(**credentials)
ports = neutron.list_ports()
print_values(ports, 'ports')</screen>
    <para>
     For <literal>get_credentials</literal> see
     <xref linkend="sdk_neutron_get_credentials"/>.
    </para>
    <para>
     For <literal>print_values</literal> see
     <xref linkend="sdk_neutron_print_values"/>.
    </para>
   </sect2>

   <sect2 xml:id="sdk_neutron_list_server_ports">
    <title>List server ports</title>
    <para>
     The following program lists the ports for a server:
    </para>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
import novaclient.v1_1.client as nvclient
from credentials import get_credentials
from credentials import get_nova_credentials
from utils import print_values_server

credentials = get_nova_credentials()
nova_client = nvclient.Client(**credentials)

# change these values according to your environment

server_id = '9a52795a-a70d-49a8-a5d0-5b38d78bd12d'
network_id = 'ce5d204a-93f5-43ef-bd89-3ab99ad09a9a'
server_detail = nova_client.servers.get(server_id)
print(server_detail.id)

if server_detail is not None:
    credentials = get_credentials()
    neutron = client.Client(**credentials)
    ports = neutron.list_ports()

    print_values_server(ports, server_id, 'ports')
    body_value = {'port': {
        'admin_state_up': True,
        'device_id': server_id,
        'name': 'port1',
        'network_id': network_id,
        }}

    response = neutron.create_port(body=body_value)
    print(response)</screen>
   </sect2>

   <sect2 xml:id="create-router-add-port-to-subnet">
    <title>Create router and add port to subnet</title>
    <para>
     This example queries OpenStack Networking to create a router and add a
     port to a subnet.
    </para>
    <procedure>
     <title>To create a router and add a port to a subnet</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from neutronclient.v2_0 import client
import novaclient.v1_1.client as nvclient
from credentials import get_credentials
from credentials import get_nova_credentials
from utils import print_values_server</screen>
     </step>
     <step>
      <para>
       Get Nova Credentials. See
       <xref linkend="sdk_neutron_get_nova_credentials"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = nvclient.Client(**credentials)</screen>
     </step>
     <step>
      <para>
       Create a router and add a port to the subnet:
      </para>
<screen remap="programlisting-python"># Replace with network_id from your environment

network_id = '81bf592a-9e3f-4f84-a839-ae87df188dc1'

credentials = get_credentials()
neutron = client.Client(**credentials)
neutron.format = json
request = {'router': {'name': 'router name',
                      'admin_state_up': True}}

router = neutron.create_router(request)
router_id = router['router']['id']
# for example: '72cf1682-60a8-4890-b0ed-6bad7d9f5466'
router = neutron.show_router(router_id)
print(router)
body_value = {'port': {
    'admin_state_up': True,
    'device_id': router_id,
    'name': 'port1',
    'network_id': network_id,
    }}

response = neutron.create_port(body=body_value)
print(response)
print("Execution Completed")</screen>
     </step>
    </procedure>
    <example>
     <title>Create router: complete code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
import novaclient.v1_1.client as nvclient
from credentials import get_credentials
from credentials import get_nova_credentials
from utils import print_values_server

credentials = get_nova_credentials()
nova_client = nvclient.Client(**credentials)

# Replace with network_id from your environment

network_id = '81bf592a-9e3f-4f84-a839-ae87df188dc1'
try:
    credentials = get_credentials()
    neutron = client.Client(**credentials)
    neutron.format = 'json'
    request = {'router': {'name': 'router name',
                          'admin_state_up': True}}
    router = neutron.create_router(request)
    router_id = router['router']['id']
    # for example: '72cf1682-60a8-4890-b0ed-6bad7d9f5466'
    router = neutron.show_router(router_id)
    print(router)
    body_value = {'port': {
        'admin_state_up': True,
        'device_id': router_id,
        'name': 'port1',
        'network_id': network_id,
        }}

    response = neutron.create_port(body=body_value)
    print(response)
finally:
    print("Execution completed")</screen>
    </example>
   </sect2>

   <sect2 xml:id="delete-network">
    <title>Delete a network</title>
    <para>
     This example queries OpenStack Networking to delete a network.
    </para>
    <procedure>
     <title>To delete a network</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from neutronclient.v2_0 import client
from credentials import get_credentials</screen>
     </step>
     <step>
      <para>
       Get credentials. See <xref linkend="sdk_neutron_get_credentials"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>neutron</literal> client object by using the
       <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">neutron = client.Client(**credentials)</screen>
     </step>
     <step>
      <para>
       Delete the network:
      </para>
<screen remap="programlisting-python">body_sample = {'network': {'name': network_name,
               'admin_state_up': True}}

netw = neutron.create_network(body=body_sample)
net_dict = netw['network']
network_id = net_dict['id']
print('Network %s created' % network_id)

body_create_subnet = {'subnets': [{'cidr': '192.168.199.0/24',
                      'ip_version': 4, 'network_id': network_id}]}

subnet = neutron.create_subnet(body=body_create_subnet)
print('Created subnet %s' % subnet)

neutron.delete_network(network_id)
print('Deleted Network %s' % network_id)

print("Execution completed")</screen>
     </step>
    </procedure>
    <example>
     <title>Delete network: complete code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials

network_name = 'temp_network'
credentials = get_credentials()
neutron = client.Client(**credentials)
try:
    body_sample = {'network': {'name': network_name,
                   'admin_state_up': True}}

    netw = neutron.create_network(body=body_sample)
    net_dict = netw['network']
    network_id = net_dict['id']
    print('Network %s created' % network_id)

    body_create_subnet = {'subnets': [{'cidr': '192.168.199.0/24',
                          'ip_version': 4, 'network_id': network_id}]}

    subnet = neutron.create_subnet(body=body_create_subnet)
    print('Created subnet %s' % subnet)

    neutron.delete_network(network_id)
    print('Deleted Network %s' % network_id)
finally:
    print("Execution Completed")</screen>
    </example>
   </sect2>

   <sect2 xml:id="list_routers">
    <title>List routers</title>
    <para>
     This example queries OpenStack Networking to list all routers.
    </para>
    <procedure>
     <title>To list routers</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values</screen>
     </step>
     <step>
      <para>
       Get credentials. See <xref linkend="sdk_neutron_get_credentials"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>neutron</literal> client object by using the
       <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">neutron = client.Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List the routers
      </para>
<screen remap="programlisting-python">routers_list = neutron.list_routers(retrieve_all=True)
print_values(routers_list, 'routers')
print("Execution completed")</screen>
      <para>
       For <literal>print_values</literal> see
       <xref linkend="sdk_neutron_print_values"/>.
      </para>
     </step>
    </procedure>
    <example>
     <title>List routers: complete code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values

try:
    credentials = get_credentials()
    neutron = client.Client(**credentials)
    routers_list = neutron.list_routers(retrieve_all=True)
    print_values(routers_list, 'routers')
finally:
    print("Execution completed")</screen>
    </example>
   </sect2>

   <sect2 xml:id="list_security_groups">
    <title>List security groups</title>
    <para>
     This example queries OpenStack Networking to list security groups.
    </para>
    <procedure>
     <title>To list security groups</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values</screen>
     </step>
     <step>
      <para>
       Get credentials. See <xref linkend="sdk_neutron_get_credentials"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>neutron</literal> client object by using the
       <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">neutron = client.Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List Security groups
      </para>
<screen remap="programlisting-python">sg = neutron.list_security_groups()
print(sg)</screen>
     </step>
    </procedure>
    <example>
     <title>List security groups: complete code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values

credentials = get_credentials()
neutron = client.Client(**credentials)
sg = neutron.list_security_groups()
print(sg)</screen>
    </example>
    <note>
     <para>
      OpenStack Networking security groups are case-sensitive while the
      <systemitem class="service">nova-network</systemitem> security groups
      are case-insensitive.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="list_subnets">
    <title>List subnets</title>
    <para>
     This example queries OpenStack Networking to list subnets.
    </para>
    <procedure>
     <title>To list subnets</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values</screen>
     </step>
     <step>
      <para>
       Get credentials. See <xref linkend="sdk_neutron_get_credentials"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>neutron</literal> client object by using the
       <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">neutron = client.Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List subnets:
      </para>
<screen remap="programlisting-python">subnets = neutron.list_subnets()
print(subnets)</screen>
     </step>
    </procedure>
    <example>
     <title>List subnets: complete code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from neutronclient.v2_0 import client
from credentials import get_credentials
from utils import print_values

credentials = get_credentials()
neutron = client.Client(**credentials)
subnets = neutron.list_subnets()
print(subnets)</screen>
    </example>
   </sect2>
  </sect1>
  <sect1 xml:id="sdk_compute_apis">
   <title>Compute</title>

<?dbhtml stop-chunking?>

   <para>
    To use the information in this section, you must be familiar with
    OpenStack Compute.
   </para>

   <sect2 xml:id="sdk_compute_env">
    <title>Set environment variables</title>
    <para>
     To set up environmental variables and authenticate against Compute API
     endpoints, see <xref linkend="sdk_auth"/>.
    </para>
   </sect2>

   <sect2 xml:id="sdk_compute_get_openstack_credentials_v2">
    <title>Get OpenStack credentials (API v2)</title>
    <para>
     These example use the <literal>get_nova_credentials_v2</literal>
     method:
    </para>
<screen remap="programlisting-python">def get_nova_credentials_v2():
    d = {}
    d['version'] = '2'
    d['username'] = os.environ['OS_USERNAME']
    d['api_key'] = os.environ['OS_PASSWORD']
    d['auth_url'] = os.environ['OS_AUTH_URL']
    d['project_id'] = os.environ['OS_TENANT_NAME']
    return d</screen>
    <para>
     This code resides in the <filename>credentials.py</filename> file,
     which all samples import.
    </para>
    <para>
     Use the <literal>get_nova_credentials_v2()</literal> method to populate
     and get a dictionary:
    </para>
<screen remap="programlisting-python">credentials = get_nova_credentials_v2()</screen>
   </sect2>

   <sect2 xml:id="sdk_compute_list_servers">
    <title>List servers (API v2)</title>
    <para>
     The following program lists servers by using the Compute API v2.
    </para>
    <procedure>
     <title>To list servers</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from credentials import get_nova_credentials_v2
from novaclient.client import Client</screen>
     </step>
     <step>
      <para>
       Get Nova credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List servers by calling <literal>servers.list</literal> on
       <literal>nova_client</literal> object:
      </para>
<screen remap="programlisting-python">print(nova_client.servers.list())</screen>
     </step>
    </procedure>
    <example>
     <title>List servers code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from credentials import get_nova_credentials_v2
from novaclient.client import Client

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)

print(nova_client.servers.list())</screen>
    </example>
   </sect2>

   <sect2 xml:id="sdk_compute_create_server_v2">
    <title>Create server (API v2)</title>
    <para>
     The following program creates a server (VM) by using the Compute API
     v2.
    </para>
    <procedure>
     <title>To create a server</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">import time
from credentials import get_nova_credentials_v2
from novaclient.client import Client</screen>
     </step>
     <step>
      <para>
       Get OpenStack credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       Get the flavor and image to use to create a server. This code uses
       the <literal>cirros</literal> image, the <literal>m1.tiny</literal>
       flavor, and the <literal>private</literal> network:
      </para>
<screen remap="programlisting-python">image = nova_client.images.find(name="cirros")
flavor = nova_client.flavors.find(name="m1.tiny")
net = nova_client.networks.find(label="private")</screen>
     </step>
     <step>
      <para>
       To create the server, use the network, image, and flavor:
      </para>
<screen remap="programlisting-python">nics = [{'net-id': net.id}]
instance = nova_client.servers.create(name="vm2", image=image,
                                      flavor=flavor, key_name="keypair-1", nics=nics)</screen>
     </step>
     <step>
      <para>
       Sleep for five seconds and determine whether the server/vm was
       created by calling <literal>nova_client.servers.list()</literal>:
      </para>
<screen remap="programlisting-python">print("Sleeping for 5s after create command")
time.sleep(5)
print("List of VMs")
print(nova_client.servers.list())</screen>
     </step>
    </procedure>
    <example>
     <title>Create server code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
import time
from credentials import get_nova_credentials_v2
from novaclient.client import Client

try:
    credentials = get_nova_credentials_v2()
    nova_client = Client(**credentials)

    image = nova_client.images.find(name="cirros")
    flavor = nova_client.flavors.find(name="m1.tiny")
    net = nova_client.networks.find(label="private")
    nics = [{'net-id': net.id}]
    instance = nova_client.servers.create(name="vm2", image=image,
                                      flavor=flavor, key_name="keypair-1", nics=nics)
    print("Sleeping for 5s after create command")
    time.sleep(5)
    print("List of VMs")
    print(nova_client.servers.list())
finally:
    print("Execution Completed")</screen>
    </example>
   </sect2>

   <sect2 xml:id="sdk_compute_delete_server_v2">
    <title>Delete server (API v2)</title>
    <para>
     The following program deletes a server (VM) by using the Compute API
     v2.
    </para>
    <procedure>
     <title>To delete a server</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">import time
from credentials import get_nova_credentials_v2
from novaclient.client import Client</screen>
     </step>
     <step>
      <para>
       Get Nova credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       Determine whether the <literal>vm1</literal> server exists:
      </para>
      <substeps performance="required">
       <step>
        <para>
         List servers: <literal>servers_list</literal>.
        </para>
       </step>
       <step>
        <para>
         Iterate over <literal>servers_list</literal> and compare name with
         <literal>vm1</literal>.
        </para>
       </step>
       <step>
        <para>
         If true, set the variable name <literal>server_exists</literal> to
         <literal>True</literal> and break from the for loop:
        </para>
<screen remap="programlisting-python">servers_list = nova_client.servers.list()
server_del = "vm1"
server_exists = False

for s in servers_list:
    if s.name == server_del:
        print("This server %s exists" % server_del)
        server_exists = True
        break</screen>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       If the server exists, run the <literal>delete</literal> method of the
       <literal>nova_client.servers</literal> object:
      </para>
<screen remap="programlisting-python">nova_client.servers.delete(s)</screen>
     </step>
    </procedure>
    <example>
     <title>Delete server code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python
from credentials import get_nova_credentials_v2
from novaclient.client import Client

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)

servers_list = nova_client.servers.list()
server_del = "vm1"
server_exists = False

for s in servers_list:
    if s.name == server_del:
        print("This server %s exists" % server_del)
        server_exists = True
        break
if not server_exists:
    print("server %s does not exist" % server_del)
else:
    print("deleting server..........")
    nova_client.servers.delete(s)
    print("server %s deleted" % server_del)</screen>
    </example>
   </sect2>

   <sect2 xml:id="sdk_update_server_v2">
    <title>Update server (API v2)</title>
    <para>
     The following program updates the name of a server (VM) by using the
     Compute API v2.
    </para>
    <procedure>
     <title>To update a server</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_server</screen>
      <para>
       <literal>print_server</literal> is a method defined in
       <filename>utils.py</filename> and prints the server details as shown
       in the code listing below:
      </para>
<screen remap="programlisting-python">def print_server(server):
    print("-"*35)
    print("server id: %s" % server.id)
    print("server name: %s" % server.name)
    print("server image: %s" % server.image)
    print("server flavor: %s" % server.flavor)
    print("server key name: %s" % server.key_name)
    print("user_id: %s" % server.user_id)
    print("-"*35)</screen>
     </step>
     <step>
      <para>
       Get OpenStack Credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       Get the server instance using <literal>server_id</literal> and print
       the details by calling <literal>print_server</literal> method:
      </para>
<screen remap="programlisting-python">server_id = '99889c8d-113f-4a7e-970c-77f1916bfe14'
server = nova_client.servers.get(server_id)
n = server.name
print_server(server)</screen>
     </step>
     <step>
      <para>
       Call <literal>server.update</literal> on the server object with the
       new value for <literal>name</literal> variable:
      </para>
<screen remap="programlisting-python">server.update(name = n + '1')</screen>
     </step>
     <step>
      <para>
       Get the updated instance of the server:
      </para>
<screen remap="programlisting-python">server_updated = nova_client.servers.get(server_id)</screen>
     </step>
     <step>
      <para>
       Call <literal>print_server</literal> again to check the update server
       details:
      </para>
<screen remap="programlisting-python">print_server(server_updated)</screen>
     </step>
    </procedure>
    <example>
     <title>Update server code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python

from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_server

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)

# Change the server_id specific to your environment

server_id = '99889c8d-113f-4a7e-970c-77f1916bfe14'
server = nova_client.servers.get(server_id)
n = server.name
print_server(server)

server.update(name=n +'1')
server_updated = nova_client.servers.get(server_id)
print_server(server_updated)</screen>
    </example>
   </sect2>

   <sect2 xml:id="list_flavors_v2">
    <title>List flavors (API v2)</title>
    <para>
     The following program lists flavors and their details by using the
     Compute API v2.
    </para>
    <procedure>
     <title>To list flavors</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_flavors</screen>
      <para>
       The <literal>print_flavors</literal> method is defined in
       <filename>utils.py</filename> and prints the flavor details:
      </para>
<screen remap="programlisting-python">def print_flavors(flavor_list):
    for flavor in flavor_list:
       print("-"*35)
       print("flavor id : %s" % flavor.id)
       print("flavor name : %s" % flavor.name)
    print("-"*35)</screen>
     </step>
     <step>
      <para>
       Get OpenStack credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List flavors by calling <literal>list()</literal> on
       <literal>nova_client.flavors</literal> object:
      </para>
<screen remap="programlisting-python">flavors_list =  nova_client.flavors.list()</screen>
     </step>
     <step>
      <para>
       Print the flavor details, id and name by calling
       <literal>print_flavors</literal>:
      </para>
<screen remap="programlisting-python">print_flavors(flavors_list)</screen>
     </step>
    </procedure>
    <example>
     <title>List flavors code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python

from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_flavors

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)

flavors_list = nova_client.flavors.list()
print_flavors(flavors_list)</screen>
    </example>
   </sect2>

   <sect2 xml:id="list_floating_ips_python_client">
    <title>List floating IPs (API v2)</title>
    <para>
     The following program lists the floating IPs and their details by using
     the Compute API v2.
    </para>
    <procedure>
     <title>To list floating IPs</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_values_ip</screen>
      <para>
       The <literal>print_values_ip</literal> method is defined in
       <filename>utils.py</filename> and prints the floating_ip object
       details:
      </para>
<screen remap="programlisting-python">def print_values_ip(ip_list):
    ip_dict_lisl = []
    for ip in ip_list:
        print("-"*35)
        print("fixed_ip : %s" % ip.fixed_ip)
        print("id : %s" % ip.id)
        print("instance_id : %s" % ip.instance_id)
        print("ip : %s" % ip.ip)
        print("pool : %s" % ip.pool)</screen>
     </step>
     <step>
      <para>
       Get OpenStack credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List floating IPs by calling <literal>list()</literal> on
       <literal>nova_client.floating_ips</literal> object:
      </para>
<screen remap="programlisting-python">ip_list = nova_client.floating_ips.list()</screen>
     </step>
     <step>
      <para>
       Print the floating IP object details by calling
       <literal>print_values_ip</literal>:
      </para>
<screen remap="programlisting-python">print_values_ip(ip_list)</screen>
     </step>
    </procedure>
    <example>
     <title>List floating IPs code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python

from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_values_ip

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)
ip_list = nova_client.floating_ips.list()
print_values_ip(ip_list)</screen>
    </example>
   </sect2>

   <sect2 xml:id="list_hosts_v2">
    <title>List hosts (API v2)</title>
    <para>
     The following program lists the hosts by using the Compute API v2.
    </para>
    <procedure>
     <title>To list hosts</title>
     <step>
      <para>
       Import the following modules:
      </para>
<screen remap="programlisting-python">from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_hosts</screen>
      <para>
       The <literal>print_hosts</literal> method is defined in
       <filename>utils.py</filename> and prints the host object details:
      </para>
<screen remap="programlisting-python">def print_hosts(host_list):
    for host in host_list:
       print("-"*35)
       print("host_name : %s" % host.host_name)
       print("service : %s" % host.service)
       print("zone : %s" % host.zone)
    print("-"*35)</screen>
     </step>
     <step>
      <para>
       Get OpenStack credentials. See
       <xref linkend="sdk_compute_get_openstack_credentials_v2"/>.
      </para>
     </step>
     <step>
      <para>
       Instantiate the <literal>nova_client</literal> client object by using
       the <literal>credentials</literal> dictionary object:
      </para>
<screen remap="programlisting-python">nova_client = Client(**credentials)</screen>
     </step>
     <step>
      <para>
       List hosts by calling <literal>list()</literal> on
       <literal>nova_client.hosts</literal> object:
      </para>
<screen remap="programlisting-python">host_list = nova_client.hosts.list()</screen>
     </step>
     <step>
      <para>
       Print the host object details by calling
       <literal>print_hosts(host_list)</literal>:
      </para>
<screen remap="programlisting-python">print_hosts(host_list)</screen>
     </step>
    </procedure>
    <example>
     <title>List hosts code listing</title>
<screen remap="programlisting-python">#!/usr/bin/env python

from credentials import get_nova_credentials_v2
from novaclient.client import Client
from utils import print_hosts

credentials = get_nova_credentials_v2()
nova_client = Client(**credentials)
host_list = nova_client.hosts.list()

print_hosts(host_list)</screen>
    </example>
   </sect2>
  </sect1>
 </chapter>
 <appendix xml:id="app_cheat_sheet">
<?dbhtml stop-chunking?>
  <title>OpenStack command-line interface cheat sheet</title>
  <para>
   The following tables give a quick reference of the most used command-line
   commands.
  </para>
  <table width="100%">
   <title>Identity (keystone)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        List all users
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> keystone user-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List Identity service catalog
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> keystone catalog</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List all services in service catalog
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> keystone service-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create new user
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> keystone user-create --name <replaceable>NAME</replaceable> --tenant-id <replaceable>TENANT</replaceable> \
  --pass <replaceable>PASSWORD</replaceable> --email <replaceable>EMAIL</replaceable> --enabled <replaceable>BOOL</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create new tenant
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> keystone tenant-create --name <replaceable>NAME</replaceable> --description "<replaceable>DESCRIPTION</replaceable>" \
  --enabled BOOL</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <table width="100%">
   <title>Image Service (glance)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        List images you can access
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Delete specified image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-delete <replaceable>IMAGE</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Describe a specific image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-show <replaceable>IMAGE</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Update image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-update <replaceable>IMAGE</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Manage images
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Kernel image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-create --name "cirros-threepart-kernel" \
  --disk-format aki --container-format aki --is-public False \
  --file ~/images/cirros-0.3.1~pre4-x86_64-vmlinuz</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        RAM image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-create --name "cirros-threepart-ramdisk" \
  --disk-format ari --container-format ari --is-public False \
  --file ~/images/cirros-0.3.1~pre4-x86_64-initrd</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Three-part image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-create --name "cirros-threepart" --disk-format ami \
  --container-format ami --is-public False \
  --property kernel_id=$KID-property ramdisk_id=$RID \
  --file ~/images/cirros-0.3.1~pre4-x86_64-blank.img</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Register raw image
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> glance image-create --name "cirros-qcow2" --disk-format qcow2 \
  --container-format bare --is-public False \
  --file ~/images/cirros-0.3.1~pre4-x86_64-disk.img</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <table width="100%">
   <title>Compute (nova)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        List instances, notice status of instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List images
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova image-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List flavors
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova flavor-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Boot an instance using flavor and image names (if names are unique)
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova boot --image <replaceable>IMAGE</replaceable> --flavor <replaceable>FLAVOR</replaceable><replaceable>INSTANCE_NAME</replaceable>
<prompt role="user">$</prompt> nova boot --image cirros-0.3.1-x86_64-uec --flavor m1.tiny \
  MyFirstInstance</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Login to instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> ip netns
<prompt role="user">#</prompt> ip netns exec <replaceable>NETNS_NAME</replaceable> ssh <replaceable>USER</replaceable>@<replaceable>SERVER</replaceable>
<prompt role="user">#</prompt> ip netns exec qdhcp-6021a3b4-8587-4f9c-8064-0103885dfba2 \
  ssh cirros@10.0.0.2</screen>
       <para>
        Note, in CirrOS the password for user <literal>cirros</literal> is
        "cubswin:)" without the quotes.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Show details of instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova show <replaceable>NAME</replaceable>
<prompt role="user">$</prompt> nova show MyFirstInstance</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        View console log of instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova console-log MyFirstInstance</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Set metadata on an instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova meta volumeTwoImage set newmeta='my meta data'</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create an instance snapshot
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova image-create volumeTwoImage snapshotOfVolumeImage
<prompt role="user">$</prompt> nova image-show snapshotOfVolumeImage</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Pause, suspend, stop, rescue, resize, rebuild, reboot an instance
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Pause
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova pause <replaceable>NAME</replaceable>
<prompt role="user">$</prompt> nova pause volumeTwoImage</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Unpause
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova unpause <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Suspend
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova suspend <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Unsuspend
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova resume <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Stop
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova stop <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Start
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova start <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Rescue
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova rescue <replaceable>NAME</replaceable>
<prompt role="user">$</prompt> nova rescue <replaceable>NAME</replaceable> --rescue_image_ref <replaceable>RESCUE_IMAGE</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Resize
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova resize <replaceable>NAME</replaceable><replaceable>FLAVOR</replaceable>
<prompt role="user">$</prompt> nova resize my-pem-server m1.small
<prompt role="user">$</prompt> nova resize-confirm my-pem-server1</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Rebuild
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova rebuild <replaceable>NAME</replaceable><replaceable>IMAGE</replaceable>
<prompt role="user">$</prompt> nova rebuild newtinny cirros-qcow2</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Reboot
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova reboot <replaceable>NAME</replaceable>
<prompt role="user">$</prompt> nova reboot newtinny</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Inject user data and files into an instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova boot --user-data <replaceable>FILE</replaceable><replaceable>INSTANCE</replaceable>
<prompt role="user">$</prompt> nova boot --user-data userdata.txt --image cirros-qcow2 \
  --flavor m1.tiny MyUserdataInstance2</screen>
       <para>
        To validate that the file is there, ssh into the instance, and look
        in <filename>/var/lib/cloud</filename> for the file.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Inject a keypair into an instance and access the instance with that
        keypair
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create keypair
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova keypair-add test &gt; test.pem
<prompt role="user">$</prompt> chmod 600 test.pem</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Boot
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova boot --image cirros-0.3.0-x86_64 --flavor m1.small \
  --key_name test MyFirstServer</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Use ssh to connect to the instance
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> ip netns exec qdhcp-98f09f1e-64c4-4301-a897-5067ee6d544f \
  ssh -i test.pem cirros@10.0.0.4</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Manage security groups
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Add rules to default security group allowing ping and SSH between
        instances in the default security group
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova secgroup-add-group-rule default default icmp -1 -1
<prompt role="user">$</prompt> nova secgroup-add-group-rule default default tcp 22 22</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <table width="100%">
   <title>Networking (neutron)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Create network
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> neutron net-create <replaceable>NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create a subnet
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> neutron subnet-create <replaceable>NETWORK_NAME</replaceable><replaceable>CIDR</replaceable>
<prompt role="user">$</prompt> neutron subnet-create my-network 10.0.0.0/29</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List network and subnet
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> neutron net-list
<prompt role="user">$</prompt> neutron subnet-list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Examine details of network and subnet
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> neutron net-show <replaceable>ID_OR_NAME_OF_NETWORK</replaceable>
<prompt role="user">$</prompt> neutron subnet-show <replaceable>ID_OR_NAME_OF_NETWORK</replaceable></screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <table width="100%">
   <title>Block Storage (cinder)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Manage volumes and volume snapshots
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create a new volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> cinder create <replaceable>SIZE_IN_GB</replaceable> --display-name <replaceable>NAME</replaceable>
<prompt role="user">$</prompt> cinder create 1 --display-name MyFirstVolume</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Boot an instance and attach to volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova boot --image cirros-qcow2 --flavor m1.tiny MyVolumeInstance</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List volumes, notice status of volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> cinder list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Attach volume to instance after instance is active, and volume is
        available
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> nova volume-attach <replaceable>INSTANCE_ID</replaceable><replaceable>VOLUME_ID</replaceable> auto
<prompt role="user">$</prompt> nova volume-attach MyVolumeInstance /dev/vdb auto</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Manage volumes after login into the instance
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List storage devices
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> fdisk -l</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Make filesystem on volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> mkfs.ext3 /dev/vdb</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create a mountpoint
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> mkdir /myspace</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Mount the volume at the mountpoint
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> mount /dev/vdb /myspace</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create a file on the volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> touch /myspace/helloworld.txt
<prompt role="user">#</prompt> ls /myspace</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Unmount the volume
       </para>
      </entry>
      <entry>
<screen><prompt role="user">#</prompt> umount /myspace</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <table width="100%">
   <title>Object Storage (swift)</title>
   <tgroup cols="2">
    <colspec colwidth="30%"/>
    <colspec colwidth="70%"/>
    <thead>
     <row>
      <entry>
       <para>
        Description
       </para>
      </entry>
      <entry>
       <para>
        Command
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Display information for the account, container, or object
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift stat
<prompt role="user">$</prompt> swift stat <replaceable>ACCOUNT</replaceable>
<prompt role="user">$</prompt> swift stat <replaceable>CONTAINER</replaceable>
<prompt role="user">$</prompt> swift stat <replaceable>OBJECT</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List containers
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift list</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Create a container
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift post <replaceable>CONTAINER_NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Upload file to a container
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift upload <replaceable>CONTAINER_NAME</replaceable><replaceable>FILE_NAME</replaceable>
<prompt role="user">$</prompt> swift upload mycontainer myfile.txt</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        List objects in container
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift list container</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Download object from container
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift download <replaceable>CONTAINER_NAME</replaceable><replaceable>FILE_NAME</replaceable></screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Upload with chunks, for large file
       </para>
      </entry>
      <entry>
<screen><prompt role="user">$</prompt> swift upload -S <replaceable>SIZE</replaceable><replaceable>CONTAINER_NAME</replaceable><replaceable>FILE_NAME</replaceable>
<prompt role="user">$</prompt> swift upload -S 64 container largeFile</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </appendix>
 <appendix xml:id="hot-guide" xml:base="hot/index.xml">
<!-- WARNING: This file is automatically generated. Do not edit it. -->
  <title>HOT guide</title>
<!--Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.-->
  <sect1 xml:id="hello-world">
<!--WARNING: This file is automatically generated. Do not edit it.-->

   <title>Writing a hello world HOT template</title>

   <para>
    HOT is a new template format meant to replace the
    CloudFormation-compatible format (CFN) as the native format supported by
    the Orchestration module over time. This guide is targeted towards
    template authors and explains how to write HOT templates based on
    examples. A detailed specification of HOT can be found at
    <xref linkend="hot-spec"/>.
   </para>

   <para>
    This section gives an introduction on how to write HOT templates,
    starting from very basic steps and then going into more and more detail
    by means of examples.
   </para>

   <sect2 xml:id="a-most-basic-template">
<?dbhtml stop-chunking?>
    <title>A most basic template</title>
    <para>
     The most basic template you can think of contains only a single
     resource definition using only predefined properties. For example, the
     template below could be used to deploy a single compute instance:
    </para>
<screen remap="programlisting-yaml">heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: my_key
      image: ubuntu-trusty-x86_64
      flavor: m1.small</screen>
    <para>
     Each HOT template has to include the
     <literal>heat_template_version</literal> key with value
     <literal>2013-05-23</literal>, the current HOT version. While the
     <literal>description</literal> key is optional, it is good practice to
     include some useful text that describes what users can do with the
     template. In case you want to provide a longer description that does
     not fit on a single line, you can provide multi-line text in YAML, for
     example:
    </para>
<screen remap="programlisting-yaml">description: &gt;
  This is how you can provide a longer description
  of your template that goes over several lines.</screen>
    <para>
     The <literal>resources</literal> section is required and must contain
     at least one resource definition. In the above example, a compute
     instance is defined with fixed values for the
     <literal>key_name</literal>, <literal>image</literal> and
     <literal>flavor</literal> properties.
    </para>
    <note>
     <para>
      All the defined elements (key pair, image, flavor) have to exist in
      the OpenStack environment where the template is used.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="input-parameters">
<?dbhtml stop-chunking?>
    <title>Input parameters</title>
    <para>
     Input parameters defined in the <literal>parameters</literal> section
     of a template allow users to customize a template during deployment.
     For example, this allows for providing custom key pair names or image
     IDs to be used for a deployment. From a template author's perspective,
     this helps to make a template more easily reusable by avoiding
     hardcoded assumptions.
    </para>
    <para>
     The following example extends the previous template to provide
     parameters for the key pair, image and flavor properties of the
     resource:
    </para>
<screen remap="programlisting-yaml">heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: flavor }</screen>
    <para>
     Values for the three parameters must be defined by the template user
     during the deployment of a stack. The <literal>get_param</literal>
     intrinsic function retrieves a user-specified value for a given
     parameter and uses this value for the associated resource property.
    </para>
    <para>
     For more information about intrinsic functions, see
     <xref linkend="hot-spec-intrinsic-functions"/>.
    </para>
    <sect3 xml:id="providing-default-values">
     <title>Providing default values</title>
     <para>
      You can provide default values for parameters. If a user doesn't
      define a value for a parameter, the default value is used during the
      stack deployment. The following example defines a default value
      <literal>m1.small</literal> for the <literal>flavor</literal>
      property:
     </para>
<screen remap="programlisting-yaml">parameters:
  flavor:
    type: string
    label: Instance Type
    description: Flavor to be used
    default: m1.small</screen>
     <note>
      <para>
       If a template doesn't define a default value for a parameter, then
       the user must define the value, otherwise the stack creation will
       fail.
      </para>
     </note>
    </sect3>
    <sect3 xml:id="hidding-parameters-values">
     <title>Hiding parameters values</title>
     <para>
      The values that a user provides when deploying a stack are available
      in the stack details and can be accessed by any user in the same
      tenant. To hide the value of a parameter, use the
      <literal>hidden</literal> boolean attribute of the parameter:
     </para>
<screen remap="programlisting-yaml">parameters:
  database_password:
    type: string
    label: Database Password
    description: Password to be used for database
    hidden: true</screen>
    </sect3>
    <sect3 xml:id="restricting-user-input">
     <title>Restricting user input</title>
     <para>
      You can restrict the values of an input parameter to make sure that
      the user defines valid data for this parameter. The
      <literal>constraints</literal> property of an input parameter defines
      a list of constraints to apply for the parameter. The following
      example restricts the <literal>flavor</literal> parameter to a list of
      three possible values:
     </para>
<screen remap="programlisting-yaml">parameters:
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.medium, m1.large or m1.xlarge.</screen>
     <para>
      The following example defines multiple constraints for a password
      definition:
     </para>
<screen remap="programlisting-yaml">parameters:
  database_password:
    type: string
    label: Database Password
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character.</screen>
     <para>
      The list of supported constraints is available in the
      <xref linkend="hot-spec-parameters-constraints"/> section.
     </para>
     <note>
      <para>
       You can define multiple constraints of the same type. Especially in
       the case of allowed patterns this not only allows for keeping regular
       expressions simple and maintainable, but also for keeping error
       messages to be presented to users precise.
      </para>
     </note>
    </sect3>
   </sect2>

   <sect2 xml:id="template-outputs">
<?dbhtml stop-chunking?>
    <title>Template outputs</title>
    <para>
     In addition to template customization through input parameters, you can
     provide information about the resources created during the stack
     deployment to the users in the <literal>outputs</literal> section of a
     template. In the following example the output section provides the IP
     address of the <literal>my_instance</literal> resource:
    </para>
<screen remap="programlisting-yaml">outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, first_address] }</screen>
    <note>
     <para>
      Output values are typically resolved using intrinsic function such as
      the <literal>get_attr</literal>. See
      <xref linkend="hot-spec-intrinsic-functions"/> for more information
      about intrinsic functions..
     </para>
    </note>
    <para>
     See <xref linkend="hot-spec-outputs"/> for more information about the
     <literal>outputs</literal> section.
    </para>
   </sect2>
  </sect1>
<!--Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.-->
  <sect1 xml:id="hot-spec">
   <title>Heat Orchestration Template (HOT) specification</title>

   <para>
    <remark role="fixme">Add a short description</remark>
   </para>

<!--WARNING: This file is automatically generated. Do not edit it.-->

   <sect2 xml:id="template-structure">
<?dbhtml stop-chunking?>
    <title>Template structure</title>
    <para>
     HOT templates are defined in YAML and use the following structure:
    </para>
<screen remap="programlisting-yaml">heat_template_version: 2013-05-23

description:
  # description of the template

parameter_groups:
  # declaration of input parameter groups and order

parameters:
  # declaration of input parameters

resources:
  # declaration of template resources

outputs:
  # declaration of output parameters</screen>
    <variablelist>
     <varlistentry>
      <term>heat_template_version</term>
      <listitem>
       <para>
        This key with value <literal>2013-05-23</literal> (or a later date)
        indicates that the YAML document is a HOT template of the specified
        version.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>description</term>
      <listitem>
       <para>
        This optional key gives a description of the template, or the
        workload that can be deployed using the template.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>parameter_groups</term>
      <listitem>
       <para>
        This section specifies how the input parameters should be grouped
        and the order to provide the parameters in.
       </para>
       <para>
        This section is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>parameters</term>
      <listitem>
       <para>
        This section specifies input parameters that have to be provided
        when instantiating the template.
       </para>
       <para>
        This section is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>resources</term>
      <listitem>
       <para>
        This section contains the declaration of the resources of the
        template. This section with at least one resource must be defined in
        any HOT template, or the template would not really do anything when
        being instantiated.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>outputs</term>
      <listitem>
       <para>
        This section specifies output parameters available to users once the
        template has been instantiated.
       </para>
       <para>
        This section is optional.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 xml:id="hot-spec-parameter-groups">
<?dbhtml stop-chunking?>
    <title>Parameter groups section</title>
    <para>
     The <literal>parameter_groups</literal> section specifies how the input
     parameters should be grouped and the order to provide the parameters
     in. These groups are typically used to describe expected behavior for
     downstream user interfaces.
    </para>
    <para>
     These groups are specified in a list with each group containing a list
     of associated parameters. The lists are used to denote the expected
     order of the parameters. A parameter can only be included in one group.
     Use the name of the parameter to add it to a group. The parameters
     details are defined in the <literal>parameters</literal> section.
    </para>
<screen remap="programlisting-yaml">parameter_groups:
- label: &lt;human-readable label of parameter group&gt;
  description: &lt;description of the parameter group&gt;
  parameters:
  - &lt;param name&gt;
  - &lt;param name&gt;</screen>
    <variablelist>
     <varlistentry>
      <term>label</term>
      <listitem>
       <para>
        A human-readable label that defines the associated group of
        parameters.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>description</term>
      <listitem>
       <para>
        A human-readable description of the parameter group.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>parameters</term>
      <listitem>
       <para>
        A list of parameters that belong with this parameter group.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>param name</term>
      <listitem>
       <para>
        The name of a parameter defined in the <literal>parameters</literal>
        section.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 xml:id="hot-spec-parameters">
<?dbhtml stop-chunking?>
    <title>Parameters section</title>
    <para>
     The <literal>parameters</literal> section defines input parameters that
     have to be provided when instantiating the template. Such parameters
     are typically used to customize each deployment, or for binding to
     environment specifics like certain images.
    </para>
    <para>
     Each parameter is specified in a separated nested block with the name
     of the parameter defined in the first line and additional attributes
     such as a type or a default value defined as nested elements:
    </para>
<screen remap="programlisting-yaml">parameters:
  &lt;param name&gt;:
    type: &lt;string | number | json | comma_delimited_list | boolean&gt;
    label: &lt;human-readable name of the parameter&gt;
    description: &lt;description of the parameter&gt;
    default: &lt;default value for parameter&gt;
    hidden: &lt;true | false&gt;
    constraints:
      &lt;parameter constraints&gt;</screen>
    <variablelist>
     <varlistentry>
      <term>param name</term>
      <listitem>
       <para>
        The name of the parameter.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>type</term>
      <listitem>
       <para>
        The type of the parameter. Supported types are
        <literal>string</literal>, <literal>number</literal>,
        <literal>comma_delimited_list</literal>, <literal>json</literal> and
        <literal>boolean</literal>.
       </para>
       <para>
        This attribute is required.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>label</term>
      <listitem>
       <para>
        A human readable name for the parameter.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>description</term>
      <listitem>
       <para>
        A human readable description for the parameter.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>default</term>
      <listitem>
       <para>
        A default value for the parameter. This value is used if the user
        doesn't specify his own value during deployment.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>hidden</term>
      <listitem>
       <para>
        Defines whether the parameters should be hidden when a user requests
        information about a stack created from the template. This attribute
        can be used to hide passwords specified as parameters.
       </para>
       <para>
        This attribute is optional and defaults to <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>constraints</term>
      <listitem>
       <para>
        A list of constraints to apply. The constraints are validated by the
        Orchestration engine when a user deploys a stack. The stack creation
        fails if the parameter value doesn't comply to the constraints.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     The following example shows a minimalist definition of two parameters:
    </para>
<screen remap="programlisting-yaml">parameters:
  user_name:
    type: string
    label: User Name
    description: User name to be configured for the application
  port_number:
    type: number
    label: Port Number
    description: Port number to be configured for the web server</screen>
    <note>
     <para>
      The description and the label are optional, but defining these
      attributes is good practice to provide useful information about the
      role of the parameter to the user.
     </para>
    </note>
    <sect3 xml:id="hot-spec-parameters-constraints">
     <title>Parameter constraints</title>
     <para>
      The <literal>constraints</literal> block of a parameter definition
      defines additional validation constraints that apply to the value of
      the parameter. The parameter values provided by a user are validated
      against the constraints at instantiation time. The constraints are
      defined as a list with the following syntax:
     </para>
<screen remap="programlisting-yaml">constraints:
  - &lt;constraint type&gt;: &lt;constraint definition&gt;
    description: &lt;constraint description&gt;</screen>
     <variablelist>
      <varlistentry>
       <term>constraint type</term>
       <listitem>
        <para>
         Type of constraint to apply. The set of currently supported
         constraints is given below.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>constraint definition</term>
       <listitem>
        <para>
         The actual constraint, depending on the constraint type. The
         concrete syntax for each constraint type is given below.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>description</term>
       <listitem>
        <para>
         A description of the constraint. The text is presented to the user
         when the value he defines violates the constraint. If omitted, a
         default validation message is presented to the user.
        </para>
        <para>
         This attribute is optional.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example shows the definition of a string parameter with
      two constraints. Note that while the descriptions for each constraint
      are optional, it is good practice to provide concrete descriptions to
      present useful messages to the user at deployment time.
     </para>
<screen remap="programlisting-yaml">parameters:
  user_name:
    type: string
    label: User Name
    description: User name to be configured for the application
    constraints:
      - length: { min: 6, max: 8 }
        description: User name must be between 6 and 8 characters
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character</screen>
     <note>
      <para>
       While the descriptions for each constraint are optional, it is good
       practice to provide concrete descriptions so useful messages can be
       presented to the user at deployment time.
      </para>
     </note>
     <para>
      The following sections list the supported types of parameter
      constraints, along with the syntax for each type.
     </para>
     <sect4 xml:id="length">
      <title>length</title>
      <para>
       The <literal>length</literal> constraint applies to parameters of
       type <literal>string</literal>. It defines a lower and upper limit
       for the length of the string value.
      </para>
      <para>
       The syntax of the <literal>length</literal> constraint is:
      </para>
<screen remap="programlisting-yaml">length: { min: &lt;lower limit&gt;, max: &lt;upper limit&gt; }</screen>
      <para>
       It is possible to define a length constraint with only a lower limit
       or an upper limit. However, at least one of <literal>min</literal> or
       <literal>max</literal> must be specified.
      </para>
     </sect4>
     <sect4 xml:id="range">
      <title>range</title>
      <para>
       The <literal>range</literal> constraint applies to parameters of type
       <literal>number</literal>. It defines a lower and upper limit for the
       numeric value of the parameter.
      </para>
      <para>
       The syntax of the <literal>range</literal> constraint is:
      </para>
<screen remap="programlisting-yaml">range: { min: &lt;lower limit&gt;, max: &lt;upper limit&gt; }</screen>
      <para>
       It is possible to define a range constraint with only a lower limit
       or an upper limit. However, at least one of <literal>min</literal> or
       <literal>max</literal> must be specified.
      </para>
      <para>
       The minimum and maximum boundaries are included in the range. For
       example, the following range constraint would allow for all numeric
       values between 0 and 10:
      </para>
<screen remap="programlisting-yaml">range: { min: 0, max: 10 }</screen>
     </sect4>
     <sect4 xml:id="allowed-values">
      <title>allowed_values</title>
      <para>
       The <literal>allowed_values</literal> constraint applies to
       parameters of type <literal>string</literal> or
       <literal>number</literal>. It specifies a set of possible values for
       a parameter. At deployment time, the user-provided value for the
       respective parameter must match one of the elements of the list.
      </para>
      <para>
       The syntax of the <literal>allowed_values</literal> constraint is:
      </para>
<screen remap="programlisting-yaml">allowed_values: [ &lt;value&gt;, &lt;value&gt;, ... ]</screen>
      <para>
       Alternatively, the following YAML list notation can be used:
      </para>
<screen remap="programlisting-yaml">allowed_values:
  - &lt;value&gt;
  - &lt;value&gt;
  - ...</screen>
      <para>
       For example:
      </para>
<screen remap="programlisting-yaml">parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Instance type for compute instances
    constraints:
      - allowed_values:
        - m1.small
        - m1.medium
        - m1.large</screen>
     </sect4>
     <sect4 xml:id="allowed-pattern">
      <title>allowed_pattern</title>
      <para>
       The <literal>allowed_pattern</literal> constraint applies to
       parameters of type <literal>string</literal>. It specifies a regular
       expression against which a user-provided parameter value must
       evaluate at deployment.
      </para>
      <para>
       The syntax of the <literal>allowed_pattern</literal> constraint is:
      </para>
<screen remap="programlisting-yaml">allowed_pattern: &lt;regular expression&gt;</screen>
      <para>
       For example:
      </para>
<screen remap="programlisting-yaml">parameters:
  user_name:
    type: string
    label: User Name
    description: User name to be configured for the application
    constraints:
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character</screen>
     </sect4>
     <sect4 xml:id="custom-constraint">
      <title>custom_constraint</title>
      <para>
       The <literal>custom_constraint</literal> constraint adds an extra
       step of validation, generally to check that the specified resource
       exists in the backend. Custom constraints get implemented by plug-ins
       and can provide any kind of advanced constraint validation logic.
      </para>
      <para>
       The syntax of the <literal>custom_constraint</literal> constraint is:
      </para>
<screen remap="programlisting-yaml">custom_constraint: &lt;name&gt;</screen>
      <para>
       The <literal>name</literal> attribute specifies the concrete type of
       custom constraint. It corresponds to the name under which the
       respective validation plugin has been registered in the Orchestration
       engine.
      </para>
      <para>
       For example:
      </para>
<screen remap="programlisting-yaml">parameters:
  key_name
    type: string
    description: SSH key pair
    constraints:
      - custom_constraint: nova.keypair</screen>
     </sect4>
    </sect3>
    <sect3 xml:id="hot-spec-pseudo-parameters">
     <title>Pseudo Parameters</title>
     <para>
      In addition to parameters defined by a template author, the
      Orchestration module also creates two parameters for every stack that
      allow referential access to the stack's name and identifier. These
      parameters are named <literal>OS::stack_name</literal> for the stack
      name and <literal>OS::stack_id</literal> for the stack identifier.
      These values are accessible via the <literal>get_param</literal>
      intrinsic function, just like user-defined parameters.
     </para>
    </sect3>
   </sect2>

   <sect2 xml:id="hot-spec-resources">
<?dbhtml stop-chunking?>
    <title>Resources section</title>
    <para>
     The <literal>resources</literal> section defines actual resources that
     make up a stack deployed from the HOT template (for instance compute
     instances, networks, storage volumes).
    </para>
    <para>
     Each resource is defined as a separate block in the
     <literal>resources</literal> section with the following syntax:
    </para>
<screen remap="programlisting-yaml">resources:
  &lt;resource ID&gt;:
    type: &lt;resource type&gt;
    properties:
      &lt;property name&gt;: &lt;property value&gt;
    metadata:
      &lt;resource specific metadata&gt;
    depends_on: &lt;resource ID or list of ID&gt;
    update_policy: &lt;update policy&gt;
    deletion_policy: &lt;deletion policy&gt;</screen>
    <variablelist>
     <varlistentry>
      <term>resource ID</term>
      <listitem>
       <para>
        A resource ID which must be unique within the
        <literal>resources</literal> section of the template.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>type</term>
      <listitem>
       <para>
        The resource type, such as <literal>OS::Nova::Server</literal> or
        <literal>OS::Neutron::Port</literal>.
       </para>
       <para>
        This attribute is required.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>properties</term>
      <listitem>
       <para>
        A list of resource-specific properties. The property value can be
        provided in place, or via a function (see
        <link linkend="hot-spec-intrinsic-functions"><emphasis>Intrinsic
        functions</emphasis></link>).
       </para>
       <para>
        This section is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>metadata</term>
      <listitem>
       <para>
        Resource-specific metadata.
       </para>
       <para>
        This section is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>depends_on</term>
      <listitem>
       <para>
        Dependencies of the resource on one or more resources of the
        template.
       </para>
       <para>
        See
        <link linkend="hot-spec-resources-dependencies"><emphasis>Resource
        dependencies</emphasis></link> for details.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>update_policy</term>
      <listitem>
       <para>
        Update policy for the resource, in the form of a nested dictionary.
        Whether update policies are supported and what the exact semantics
        are depends on the type of the current resource.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>deletion_policy</term>
      <listitem>
       <para>
        Deletion policy for the resource. Which type of deletion policy is
        supported depends on the type of the current resource.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Depending on the type of resource, the resource block might include
     more resource specific data.
    </para>
    <para>
     All resource types that can be used in CFN templates can also be used
     in HOT templates, adapted to the YAML structure as outlined above.
    </para>
    <para>
     The following example demonstrates the definition of a simple compute
     resource with some fixed property values:
    </para>
<screen remap="programlisting-yaml">resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: F18-x86_64-cfntools</screen>
    <sect3 xml:id="hot-spec-resources-dependencies">
     <title>Resource dependencies</title>
     <para>
      The <literal>depends_on</literal> attribute of a resource defines a
      dependency between this resource and one or more other resources.
     </para>
     <para>
      If a resource depends on just one other resource, the ID of the other
      resource is specified as string of the <literal>depends_on</literal>
      attribute, as shown in the following example:
     </para>
<screen remap="programlisting-yaml">resources:
  server1:
    type: OS::Nova::Server
    depends_on: server2

  server2:
    type: OS::Nova::Server</screen>
     <para>
      If a resource depends on more than one other resources, the value of
      the <literal>depends_on</literal> attribute is specified as a list of
      resource IDs, as shown in the following example:
     </para>
<screen remap="programlisting-yaml">resources:
  server1:
    type: OS::Nova::Server
    depends_on: [ server2, server3 ]

  server2:
    type: OS::Nova::Server

  server3:
    type: OS::Nova::Server</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="hot-spec-outputs">
<?dbhtml stop-chunking?>
    <title>Outputs section</title>
    <para>
     The <literal>outputs</literal> section defines output parameters that
     should be available to the user once a stack has been created. This
     would be, for example, parameters such as IP addresses of deployed
     instances, or URLs of web applications deployed as part of a stack.
    </para>
    <para>
     Each output parameter is defined as a separate block within the outputs
     section according to the following syntax:
    </para>
<screen remap="programlisting-yaml">outputs:
  &lt;parameter name&gt;:
    description: &lt;description&gt;
    value: &lt;parameter value&gt;</screen>
    <variablelist>
     <varlistentry>
      <term>parameter name</term>
      <listitem>
       <para>
        The output parameter name, which must be unique within the
        <literal>outputs</literal> section of a template.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>description</term>
      <listitem>
       <para>
        A short description of the output parameter.
       </para>
       <para>
        This attribute is optional.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>parameter value</term>
      <listitem>
       <para>
        The value of the output parameter. This value is usually resolved by
        means of a function. See
        <link linkend="hot-spec-intrinsic-functions"><emphasis>Intrinsic
        functions</emphasis></link> for details about the functions.
       </para>
       <para>
        This attribute is required.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     The example below shows how the IP address of a compute resource can be
     defined as an output parameter:
    </para>
<screen remap="programlisting-yaml">outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, first_address] }</screen>
   </sect2>

   <sect2 xml:id="hot-spec-intrinsic-functions">
<?dbhtml stop-chunking?>
    <title>Intrinsic functions</title>
    <para>
     HOT provides a set of intrinsic functions that can be used inside
     templates to perform specific tasks, such as getting the value of a
     resource attribute at runtime. The following section describes the role
     and syntax of the intrinsic functions.
    </para>
    <sect3 xml:id="get-attr">
     <title>get_attr</title>
     <para>
      The <literal>get_attr</literal> function references an attribute of a
      resource. The attribute value is resolved at runtime using the
      resource instance created from the respective resource definition.
     </para>
     <para>
      The syntax of the <literal>get_attr</literal> function is:
     </para>
<screen remap="programlisting-yaml">get_attr:
  - &lt;resource ID&gt;
  - &lt;attribute name&gt;
  - &lt;key/index 1&gt; (optional)
  - &lt;key/index 2&gt; (optional)
  - ...</screen>
     <variablelist>
      <varlistentry>
       <term>resource ID</term>
       <listitem>
        <para>
         The resource ID for which the attribute needs to be resolved.
        </para>
        <para>
         The resource ID must exist in the <literal>resources</literal>
         section of the template.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>attribute name</term>
       <listitem>
        <para>
         The attribute name to be resolved. If the attribute returns a
         complex data structure such as a list or a map, then subsequent
         keys or indexes can be specified. These additional parameters are
         used to navigate the data structure to return the desired value.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example demonstrates how to use the
      <literal>get_param</literal> function:
     </para>
<screen remap="programlisting-yaml">resources:
  my_instance:
    type: OS::Nova::Server
    # ...

outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, first_address] }
  instance_private_ip:
    description: Private IP address of the deployed compute instance
    value: { get_attr: [my_instance, networks, private, 0] }</screen>
     <para>
      In this example, if the networks attribute contained the following
      data:
     </para>
<screen remap="programlisting-yaml">{"public": ["2001:0db8:0000:0000:0000:ff00:0042:8329", "1.2.3.4"],
 "private": ["10.0.0.1"]}</screen>
     <para>
      then the value of <literal>the get_attr</literal> function would
      resolve to <literal>10.0.0.1</literal> (first item of the
      <literal>private</literal> entry in the <literal>networks</literal>
      map).
     </para>
    </sect3>
    <sect3 xml:id="get-file">
     <title>get_file</title>
     <para>
      The <literal>get_file</literal> function returns the content of a file
      into the template. It is generally used as a file inclusion mechanism
      for files containing scripts or configuration files.
     </para>
     <para>
      The syntax of <literal>the get_file</literal> function is:
     </para>
<screen remap="programlisting-yaml">get_file: &lt;content key&gt;</screen>
     <para>
      The <literal>content key</literal> is used to look up the
      <literal>files</literal> dictionary that is provided in the REST API
      call. The Orchestration client command (<command>heat</command>) is
      <literal>get_file</literal> aware and will populate the
      <literal>files</literal> dictionary with the actual content of fetched
      paths and URLs. The Orchestration client command supports relative
      paths and will transform these to the absolute URLs required by the
      Orchestration API.
     </para>
     <note>
      <para>
       The <literal>get_file</literal> argument must be a static path or URL
       and not rely on intrinsic functions like
       <literal>get_param</literal>. the Orchestration client does not
       process intrinsic functions (they are only processed by the
       Orchestration engine).
      </para>
     </note>
     <para>
      The example below demonstrates the <literal>get_file</literal>
      function usage with both relative and absolute URLs:
     </para>
<screen remap="programlisting-yaml">resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        get_file: my_instance_user_data.sh

  my_other_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        get_file: http://example.com/my_other_instance_user_data.sh</screen>
     <para>
      The <literal>files</literal> dictionary generated by the Orchestration
      client during instantiation of the stack would contain the following
      keys: * <literal>file:///path/to/my_instance_user_data.sh</literal> *
      <literal>http://example.com/my_other_instance_user_data.sh*</literal>
     </para>
    </sect3>
    <sect3 xml:id="get-param">
     <title>get_param</title>
     <para>
      The <literal>get_param</literal> function references an input
      parameter of a template. It resolves to the value provided for this
      input parameter at runtime.
     </para>
     <para>
      The syntax of the <literal>get_param</literal> function is:
     </para>
<screen remap="programlisting-yaml">get_param:
  - &lt;parameter name&gt;
  - &lt;key/index 1&gt; (optional)
  - &lt;key/index 2&gt; (optional)
  - ...</screen>
     <variablelist>
      <varlistentry>
       <term>parameter name</term>
       <listitem>
        <para>
         The parameter name to be resolved. If the parameters returns a
         complex data structure such as a list or a map, then subsequent
         keys or indexes can be specified. These additional parameters are
         used to navigate the data structure to return the desired value.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example demonstrates the use of the
      <literal>get_param</literal> function:
     </para>
<screen remap="programlisting-yaml">parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Instance type to be used.
  server_data:
    type: json

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type}
      metadata: { get_param: [ server_data, metadata ] }
      key_name: { get_param: [ server_data, keys, 0 ] }</screen>
     <para>
      In this example, if the <literal>instance_type</literal> and
      <literal>server_data</literal> parameters contained the following
      data:
     </para>
<screen remap="programlisting-yaml">{"instance_type": "m1.tiny",
{"server_data": {"metadata": {"foo": "bar"},
                 "keys": ["a_key","other_key"]}}}</screen>
     <para>
      then the value of the property <literal>flavor</literal> would resolve
      to <literal>m1.tiny</literal>, <literal>metadata</literal> would
      resolve to <literal>{"foo": "bar"}</literal> and
      <literal>key_name</literal> would resolve to <literal>a_key</literal>.
     </para>
    </sect3>
    <sect3 xml:id="get-resource">
     <title>get_resource</title>
     <para>
      The <literal>get_resource</literal> function references another
      resource within the same template. At runtime, it is resolved to
      reference the ID of the referenced resource, which is resource type
      specific. For example, a reference to a floating IP resource returns
      the respective IP address at runtime. The syntax of the
      <literal>get_resource</literal> function is:
     </para>
<screen remap="programlisting-yaml">get_resource: &lt;resource ID&gt;</screen>
     <para>
      The resource ID of the referenced resource is given as single
      parameter to the get_resource function.
     </para>
     <para>
      For example:
     </para>
<screen remap="programlisting-yaml">resources:
  instance_port:
    type: OS::Neutron::Port
    properties: ...

  instance:
    type: OS::Nova::Server
    properties:
      ...
      networks:
        port: { get_resource: instance_port }</screen>
    </sect3>
    <sect3 xml:id="list-join">
     <title>list_join</title>
     <para>
      The <literal>list_join</literal> function joins a list of strings with
      the given delimiter.
     </para>
     <para>
      The syntax of the <literal>list_join</literal> function is:
     </para>
<screen remap="programlisting-yaml">list_join:
- &lt;delimiter&gt;
- &lt;list to join&gt;</screen>
     <para>
      For example:
     </para>
<screen remap="programlisting-yaml">list_join: [', ', ['one', 'two', 'and three']]</screen>
     <para>
      This resolve to the string <literal>one, two, and three</literal>.
     </para>
    </sect3>
    <sect3 xml:id="resource-facade">
     <title>resource_facade</title>
     <para>
      The <literal>resource_facade</literal> function retrieves data in a
      parent provider template.
     </para>
     <para>
      A provider template provides a custom definition of a resource, called
      its facade. For more information about custom templates, see
      <xref linkend="composition"/>. The syntax of the
      <literal>resource_facade</literal> function is:
     </para>
<screen remap="programlisting-yaml">resource_facade: &lt;data type&gt;</screen>
     <para>
      <literal>data type</literal> can be one of
      <literal>metadata</literal>, <literal>deletion_policy</literal> or
      <literal>update_policy</literal>.
     </para>
    </sect3>
    <sect3 xml:id="str-replace">
     <title>str_replace</title>
     <para>
      The <literal>str_replace</literal> function dynamically constructs
      strings by providing a template string with placeholders and a list of
      mappings to assign values to those placeholders at runtime. The
      placeholders are replaced with mapping values wherever a mapping key
      exactly matches a placeholder.
     </para>
     <para>
      The syntax of the <literal>str_replace</literal> function is:
     </para>
<screen remap="programlisting-yaml">str_replace:
  template: &lt;template string&gt;
  params: &lt;parameter mappings&gt;</screen>
     <variablelist>
      <varlistentry>
       <term>template</term>
       <listitem>
        <para>
         Defines the template string that contains placeholders which will
         be substituted at runtime.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>params</term>
       <listitem>
        <para>
         Provides parameter mappings in the form of dictionary. Each key
         refers to a placeholder used in the <literal>template</literal>
         attribute.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example shows a simple use of the
      <literal>str_replace</literal> function in the outputs section of a
      template to build a URL for logging into a deployed application:
     </para>
<screen remap="programlisting-yaml">resources:
  my_instance:
    type: OS::Nova::Server
    # general metadata and properties ...

outputs:
  Login_URL:
    description: The URL to log into the deployed application
    value:
      str_replace:
        template: http://host/MyApplication
        params:
          host: { get_attr: [ my_instance, first_address ] }</screen>
     <para>
      The following examples show the use of the
      <literal>str_replace</literal> function to build an instance
      initialization script:
     </para>
<screen remap="programlisting-yaml">parameters:
  DBRootPassword:
    type: string
    label: Database Password
    description: Root password for MySQL
    hidden: true

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "Hello world"
            echo "Setting MySQL root password"
            mysqladmin -u root password $db_rootpassword
            # do more things ...
          params:
            $db_rootpassword: { get_param: DBRootPassword }</screen>
    </sect3>
   </sect2>
  </sect1>
  <sect1 xml:id="hot-basic-resources">
   <title>Instances</title>

   <para>
    <remark role="fixme">Add a short description</remark>
   </para>

<!--WARNING: This file is automatically generated. Do not edit it.-->

<!--For consistency let's define a few values to use in the samples:
* image name: ubuntu-trusty-x86_64
* shared/provider network name: "public"
* tenant network and subnet names: "private" and "private-subnet"-->

   <sect2 xml:id="manage-instances">
    <title>Manage instances</title>
    <para>
     <remark role="fixme">Add a short description</remark>
    </para>
<?dbhtml stop-chunking?>
    <sect3 xml:id="create-an-instance">
     <title>Create an instance</title>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__Server.html"><literal>OS::Nova::Server</literal></link>
      resource to create a Compute instance. The <literal>flavor</literal>
      property is the only mandatory one, but you need to define a boot
      source using one of the <literal>image</literal> or
      <literal>block_device_mapping</literal> properties.
     </para>
     <para>
      You also need to define the <literal>networks</literal> property to
      indicate to which networks your instance must connect if multiple
      networks are available in your tenant.
     </para>
     <para>
      The following example creates a simple instance, booted from an image,
      and connecting to the <literal>private</literal> network:
     </para>
<screen remap="programlisting-yaml">resources:
  instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      networks:
        - network: private</screen>
    </sect3>
    <sect3 xml:id="connect-an-instance-to-a-network">
     <title>Connect an instance to a network</title>
     <para>
      Use the <literal>networks</literal> property of an
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__Server.html"><literal>OS::Nova::Server</literal></link>
      resource to define which networks an instance should connect to.
      Define each network as a YAML map, containing one of the following
      keys:
     </para>
     <variablelist>
      <varlistentry>
       <term>
                port
              </term>
       <listitem>
        <para>
         The ID of an existing Networking port. You usually create this port
         in the same template using an
         <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Port.html"><literal>OS::Neutron::Port</literal></link>
         resource. You will be able to associate a floating IP to this port,
         and the port to your Compute instance.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
                network
              </term>
       <listitem>
        <para>
         The name or ID of an existing network. You don't need to create an
         <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Port.html"><literal>OS::Neutron::Port</literal></link>
         resource if you use this property, but you will not be able to
         associate a floating IP with the instance interface in the
         template.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example demonstrates the use of the
      <literal>port</literal> and <literal>network</literal> properties:
     </para>
<screen remap="programlisting-yaml">resources:
  instance_port:
    type: OS::Neutron::Port
    properties:
      network: private
      fixed_ips:
        - subnet_id: "private-subnet"

  instance1:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      networks:
        - port: { get_resource: instance_port }

  instance2:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      networks:
        - network: private</screen>
    </sect3>
    <sect3 xml:id="create-and-associate-security-groups-to-an-instance">
     <title>Create and associate security groups to an instance</title>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__SecurityGroup.html"><literal>OS::Neutron::SecurityGroup</literal></link>
      resource to create security groups.
     </para>
     <para>
      Define the <literal>security_groups</literal> property of the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Port.html"><literal>OS::Neutron::Port</literal></link>
      resource to associate security groups to a port, then associate the
      port to an instance.
     </para>
     <para>
      The following example creates a security group allowing inbound
      connections on ports 80 and 443 (web server) and associates this
      security group to an instance port:
     </para>
<screen remap="programlisting-yaml">resources:
  web_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 443
          port_range_max: 443

  instance_port:
    type: OS::Neutron::Port
    properties:
      network: private
      security_groups:
        - default
        - { get_resource: web_secgroup }
      fixed_ips:
        - subnet_id: private-subnet

  instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      networks:
        - port: { get_resource: instance_port }</screen>
    </sect3>
    <sect3 xml:id="create-and-associate-a-floating-ip-to-an-instance">
     <title>Create and associate a floating IP to an instance</title>
     <para>
      You can use two sets of resources to create and associate floating IPs
      to instances.
     </para>
     <sect4 xml:id="os-nova-resources">
      <title>OS::Nova resources</title>
      <para>
       Use the
       <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__FloatingIP.html"><literal>OS::Nova::FloatingIP</literal></link>
       resource to create a floating IP, and the
       <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__FloatingIPAssociation.html"><literal>OS::Nova::FloatingIPAssociation</literal></link>
       resource to associate the floating IP to an instance.
      </para>
      <para>
       The following example creates an instance and a floating IP, and
       associate the floating IP to the instance:
      </para>
<screen remap="programlisting-yaml">resources:
  floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: public

  inst1:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      networks:
        - network: private

  association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      - floating_ip: { get_resource: floating_ip }
      - server_id: { get_resource: instance }</screen>
     </sect4>
     <sect4 xml:id="os-neutron-resources">
      <title>OS::Neutron resources</title>
      <note>
       <para>
        The Networking service (neutron) must be enabled on your OpenStack
        deployment to use these resources.
       </para>
      </note>
      <para>
       Use the
       <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__FloatingIP.html"><literal>OS::Neutron::FloatingIP</literal></link>
       resource to create a floating IP, and the
       <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__FloatingIPAssociation.html"><literal>OS::Neutron::FloatingIPAssociation</literal></link>
       resource to associate the floating IP to a port:
      </para>
<screen remap="programlisting-yaml">resources:
  instance_port:
    type: OS::Neutron::Port
    properties:
      network: private
      fixed_ips:
        - subnet_id: "private-subnet"

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: public
      port_id: { get_resource: instance_port }

  association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: instance_port }</screen>
     </sect4>
    </sect3>
    <sect3 xml:id="enable-remote-access-to-an-instance">
     <title>Enable remote access to an instance</title>
     <para>
      The <literal>key_name</literal> attribute of the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__Server.html"><literal>OS::Nova::Server</literal></link>
      resource defines the key pair to use to enable SSH remote access:
     </para>
<screen remap="programlisting-yaml">resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      key_name: my_key</screen>
     <note>
      <para>
       For more information about key pairs, see the
       <link xlink:href="http://docs.openstack.org/user-guide/content/cli_configure_instances.html">Configure
       access and security for instances</link> section of the OpenStack
       user guide.
      </para>
     </note>
    </sect3>
    <sect3 xml:id="create-a-key-pair">
     <title>Create a key pair</title>
     <para>
      You can create new key pairs with the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__KeyPair.html"><literal>OS::Nova::KeyPair</literal></link>
      resource. Key pairs can be imported or created during the stack
      creation.
     </para>
     <para>
      If the <literal>public_key</literal> property is not specified, the
      Orchestration module creates a new key pair. If the
      <literal>save_private_key</literal> property is set to
      <literal>true</literal>, the <literal>private_key</literal> attribute
      of the resource holds the private key.
     </para>
     <para>
      The following example creates a new key pair and uses it as
      authentication key for an instance:
     </para>
<screen remap="programlisting-yaml">resources:
  my_key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true

  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64
      key_name: { get_resource: my_key }

outputs:
  private_key:
    description: Private key
    value: { get_attr: [ my_key, private_key ] }</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="manage-networks">
    <title>Manage networks</title>
    <para>
     <remark role="fixme">Add a short description</remark>
    </para>
<?dbhtml stop-chunking?>
    <sect3 xml:id="create-a-network-and-a-subnet">
     <title>Create a network and a subnet</title>
     <note>
      <para>
       The Networking service (neutron) must be enabled on your OpenStack
       deployment to create and manage networks and subnets. Networks and
       subnets cannot be created if your deployment uses legacy networking
       (nova-network).
      </para>
     </note>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Net.html"><literal>OS::Neutron::Net</literal></link>
      resource to create a network, and the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Subnet.html"><literal>OS::Neutron::Subnet</literal></link>
      resource to provide a subnet for this network:
     </para>
<screen remap="programlisting-yaml">resources:
  new_net:
    type: OS::Neutron::Net

  new_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: new_net }
      cidr: "10.8.1.0/24"
      dns_nameservers: [ "8.8.8.8", "8.8.4.4" ]
      ip_version: 4</screen>
    </sect3>
    <sect3 xml:id="create-and-manage-a-router">
     <title>Create and manage a router</title>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__Router.html"><literal>OS::Neutron::Router</literal></link>
      resource to create a router. You can define its gateway with the
      <literal>external_gateway_info</literal> property:
     </para>
<screen remap="programlisting-yaml">resources:
  router1:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: public }</screen>
     <para>
      You can connect subnets to routers with the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Neutron__RouterInterface.html"><literal>OS::Neutron::RouterInterface</literal></link>
      resource:
     </para>
<screen remap="programlisting-yaml">resources:
  subnet1_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router1 }
      subnet: private-subnet</screen>
    </sect3>
    <sect3 xml:id="complete-network-example">
     <title>Complete network example</title>
     <para>
      The following example creates a network stack:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        A network and an associated subnet.
       </para>
      </listitem>
      <listitem>
       <para>
        A router with an external gateway.
       </para>
      </listitem>
      <listitem>
       <para>
        An interface to the new subnet for the new router.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      In this example, the <literal>public</literal> network is an existing
      shared network:
     </para>
<screen remap="programlisting-yaml">resources:
  internal_net:
    type: OS::Neutron::Net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: internal_net }
      cidr: "10.8.1.0/24"
      dns_nameservers: [ "8.8.8.8", "8.8.4.4" ]
      ip_version: 4

  internal_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: public }

  internal_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: internal_router }
      subnet: { get_resource: internal_subnet }</screen>
    </sect3>
   </sect2>

   <sect2 xml:id="manage-volumes">
    <title>Manage volumes</title>
    <para>
     <remark role="fixme">Add a short description</remark>
    </para>
<?dbhtml stop-chunking?>
    <sect3 xml:id="create-a-volume">
     <title>Create a volume</title>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Cinder__Volume.html"><literal>OS::Cinder::Volume</literal></link>
      resource to create a new Block Storage volume.
     </para>
     <para>
      For example:
     </para>
<screen remap="programlisting-yaml">resources:
  my_new_volume:
    type: OS::Cinder::Volume
    properties:
      size: 10</screen>
     <para>
      The volumes that you create are empty by default. Use the
      <literal>image</literal> property to create a bootable volume from an
      existing image:
     </para>
<screen remap="programlisting-yaml">resources:
  my_new_bootable_volume:
    type: OS::Cinder::Volume
    properties:
      size: 10
      image: ubuntu-trusty-x86_64</screen>
     <para>
      You can also create new volumes from another volume, a volume
      snapshot, or a volume backup. Use the <literal>source_volid</literal>,
      <literal>snapshot_id</literal> or <literal>backup_id</literal>
      properties to create a new volume from an existing source.
     </para>
     <para>
      For example, to create a new volume from a backup:
     </para>
<screen remap="programlisting-yaml">resources:
  another_volume:
    type: OS::Cinder::Volume
    properties:
      backup_id: 2fff50ab-1a9c-4d45-ae60-1d054d6bc868</screen>
     <para>
      In this example the <literal>size</literal> property is not defined
      because the Block Storage service uses the size of the backup to
      define the size of the new volume.
     </para>
    </sect3>
    <sect3 xml:id="attach-a-volume-to-an-instance">
     <title>Attach a volume to an instance</title>
     <para>
      Use the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Cinder__VolumeAttachment.html"><literal>OS::Cinder::VolumeAttachment</literal></link>
      resource to attach a volume to an instance.
     </para>
     <para>
      The following example creates a volume and an instance, and attaches
      the volume to the instance:
     </para>
<screen remap="programlisting-yaml">resources:
  new_volume:
    type: OS::Cinder::Volume
    properties:
      size: 1

  new_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: ubuntu-trusty-x86_64

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: new_volume }
      instance_uuid: { get_resource: new_instance }</screen>
    </sect3>
    <sect3 xml:id="boot-an-instance-from-a-volume">
     <title>Boot an instance from a volume</title>
     <para>
      Use the <literal>block_device_mapping</literal> property of the
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__Server.html"><literal>OS::Nova::Server</literal></link>
      resource to define a volume used to boot the instance. This property
      is a list of volumes to attach to the instance before its boot.
     </para>
     <para>
      The following example creates a bootable volume from an image, and
      uses it to boot an instance:
     </para>
<screen remap="programlisting-yaml">resources:
  bootable_volume:
    type: OS::Cinder::Volume
    properties:
      size: 10
      image: ubuntu-trusty-x86_64

  instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      networks:
        - network: private
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: bootable_volume }
          delete_on_termination: false</screen>
<!--TODO

A few elements that probably belong here:
- OS::Swift::Container
- OS::Trove::Instance-->
    </sect3>
   </sect2>
  </sect1>
  <sect1 xml:id="hot-software-deployment">
<!--WARNING: This file is automatically generated. Do not edit it.-->

   <title>Software configuration</title>

   <para>
    There are a variety of options to configure the software which runs on
    the servers in your stack. These can be broadly divided into the
    following:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Custom image building
     </para>
    </listitem>
    <listitem>
     <para>
      User-data boot scripts and cloud-init
     </para>
    </listitem>
    <listitem>
     <para>
      Software deployment resources
     </para>
    </listitem>
   </itemizedlist>

   <para>
    This section will describe each of these options and provide examples
    for using them together in your stacks.
   </para>

   <sect2 xml:id="image-building">
<?dbhtml stop-chunking?>
    <title>Image building</title>
    <para>
     The first opportunity to influence what software is configured on your
     servers is by booting them with a custom-built image. There are a
     number of reasons you might want to do this, including:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <emphasis role="Boot speed"/> - since the required software is
       already on the image there is no need to download and install
       anything at boot time.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis role="Boot reliability"/> - software downloads can fail for
       a number of reasons including transient network failures and
       inconsistent software repositories.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis role="Test verification"/> - custom built images can be
       verified in test environments before being promoted to production.
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis role="Configuration dependencies"/> - post-boot
       configuration may depend on agents already being installed and
       enabled
      </para>
     </listitem>
    </itemizedlist>
    <para>
     A number of tools are available for building custom images, including:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <link xlink:href="https://github.com/openstack/diskimage-builder">diskimage-builder</link>
       image building tools for OpenStack
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="http://imgfac.org/">imagefactory</link> builds
       images for a variety of operating system/cloud combinations
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Examples in this guide which require custom images will use
     <link xlink:href="https://github.com/openstack/diskimage-builder">diskimage-builder</link>.
    </para>
   </sect2>

   <sect2 xml:id="user-data-boot-scripts-and-cloud-init">
<?dbhtml stop-chunking?>
    <title>User-data boot scripts and cloud-init</title>
    <para>
     When booting a server it is possible to specify the contents of the
     user-data to be passed to that server. This user-data is made available
     either from configured config-drive or from the
     <link xlink:href="http://docs.openstack.org/admin-guide-cloud/content/section_metadata-service.html">Metadata
     service</link>.
    </para>
    <para>
     How this user-data is consumed depends on the image being booted, but
     the most commonly used tool for default cloud images is
     <link xlink:href="http://cloudinit.readthedocs.org/en/latest/">Cloud-init</link>.
    </para>
    <para>
     Whether the image is using
     <link xlink:href="http://cloudinit.readthedocs.org/en/latest/">Cloud-init</link>
     or not, it should be possible to specify a shell script in the
     user_data property and have it be executed by the server during boot:
    </para>
<screen remap="programlisting-yaml">resources:

  the_server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data: |
        #!/bin/bash
        echo "Running boot script"
        # ...</screen>
<!---->
    <blockquote>
     <para>
      <emphasis role="Tip"/>: debugging these scripts it is often useful to
      view the boot log using <literal>nova console-log
      &lt;server-id&gt;</literal> to view the progress of boot script
      execution.
     </para>
    </blockquote>
    <para>
     Often there is a need to set variable values based on parameters or
     resources in the stack. This can be done with the
     <literal>str_replace</literal> intrinsic function:
    </para>
<screen remap="programlisting-yaml">parameters:
  foo:
    default: bar

resources:

  the_server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "Running boot script with $FOO"
            # ...
          params:
            $FOO: {get_param: foo}</screen>
<!---->
    <blockquote>
     <para>
      <emphasis role="Warning"/>: If a stack-update is performed and there
      are any changes at all to the content of user_data then the server
      will be replaced (deleted and recreated) so that the modified boot
      configuration can be run on a new server.
     </para>
    </blockquote>
    <para>
     When these scripts grow it can become difficult to maintain them inside
     the template, so the <literal>get_file</literal> intrinsic function can
     be used to maintain the script in a separate file:
    </para>
<screen remap="programlisting-yaml">parameters:
  foo:
    default: bar

resources:

  the_server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data:
        str_replace:
          template: {get_file: the_server_boot.sh}
          params:
            $FOO: {get_param: foo}</screen>
<!---->
    <blockquote>
     <para>
      <emphasis role="Tip"/>: <literal>str_replace</literal> can replace any
      strings, not just strings starting with <literal>$</literal>. However
      doing this for the above example is useful because the script file can
      be executed for testing by passing in environment variables.
     </para>
    </blockquote>
    <sect3 xml:id="choosing-the-user-data-format">
     <title>Choosing the user_data_format</title>
     <para>
      The
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__Server.html"><literal>OS::Nova::Server</literal></link>
      user_data_format property determines how the user_data should be
      formatted for the server. For the default value
      <literal>HEAT_CFNTOOLS</literal>, the user_data is bundled as part of
      the heat-cfntools cloud-init boot configuration data. While
      <literal>HEAT_CFNTOOLS</literal> is the default for
      <literal>user_data_format</literal>, it is considered legacy and
      <literal>RAW</literal> or <literal>SOFTWARE_CONFIG</literal> will
      generally be more appropriate.
     </para>
     <para>
      For <literal>RAW</literal> the user_data is passed to Nova unmodified.
      For a
      <link xlink:href="http://cloudinit.readthedocs.org/en/latest/">Cloud-init</link>
      enabled image, the following are both valid <literal>RAW</literal>
      user-data:
     </para>
<screen remap="programlisting-yaml">resources:

  server_with_boot_script:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        echo "Running boot script"
        # ...

  server_with_cloud_config:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data: |
        #cloud-config
        final_message: "The system is finally up, after $UPTIME seconds"</screen>
     <para>
      For <literal>SOFTWARE_CONFIG</literal> user_data is bundled as part of
      the software config data, and metadata is derived from any associated
      <link linkend="software-deployment-resources">Software deployment
      resources</link>.
     </para>
    </sect3>
    <sect3 xml:id="signals-and-wait-conditions">
     <title>Signals and wait conditions</title>
     <para>
      Often it is necessary to pause further creation of stack resources
      until the boot configuration script has notified that it has reached a
      certain state. This is usually either to notify that a service is now
      active, or to pass out some generated data which is needed by another
      resource. The resources
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__WaitCondition.html"><literal>OS::Heat::WaitCondition</literal></link>
      and
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SwiftSignal.html"><literal>OS::Heat::SwiftSignal</literal></link>
      both perform this function using different techniques and tradeoffs.
     </para>
     <para>
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__WaitCondition.html"><literal>OS::Heat::WaitCondition</literal></link>
      is implemented as a call to the
      <link xlink:href="http://developer.openstack.org/api-ref-orchestration-v1.html">Orchestration
      API</link> resource signal. The token is created using credentials for
      a user account which is scoped only to the wait condition handle
      resource. This user is created when the handle is created, and is
      associated to a project which belongs to the stack, in an identity
      domain which is dedicated to the orchestration service.
     </para>
     <para>
      Sending the signal is a simple HTTP request, as with this example
      using <link xlink:href="http://curl.haxx.se/">curl</link>:
     </para>
<screen remap="programlisting-sh">curl -i -X POST -H 'X-Auth-Token: &lt;token&gt;' \
     -H 'Content-Type: application/json' -H 'Accept: application/json' \
     '&lt;wait condition URL&gt;' --data-binary '&lt;json containing signal data&gt;'</screen>
     <para>
      The JSON containing the signal data is expected to be of the following
      format:
     </para>
<screen remap="programlisting-json">{
  "status": "SUCCESS",
  "reason": "The reason which will appear in the 'heat event-list' output",
  "data": "Data to be used elsewhere in the template via get_attr",
  "id": "Optional unique ID of signal"
}</screen>
     <para>
      All of these values are optional, and if not specified will be set to
      the following defaults:
     </para>
<screen remap="programlisting-json">{
  "status": "SUCCESS",
  "reason": "Signal &lt;id&gt; received",
  "data": null,
  "id": "&lt;sequential number starting from 1 for each signal received&gt;"
}</screen>
     <para>
      If <literal>status</literal> is set to <literal>FAILURE</literal> then
      the resource (and the stack) will go into a <literal>FAILED</literal>
      state using the <literal>reason</literal> as failure reason.
     </para>
     <para>
      The following template example uses the convenience attribute
      <literal>curl_cli</literal> which builds a curl command with a valid
      token:
     </para>
<screen remap="programlisting-yaml">resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      # Note, count of 5 vs 6 is due to duplicate signal ID 5 sent below
      count: 5
      timeout: 300

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  the_server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            # Below are some examples of the various ways signals
            # can be sent to the Handle resource

            # Simple success signal
            wc_notify --data-binary '{"status": "SUCCESS"}'

            # Or you optionally can specify any of the additional fields
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal2"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal3", "data": "data3"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal4", "data": "data4"}'

            # If you require control of the ID, you can pass it.
            # The ID should be unique, unless you intend for duplicate
            # signals to overrite each other.  The following two calls
            # do the exact same thing, and will be treated as one signal
            # (You can prove this by changing count above to 7)
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'

            # Example of sending a failure signal, optionally
            # reason, id, and data can be specified as above
            # wc_notify --data-binary '{"status": "FAILURE"}'
          params:
            wc_notify: { get_attr: [wait_handle, curl_cli] }

outputs:
  wc_data:
    value: { get_attr: [wait_condition, data] }
    # this would return the following json
    # {"1": null, "2": null, "3": "data3", "4": "data4", "5": null}

  wc_data_4:
    value: { get_attr: [wait_condition, data, '4'] }
    # this would return "data4"</screen>
<!---->
     <para>
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SwiftSignal.html"><literal>OS::Heat::SwiftSignal</literal></link>
      is implemented by creating an Object Storage API temporary URL which
      is populated with signal data with an HTTP PUT. The orchestration
      service will poll this object until the signal data is available.
      Object versioning is used to store multiple signals.
     </para>
     <para>
      Sending the signal is a simple HTTP request, as with this example
      using <link xlink:href="http://curl.haxx.se/">curl</link>:
     </para>
<screen remap="programlisting-sh">curl -i -X PUT '&lt;object URL&gt;' --data-binary '&lt;json containing signal data&gt;'</screen>
     <para>
      The above template example only needs to have the
      <literal>type</literal> changed to the swift signal resources:
     </para>
<screen remap="programlisting-yaml">resources:
  signal:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: wait_handle}
      timeout: 300

  signal_handle:
    type: OS::Heat::SwiftSignalHandle
  # ...</screen>
     <para>
      The decision to use
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__WaitCondition.html"><literal>OS::Heat::WaitCondition</literal></link>
      or
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SwiftSignal.html"><literal>OS::Heat::SwiftSignal</literal></link>
      will depend on a few factors:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SwiftSignal.html"><literal>OS::Heat::SwiftSignal</literal></link>
        depends on the availability of an Object Storage API
       </para>
      </listitem>
      <listitem>
       <para>
        <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__WaitCondition.html"><literal>OS::Heat::WaitCondition</literal></link>
        depends on whether the orchestration service has been configured
        with a dedicated stack domain (which may depend on the availability
        of an Identity V3 API).
       </para>
      </listitem>
      <listitem>
       <para>
        The preference to protect signal URLs with token authentication or a
        secret webhook URL.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="software-config-resources">
     <title>Software config resources</title>
     <para>
      Boot configuration scripts can also be managed as their own resources.
      This allows configuration to be defined once and run on multiple
      server resources. These software-config resources are stored and
      retrieved via dedicated calls to the
      <link xlink:href="http://developer.openstack.org/api-ref-orchestration-v1.html">Orchestration
      API</link>. It is not possible to modify the contents of an existing
      software-config resource, so a stack-update which changes any existing
      software-config resource will result in API calls to create a new
      config and delete the old one.
     </para>
     <para>
      The resource
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
      is used for storing configs represented by text scripts, for example:
     </para>
<screen remap="programlisting-yaml">resources:
  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        echo "Running boot script"
        # ...

  server_with_boot_script:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data: {get_resource: boot_script}</screen>
     <para>
      The resource
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__CloudConfig.html"><literal>OS::Heat::CloudConfig</literal></link>
      allows
      <link xlink:href="http://cloudinit.readthedocs.org/en/latest/">Cloud-init</link>
      cloud-config to be represented as template YAML rather than a block
      string. This allows intrinsic functions to be included when building
      the cloud-config. This also ensures that the cloud-config is valid
      YAML, although no further checks for valid cloud-config are done.
     </para>
<screen remap="programlisting-yaml">parameters:
  file_content:
    type: string
    description: The contents of the file /tmp/file

resources:
  boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /tmp/file
          content: {get_param: file_content}

  server_with_cloud_config:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data: {get_resource: boot_config}</screen>
<!---->
     <para>
      The resource
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__MultipartMime.html"><literal>OS::Heat::MultipartMime</literal></link>
      allows multiple
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
      and
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__CloudConfig.html"><literal>OS::Heat::CloudConfig</literal></link>
      resources to be combined into a single
      <link xlink:href="http://cloudinit.readthedocs.org/en/latest/">Cloud-init</link>
      multi-part message:
     </para>
<screen remap="programlisting-yaml">parameters:
  file_content:
    type: string
    description: The contents of the file /tmp/file

  other_config:
    type: string
    description: The ID of a software-config resource created elsewhere

resources:
  boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /tmp/file
          content: {get_param: file_content}

  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        echo "Running boot script"
        # ...

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: boot_script}
      - config: {get_resource: other_config}

  server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: RAW
      user_data: {get_resource: server_init}</screen>
<!---->
    </sect3>
   </sect2>

   <sect2 xml:id="software-deployment-resources">
<?dbhtml stop-chunking?>
    <title>Software deployment resources</title>
    <para>
     There are many situations where it is not desirable to replace the
     server whenever there is a configuration change. The
     <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareDeployment.html"><literal>OS::Heat::SoftwareDeployment</literal></link>
     resource allows any number of software configurations to be added or
     removed from a server throughout its life-cycle.
    </para>
    <sect3 xml:id="building-custom-image-for-software-deployments">
     <title>Building custom image for software deployments</title>
     <para>
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
      resources are used to store software configuration, and a
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareDeployment.html"><literal>OS::Heat::SoftwareDeployment</literal></link>
      resource is used to associate a config resource with one server. The
      <literal>group</literal> attribute on
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
      specifies what tool will consume the config content.
     </para>
     <para>
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
      has the ability to define a schema of <literal>inputs</literal> and
      which the configuration script supports. Inputs are mapped to whatever
      concept the configuration tool has for assigning variables/parameters.
     </para>
     <para>
      Likewise, <literal>outputs</literal> are mapped to the tool's
      capability to export structured data after configuration execution.
      For tools which do not support this, outputs can always be written to
      a known file path for the hook to read.
     </para>
     <para>
      The
      <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareDeployment.html"><literal>OS::Heat::SoftwareDeployment</literal></link>
      resource allows values to be assigned to the config inputs, and the
      resource remains in an <literal>IN_PROGRESS</literal> state until the
      server signals to heat what (if any) output values were generated by
      the config script.
     </para>
    </sect3>
    <sect3 xml:id="custom-image-script">
     <title>Custom image script</title>
     <para>
      Each of the following examples requires that the servers be booted
      with a custom image. The following script uses diskimage-builder to
      create an image required in later examples:
     </para>
<screen remap="programlisting-sh"># Clone the required repositories. Some of these are also available
# via pypi or as distro packages.
git clone https://git.openstack.org/openstack/diskimage-builder.git
git clone https://git.openstack.org/openstack/tripleo-image-elements.git
git clone https://git.openstack.org/openstack/heat-templates.git

# Required by diskimage-builder to discover element collections
export ELEMENTS_PATH=tripleo-image-elements/elements:heat-templates/hot/software-config/elements

# The base operating system element(s) provided by the diskimage-builder
# elements collection. Other values which may work include:
# centos7, debian, opensuse, rhel, rhel7, or ubuntu
export BASE_ELEMENTS="fedora selinux-permissive"
# Install and configure the os-collect-config agent to poll the heat service
# for configuration changes to execute
export AGENT_ELEMENTS="os-collect-config os-refresh-config os-apply-config"


# heat-config installs an os-refresh-config script which will invoke the
# appropriate hook to perform configuration. The element heat-config-script
# installs a hook to perform configuration with shell scripts
export DEPLOYMENT_BASE_ELEMENTS="heat-config heat-config-script"

# Install a hook for any other chosen configuration tool(s).
# Elements which install hooks include:
# heat-config-cfn-init, heat-config-puppet, or heat-config-salt
export DEPLOYMENT_TOOL=""

# The name of the qcow2 image to create, and the name of the image
# uploaded to the OpenStack image registry.
export IMAGE_NAME=fedora-software-config

# Create the image
diskimage-builder/bin/disk-image-create vm $BASE_ELEMENTS $AGENT_ELEMENTS \
     $DEPLOYMENT_BASE_ELEMENTS $DEPLOYMENT_TOOL -o $IMAGE_NAME.qcow2

# Upload the image, assuming valid credentials are already sourced
glance image-create --disk-format qcow2 --container-format bare \
    --name $IMAGE_NAME &lt; $IMAGE_NAME.qcow2</screen>
<!---->
    </sect3>
    <sect3 xml:id="configuring-with-scripts">
     <title>Configuring with scripts</title>
     <para>
      The <link linkend="custom-image-script">Custom image script</link>
      already includes the <literal>heat-config-script</literal> element so
      the built image will already have the ability to configure using shell
      scripts.
     </para>
     <para>
      Config inputs are mapped to shell environment variables. The script
      can communicate outputs to heat by writing to the file
      <literal>$heat_outputs_path.&lt;output name&gt;</literal>. See
      the following example for a script which expects inputs
      <literal>foo</literal>, <literal>bar</literal> and generates an output
      <literal>result</literal>.
     </para>
<screen remap="programlisting-yaml">resources:
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: foo
      - name: bar
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /tmp/$bar"
        echo $foo &gt; /tmp/$bar
        echo -n "The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action" &gt; $heat_outputs_path.result
        echo "Written to /tmp/$bar"
        echo "Output to stderr" 1&gt;&amp;2

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        foo: fooooo
        bar: baaaaa

  server:
    type: OS::Nova::Server
    properties:
      # flavor, image etc
      user_data_format: SOFTWARE_CONFIG

outputs:
  result:
    value:
      get_attr: [deployment, result]
  stdout:
    value:
      get_attr: [deployment, deploy_stdout]
  stderr:
    value:
      get_attr: [deployment, deploy_stderr]
  status_code:
    value:
      get_attr: [deployment, deploy_status_code]</screen>
<!---->
     <blockquote>
      <para>
       <emphasis role="Tip"/>: A config resource can be associated with
       multiple deployment resources, and each deployment can specify the
       same or different values for the <literal>server</literal> and
       <literal>input_values</literal> properties.
      </para>
     </blockquote>
     <para>
      As can be seen in the <literal>outputs</literal> section of the above
      template, the <literal>result</literal> config output value is
      available as an attribute on the <literal>deployment</literal>
      resource. Likewise the captured stdout, stderr and status_code are
      also available as attributes.
     </para>
    </sect3>
    <sect3 xml:id="configuring-with-os-apply-config">
     <title>Configuring with os-apply-config</title>
     <para>
      The agent toolchain of <literal>os-collect-config</literal>,
      <literal>os-refresh-config</literal> and
      <literal>os-apply-config</literal> can actually be used on their own
      to inject heat stack configuration data into a server running a custom
      image.
     </para>
     <para>
      The custom image needs to have the following to use this approach:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        All software dependencies installed
       </para>
      </listitem>
      <listitem>
       <para>
        <link xlink:href="https://github.com/openstack/os-refresh-config">os-refresh-config</link>
        scripts to be executed on configuration changes
       </para>
      </listitem>
      <listitem>
       <para>
        <link xlink:href="https://github.com/openstack/os-apply-config">os-apply-config</link>
        templates to transform the heat-provided config data into service
        configuration files
       </para>
      </listitem>
     </itemizedlist>
     <para>
      The projects
      <link xlink:href="https://github.com/openstack/tripleo-image-elements">tripleo-image-elements</link>
      and
      <link xlink:href="https://github.com/openstack/tripleo-heat-templates">tripleo-heat-templates</link>
      demonstrate this approach.
     </para>
    </sect3>
    <sect3 xml:id="configuring-with-cfn-init">
     <title>Configuring with cfn-init</title>
     <para>
      Likely the only reason to use the <literal>cfn-init</literal> hook is
      to migrate templates which contain
      <link xlink:href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html">AWS::CloudFormation::Init</link>
      metadata without needing a complete rewrite of the config metadata. It
      is included here as it introduces a number of new concepts.
     </para>
     <para>
      To use the <literal>cfn-init</literal> tool the
      <literal>heat-config-cfn-init</literal> element is required to be on
      the built image, so <link linkend="custom-image-script">Custom image
      script</link> needs to be modified with the following:
     </para>
<screen remap="programlisting-sh">export DEPLOYMENT_TOOL="heat-config-cfn-init"</screen>
<!---->
     <para>
      Configuration data which used to be included in the
      <literal>AWS::CloudFormation::Init</literal> section of resource
      metadata is instead moved to the <literal>config</literal> property of
      the config resource, as in the following example:
     </para>
<screen remap="programlisting-yaml">resources:

  config:
    type: OS::Heat::StructuredConfig
    properties:
      group: cfn-init
      inputs:
      - name: bar
      config:
        config:
          files:
            /tmp/foo:
              content:
                get_input: bar
              mode: '000644'

  deployment:
    type: OS::Heat::StructuredDeployment
    properties:
      name: 10_deployment
      signal_transport: NO_SIGNAL
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        bar: baaaaa

  other_deployment:
    type: OS::Heat::StructuredDeployment
    properties:
      name: 20_other_deployment
      signal_transport: NO_SIGNAL
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        bar: barmy

  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG</screen>
<!---->
     <para>
      There are a number of things to note about this template example:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__StructuredConfig.html"><literal>OS::Heat::StructuredConfig</literal></link>
        is like
        <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__SoftwareConfig.html"><literal>OS::Heat::SoftwareConfig</literal></link>
        except that the <literal>config</literal> property contains
        structured YAML instead of text script. This is useful for a number
        of other configuration tools including ansible, salt and
        os-apply-config.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>cfn-init</literal> has no concept of inputs, so
        <literal>{get_input: bar}</literal> acts as a placeholder which gets
        replaced with the
        <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Heat__StructuredDeployment.html"><literal>OS::Heat::StructuredDeployment</literal></link><literal>input_values</literal>
        value when the deployment resource is created.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>cfn-init</literal> has no concept of outputs, so specifying
        <literal>signal_transport: NO_SIGNAL</literal> will mean that the
        deployment resource will immediately go into the
        <literal>CREATED</literal> state instead of waiting for a completed
        signal from the server.
       </para>
      </listitem>
      <listitem>
       <para>
        The template has 2 deployment resources deploying the same config
        with different <literal>input_values</literal>. The order these are
        deployed in on the server is determined by sorting the values of the
        <literal>name</literal> property for each resource (10_deployment,
        20_other_deployment)
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 xml:id="configuring-with-puppet">
     <title>Configuring with puppet</title>
     <para>
      The <link xlink:href="http://puppetlabs.com/">puppet</link> hook makes
      it possible to write configuration as puppet manifests which are
      deployed and run in a masterless environment.
     </para>
     <para>
      To specify configuration as puppet manifests the
      <literal>heat-config-puppet</literal> element is required to be on the
      built image, so <link linkend="custom-image-script">Custom image
      script</link> needs to be modified with the following:
     </para>
<screen remap="programlisting-sh">export DEPLOYMENT_TOOL="heat-config-puppet"</screen>
<!---->
<screen remap="programlisting-yaml">resources:

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: foo
      - name: bar
      outputs:
      - name: result
      config:
        get_file: example-puppet-manifest.pp

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        foo: fooooo
        bar: baaaaa

  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG

outputs:
  result:
    value:
      get_attr: [deployment, result]
  stdout:
    value:
get_attr: [deployment, deploy_stdout]</screen>
<!---->
     <para>
      This demonstrates the use of the <literal>get_file</literal> function,
      which will attach the contents of the file
      <literal>example-puppet-manifest.pp</literal>, containing:
     </para>
<screen remap="programlisting-puppet">file { 'barfile':
    ensure  =&gt; file,
    mode    =&gt; '0644',
    path    =&gt; '/tmp/$::bar',
    content =&gt; '$::foo',
}

file { 'output_result':
    ensure  =&gt; file,
    path    =&gt; '$::heat_outputs_path.result',
    mode    =&gt; '0644',
    content =&gt; 'The file /tmp/$::bar contains $::foo',
}</screen>
<!---->
    </sect3>
   </sect2>
  </sect1>
  <sect1 xml:id="environments">
<!--WARNING: This file is automatically generated. Do not edit it.-->

   <title>Environments</title>

   <para>
    The environment affects the runtime behaviour of a template. It provides
    a way to override the resource implementations and a mechanism to place
    parameters that the service needs.
   </para>

   <para>
    To fully understand the runtime behavior you have to consider what
    plug-ins are installed on the cloud you're using.
   </para>

   <sect2 xml:id="environment-file-format">
<?dbhtml stop-chunking?>
    <title>Environment file format</title>
    <para>
     The environment is a yaml text file that contains two main sections:
    </para>
    <variablelist>
     <varlistentry>
      <term>
              parameters
            </term>
      <listitem>
       <para>
        A map of key/pair values.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
              resource_registry
            </term>
      <listitem>
       <para>
        Definition of custom resources.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Use the -e option of the <command>heat stack-create</command> command
     to create a stack using with the environment defined in such a file.
    </para>
    <para>
     You can also provide environment parameters as a list of key/value
     pairs using the -P option of the <command>heat stack-create</command>
     command.
    </para>
    <para>
     In the following example the environment is read from the
     <literal>my_env.yaml</literal> file and an extra parameter is provided
     using the -P option:
    </para>
<screen remap="programlisting-console">$ heat stack-create my_stack -e my_env.yaml -P "param1=val1;param2=val2" -f my_tmpl.yaml</screen>
   </sect2>

   <sect2 xml:id="global-and-effective-environments">
<?dbhtml stop-chunking?>
    <title>Global and effective environments</title>
    <para>
     The environment used for a stack is the combination of the environment
     you use with the template for the stack, and a global environment that
     is determined by your cloud operator. An entry in the user environment
     takes precedence over the global environment. OpenStack includes a
     default global environment, but you cloud operator can add additional
     environment entries.
    </para>
<!--TODO:
move this to a heat section in the admin-guide-cloud

The cloud operator can add to the global environment
by putting environment files in a configurable directory wherever
the Orchestration engine runs. The configuration variable is named
"environment_dir" is found in the "[DEFAULT]" section
of "/etc/heat/heat.conf". The default for that directory is
"/etc/heat/environment.d". Its contents are combined in whatever
order the shell delivers them when the service starts up,
which is the time when these files are read.

If the "my_env.yaml" file from the example above had been put in the
"environment_dir" then the user's command line could be this:

::

   heat stack-create my_stack -P "some_parm=bla" -f my_tmpl.yaml-->
   </sect2>

   <sect2 xml:id="define-values-for-a-template-arguments">
<?dbhtml stop-chunking?>
    <title>Define values for a template arguments</title>
    <para>
     You can define values for the template arguments in the
     <literal>parameters</literal> section of an environment file:
    </para>
<screen remap="programlisting-yaml">parameters:
  KeyName: my_keypair
  InstanceType: m1.tiny
  ImageId: F18-x86_64-cfntools</screen>
   </sect2>

   <sect2 xml:id="create-and-override-resources">
<?dbhtml stop-chunking?>
    <title>Create and override resources</title>
    <para>
     You can create or override resources in the
     <literal>resource_registry</literal> section of an environment file.
     The resource you provide in this manner must have an identifier, and
     references either other resources IDs or the URL of an existing
     template file.
    </para>
    <para>
     The following example maps the new
     <literal>OS::Networking::FloatingIP</literal> resource to the existing
     <link xlink:href="http://docs.openstack.org/hot-reference/content/OS__Nova__FloatingIP.html"><literal>OS::Nova::FloatingIP</literal></link>
     resource:
    </para>
<screen remap="programlisting-yaml">resource_registry:
  "OS::Networking::FloatingIP": "OS::Nova::FloatingIP"</screen>
    <para>
     You can use wildcards to map multiple resources:
    </para>
<screen remap="programlisting-yaml">resource_registry:
  "OS::Network*": "OS::Neutron*"</screen>
    <para>
     To create or override a resource with a custom resource, create a
     template file to define this resource, and provide the URL to the
     template file in the environment file:
    </para>
<screen remap="programlisting-yaml">resource_registry:
  "AWS::EC2::Instance": file:///path/to/my_instance.yaml</screen>
    <para>
     The supported URL scheme are <literal>file</literal>,
     <literal>http</literal> and <literal>https</literal>.
    </para>
    <note>
     <para>
      The template file extension must be <literal>.yaml</literal> or
      <literal>.template</literal>, or it will not be treated as a custom
      template resource.
     </para>
    </note>
    <para>
     You can limit the usage of a custom resource to a specific resource of
     the template:
    </para>
<screen remap="programlisting-yaml">resource_registry:
  resources:
    my_db_server:
      "OS::DBInstance": file:///home/mine/all_my_cool_templates/db.yaml</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="composition">
<!--WARNING: This file is automatically generated. Do not edit it.-->

   <title>Template composition</title>

   <para>
    When writing complex templates you are encouraged to break up your
    template into separate smaller templates. These can then be brought
    together using template resources. This is a mechanism to define a
    resource using a template, thus composing one logical stack with
    multiple templates.
   </para>

   <para>
    Template resources provide a feature similar to the
    <link xlink:href="http://docs.openstack.org/hot-reference/content/AWS__CloudFormation__Stack.html"><literal>AWS::CloudFormation::Stack</literal></link>
    resource, but also provide a way to:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Define new resource types and build your own resource library.
     </para>
    </listitem>
    <listitem>
     <para>
      Override the default behaviour of existing resource types.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    To achieve this:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The Orchestration client gets the associated template files and passes
      them along in the <literal>files</literal> section of the
      <literal>POST stacks/</literal> API request.
     </para>
    </listitem>
    <listitem>
     <para>
      The environment in the Orchestration engine manages the mapping of
      resource type to template creation.
     </para>
    </listitem>
    <listitem>
     <para>
      The Orchestration engine translates template parameters into resource
      properties.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following examples illustrate how you can use a custom template to
    define new types of resources. These examples use a custom template
    stored in a <literal>my_nova.yml</literal> file:
   </para>

<screen remap="programlisting-yaml">heat_template_version: 2013-05-23

parameters:
  key_name:
    type: string
    description: Name of a KeyPair

resources:
  server:
    type: OS::Nova::Server
    properties:
      key_name: {get_param: key_name}
      flavor: m1.small
      image: ubuntu-trusty-x86_64</screen>

   <sect2 xml:id="use-the-template-filename-as-type">
<?dbhtml stop-chunking?>
    <title>Use the template filename as type</title>
    <para>
     The following template defines the <literal>my_nova.yaml</literal> file
     as value for the <literal>type</literal> property of a resource:
    </para>
<screen remap="programlisting-yaml">heat_template_version: 2013-05-23
resources:
  my_server:
    type: my_nova.yaml
    properties:
      key_name: my_key</screen>
    <para>
     The <literal>key_name</literal> argument of the
     <literal>my_nova.yaml</literal> template gets its value from the
     <literal>key_name</literal> property of the new template.
    </para>
    <note>
     <para>
      The above reference to <literal>my_nova.yaml</literal> assumes it is
      in the same directory. You can use any of the following forms:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Relative path (<literal>my_nova.yaml</literal>)
       </para>
      </listitem>
      <listitem>
       <para>
        Absolute path
        (<literal>file:///home/user/templates/my_nova.yaml</literal>)
       </para>
      </listitem>
      <listitem>
       <para>
        Http URL
        (<literal>http://example.com/templates/my_nova.yaml</literal>)
       </para>
      </listitem>
      <listitem>
       <para>
        Https URL
        (<literal>https://example.com/templates/my_nova.yaml</literal>)
       </para>
      </listitem>
     </itemizedlist>
    </note>
    <para>
     To create the stack run:
    </para>
<screen remap="programlisting-console">$ heat stack-create -f main.yaml stack1</screen>
   </sect2>

   <sect2 xml:id="define-a-new-resource-type">
<?dbhtml stop-chunking?>
    <title>Define a new resource type</title>
    <para>
     You can associate a name to the <literal>my_noya.yaml</literal>
     template in an environment file. If the name is already known by the
     Orchestration module then your new resource will override the default
     one.
    </para>
    <para>
     In the following example a new <literal>OS::Nova::Server</literal>
     resource overrides the default resource of the same name.
    </para>
    <para>
     An <literal>env.yaml</literal> environment file holds the definition of
     the new resource:
    </para>
<screen remap="programlisting-yaml">resource_registry:
  "OS::Nova::Server": my_nova.yaml</screen>
    <note>
     <para>
      See <xref linkend="environments"/> for more detail about environment
      files.
     </para>
    </note>
    <para>
     You can now use the new <literal>OS::Nova::Server</literal> in your new
     template:
    </para>
<screen remap="programlisting-yaml">resources:
  my_server:
    type: OS::Nova::Server
    properties:
      key_name: my_key</screen>
    <para>
     To create the stack run:
    </para>
<screen remap="programlisting-console">$ heat stack-create -f main.yaml -e env.yaml example-two</screen>
   </sect2>
  </sect1>
 </appendix>
 <appendix xml:id="app_community_support" xml:base="../common/app_support.xml">
<?dbhtml stop-chunking?>
  <title>Community support</title>
  <para>
   The following resources are available to help you run and use OpenStack.
   The OpenStack community constantly improves and adds to the main features
   of OpenStack, but if you have any questions, do not hesitate to ask. Use
   the following resources to get OpenStack support, and troubleshoot your
   installations.
  </para>
  <sect1 xml:id="support-documentation">
   <title>Documentation</title>

   <para>
    For the available OpenStack documentation, see
    <link xlink:href="http://docs.openstack.org">docs.openstack.org</link>.
   </para>

   <para>
    To provide feedback on documentation, join and use the
    <email>openstack-docs@lists.openstack.org</email> mailing list at
    <link xlink:href="http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack-docs">OpenStack
    Documentation Mailing List</link>, or
    <link xlink:href="https://bugs.launchpad.net/openstack-manuals/+filebug">report
    a bug</link>.
   </para>

   <para>
    The following books explain how to install an OpenStack cloud and its
    associated components:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/juno/install-guide/install/apt-debian/content/">
      <citetitle>Installation Guide for Debian 7</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/juno/install-guide/install/zypper/content/">
      <citetitle>Installation Guide for openSUSE 13.1 and SUSE Linux
      Enterprise Server 11 SP3</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/juno/install-guide/install/yum/content/">
      <citetitle>Installation Guide for Red Hat Enterprise Linux 7, CentOS
      7, and Fedora 20</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/juno/install-guide/install/apt/content/">
      <citetitle>Installation Guide for Ubuntu 14.04</citetitle> </link>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following books explain how to configure and run an OpenStack cloud:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/arch-design/content/">
      <citetitle>Architecture Design Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/admin-guide-cloud/content/">
      <citetitle>Cloud Administrator Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/juno/config-reference/content/">
      <citetitle>Configuration Reference</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/ops/">
      <citetitle>Operations Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/high-availability-guide/content/">
      <citetitle>High Availability Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/sec/"> <citetitle>Security
      Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/image-guide/content/">
      <citetitle>Virtual Machine Image Guide</citetitle> </link>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following books explain how to use the OpenStack dashboard and
    command-line clients:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/quick-start/content/">
      <citetitle>API Quick Start</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/user-guide/content/">
      <citetitle>End User Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/user-guide-admin/content/">
      <citetitle>Admin User Guide</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/cli-reference/content/">
      <citetitle>Command-Line Interface Reference</citetitle> </link>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following documentation provides reference and guidance information
    for the OpenStack APIs:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="http://developer.openstack.org/api-ref.html">OpenStack
      API Complete Reference (HTML)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://developer.openstack.org/api-ref-guides/bk-api-ref.pdf">API
      Complete Reference (PDF)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-block-storage/2.0/content/">
      <citetitle>OpenStack Block Storage Service API v2
      Reference</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-compute/2/content/">
      <citetitle>OpenStack Compute API v2 and Extensions
      Reference</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-identity-service/2.0/content/">
      <citetitle>OpenStack Identity Service API v2.0 Reference</citetitle>
      </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-image-service/2.0/content/">
      <citetitle>OpenStack Image Service API v2 Reference</citetitle>
      </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-network/2.0/content/">
      <citetitle>OpenStack Networking API v2.0 Reference</citetitle> </link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://docs.openstack.org/api/openstack-object-storage/1.0/content/">
      <citetitle>OpenStack Object Storage API v1 Reference</citetitle>
      </link>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The
    <link xlink:href="http://docs.openstack.org/training-guides/content/"><citetitle>Training
    Guides</citetitle></link> offer software training for cloud
    administration and management.
   </para>
  </sect1>
  <sect1 xml:id="support-ask_openstack">
   <title>ask.openstack.org</title>

   <para>
    During the set up or testing of OpenStack, you might have questions
    about how a specific task is completed or be in a situation where a
    feature does not work correctly. Use the
    <link xlink:href="http://ask.openstack.org">ask.openstack.org</link>
    site to ask questions and get answers. When you visit the
    <link xlink:href="http://ask.openstack.org">http://ask.openstack.org</link>
    site, scan the recently asked questions to see whether your question has
    already been answered. If not, ask a new question. Be sure to give a
    clear, concise summary in the title and provide as much detail as
    possible in the description. Paste in your command output or stack
    traces, links to screen shots, and any other information which might be
    useful.
   </para>
  </sect1>
  <sect1 xml:id="support-mailing-lists">
   <title>OpenStack mailing lists</title>

   <para>
    A great way to get answers and insights is to post your question or
    problematic scenario to the OpenStack mailing list. You can learn from
    and help others who might have similar issues. To subscribe or view the
    archives, go to
    <link xlink:href="http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack">http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack</link>.
    You might be interested in the other mailing lists for specific projects
    or development, which you can find
    <link xlink:href="http://wiki.openstack.org/MailingLists">on the
    wiki</link>. A description of all mailing lists is available at
    <link xlink:href="http://wiki.openstack.org/MailingLists">http://wiki.openstack.org/MailingLists</link>.
   </para>
  </sect1>
  <sect1 xml:id="support-wiki">
   <title>The OpenStack wiki</title>

   <para>
    The <link xlink:href="http://wiki.openstack.org/">OpenStack wiki</link>
    contains a broad range of topics but some of the information can be
    difficult to find or is a few pages deep. Fortunately, the wiki search
    feature enables you to search by title or content. If you search for
    specific information, such as about networking or nova, you can find a
    large amount of relevant material. More is being added all the time, so
    be sure to check back often. You can find the search box in the
    upper-right corner of any OpenStack wiki page.
   </para>
  </sect1>
  <sect1 xml:id="support-bugs-area">
   <title>The Launchpad Bugs area</title>

   <para>
    The OpenStack community values your set up and testing efforts and wants
    your feedback. To log a bug, you must sign up for a Launchpad account at
    <link xlink:href="https://launchpad.net/+login">https://launchpad.net/+login</link>.
    You can view existing bugs and report bugs in the Launchpad Bugs area.
    Use the search feature to determine whether the bug has already been
    reported or already been fixed. If it still seems like your bug is
    unreported, fill out a bug report.
   </para>

   <para>
    Some tips:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Give a clear, concise summary.
     </para>
    </listitem>
    <listitem>
     <para>
      Provide as much detail as possible in the description. Paste in your
      command output or stack traces, links to screen shots, and any other
      information which might be useful.
     </para>
    </listitem>
    <listitem>
     <para>
      Be sure to include the software and package versions that you are
      using, especially if you are using a development branch, such as,
      <literal>"Juno release" vs git commit
      bc79c3ecc55929bac585d04a03475b72e06a3208</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Any deployment-specific information is helpful, such as whether you
      are using Ubuntu 14.04 or are performing a multi-node installation.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following Launchpad Bugs areas are available:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
<!-- Core projects, sorted alphabetically -->
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/cinder">Bugs: OpenStack
      Block Storage (cinder)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/nova">Bugs: OpenStack
      Compute (nova)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/horizon">Bugs: OpenStack
      Dashboard (horizon)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/keystone">Bugs: OpenStack
      Identity (keystone)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/glance">Bugs: OpenStack
      Image Service (glance)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/neutron">Bugs: OpenStack
      Networking (neutron)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/swift">Bugs: OpenStack
      Object Storage (swift)</link>
     </para>
    </listitem>
<!-- Modules, sorted alphabetically -->
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/ironic">Bugs: Bare Metal
      (ironic)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/sahara">Bugs: Data
      Processing Service (sahara)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/trove">Bugs: Database
      Service (trove)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/heat">Bugs: Orchestration
      (heat)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/ceilometer">Bugs:
      Telemetry (ceilometer)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/marconi">Bugs: Queue
      Service (marconi)</link>
     </para>
    </listitem>
<!-- Programs, sorted alphabetically -->
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/openstack-api-site">Bugs:
      OpenStack API Documentation (developer.openstack.org)</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://bugs.launchpad.net/openstack-manuals">Bugs:
      OpenStack Documentation (docs.openstack.org)</link>
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
  <sect1 xml:id="support-irc-channel">
   <title>The OpenStack IRC channel</title>

   <para>
    The OpenStack community lives in the #openstack IRC channel on the
    Freenode network. You can hang out, ask questions, or get immediate
    feedback for urgent and pressing issues. To install an IRC client or use
    a browser-based client, go to
    <link xlink:href="http://webchat.freenode.net">http://webchat.freenode.net/</link>.
    You can also use Colloquy (Mac OS X,
    <link xlink:href="http://colloquy.info/">http://colloquy.info/</link>),
    mIRC (Windows,
    <link xlink:href="http://www.mirc.com/">http://www.mirc.com/</link>), or
    XChat (Linux). When you are in the IRC channel and want to share code or
    command output, the generally accepted method is to use a Paste Bin. The
    OpenStack project has one at
    <link xlink:href="http://paste.openstack.org">http://paste.openstack.org</link>.
    Just paste your longer amounts of text or logs in the web form and you
    get a URL that you can paste into the channel. The OpenStack IRC channel
    is <literal>#openstack</literal> on <literal>irc.freenode.net</literal>.
    You can find a list of all OpenStack IRC channels at
    <link xlink:href="https://wiki.openstack.org/wiki/IRC">https://wiki.openstack.org/wiki/IRC</link>.
   </para>
  </sect1>
  <sect1 xml:id="support-documentation-feedback">
   <title>Documentation feedback</title>

   <para>
    To provide feedback on documentation, join and use the
    <email>openstack-docs@lists.openstack.org</email> mailing list at
    <link xlink:href="http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack-docs">OpenStack
    Documentation Mailing List</link>, or
    <link xlink:href="https://bugs.launchpad.net/openstack-manuals/+filebug">report
    a bug</link>.
   </para>
  </sect1>
  <sect1 xml:id="distro-support">
   <title>OpenStack distribution packages</title>

   <para>
    The following Linux distributions provide community-supported packages
    for OpenStack:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <emphasis role="bold">Debian:</emphasis>
      <link xlink:href="http://wiki.debian.org/OpenStack">http://wiki.debian.org/OpenStack</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">CentOS, Fedora, and Red Hat Enterprise
      Linux:</emphasis>
      <link xlink:href="http://openstack.redhat.com/">http://openstack.redhat.com/</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">openSUSE and SUSE Linux Enterprise
      Server:</emphasis>
      <link xlink:href="http://en.opensuse.org/Portal:OpenStack">http://en.opensuse.org/Portal:OpenStack</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Ubuntu:</emphasis>
      <link xlink:href="https://wiki.ubuntu.com/ServerTeam/CloudArchive">https://wiki.ubuntu.com/ServerTeam/CloudArchive</link>
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
 </appendix>
 <appendix xml:id="app.docupdate">
  <title>Documentation Updates</title>
  <para>
   This version of the guide replaces and obsoletes all earlier versions.
  </para>
  <para>
   The following table describes the most recent changes:
  </para>
  <informaltable remap="revhistory">
   <tgroup cols="2">
    <colspec colwidth="20%"/>
    <colspec colwidth="80%"/>
    <thead>
     <row>
      <entry align="center">
       <para>
        Revision Date
       </para>
      </entry>
      <entry align="center">
       <para>
        Summary of Changes
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        October 15, 2014
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          For the Juno release, this guide has been updated with information
          about the Database Service for OpenStack (trove).
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        May 9, 2014
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          Add a command line cheat sheet.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        April 17, 2014
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          For the Icehouse release, this guide has been updated with changes
          to the dashboard plus the moving of the command reference appendix
          as indicated below.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        January 31, 2014
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          Removed the command reference appendix. This information is now in
          the
          <link xlink:href="http://docs.openstack.org/cli-reference/content/"><citetitle>OpenStack
          Command-Line Interface Reference</citetitle></link>.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        December 30, 2013
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          Added the OpenStack Python SDK chapter.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        October 17, 2013
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          Havana release.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        August 19, 2013
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          Editorial changes.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        July 29, 2013
       </para>
      </entry>
      <entry>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>
          First edition of this document.
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </appendix>
</book>
