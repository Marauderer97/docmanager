<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!-- fs 2010-07-10: 

http://wiki.ubuntuusers.de/virsh
http://wiki.libvirt.org/page/TLSSetup
http://wiki.libvirt.org/page/VNCTLSSetu
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.libvirt.overview">
 <title>Overview</title>
 <info/>
 <para>
  &libvirt; is a library that provides a common API for managing popular
  virtualization solutions, among them &kvm;, &lxc;, and &xen;. The
  library provides a normalized management API for these virtualization
  solutions, allowing a stable, cross-hypervisor interface for higher-level
  management tools. The library also provides APIs for management of virtual
  networks and storage on the &vmhost;. The configuration of each
  &vmguest; is stored in an XML file.
 </para>
 <para>
  With &libvirt; you can also manage your &vmguest;s remotely. It
  supports TLS encryption and x509 certificates as well as authentication
  with SASL.
 </para>
 <para>
  The communication between the virtualization solutions (&kvm;,
  &xen;, &lxc;) and the libvirt API is managed by the daemon
  &libvirtd;, which needs to run on the &vmhost;. libvirt client
  applications such as virt-manager, possibly running on a remote machine,
  communicate with &libvirtd; running on the &vmhost;, which services
  the requestusing native hypervisor APIs. Use the following commands to
  start and stop &libvirtd; or check its status:
 </para>
<screen># systemctl start libvirtd.service 

# systemctl status libvirtd.service
libvirtd.service - Virtualization daemon
Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled)
Active: active (running) since Mon 2014-05-12 08:49:40 EDT; 2s ago
[...]

# systemctl stop libvirtd.service

# systemctl status libvirtd.service
[...]
Active: inactive (dead) since Mon 2014-05-12 08:51:11 EDT; 4s ago
[...]</screen>
 <para>
  To automatically start &libvirtd; at boot time, either activate it
  using the &yast; <guimenu>&ycc_runlevel;</guimenu> module or by
  entering the following command:
 </para>
<screen>systemctl enable libvirtd.service</screen>
 <para>
  The following &libvirt;-based tools are available on &productname;.
  They do not need to be run on the &vmhost;, allowing management of
  &vmhost;s and &vmguest;s via remote connections. This enables
  managing &vmhost;s centrally from a single workstation, alleviating the
  need to access each &vmhost; individually.
 </para>
 <variablelist>
  <varlistentry>
   <term>&vmm; (<command>virt-manager</command>)</term>
   <listitem>
    <para>
     The &vmm; is a desktop tool for managing &vmguest;s. It provides
     the ability to control the life cycle of existing machines
     (start/shutdown, pause/resume, save/restore) and create new
     &vmguest;s. It allows managing various types of storage and virtual
     networks. It provides access the graphical console of &vmguest;s
     with a built-in VNC viewer and can be used to view performance
     statistics. <command>virt-manager</command> supports connecting to a
     local &libvirtd;, managing a local &vmhost;, or a remote
     &libvirtd; managing a remote &vmhost;.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="virt_virt-manager.png" width="60%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="virt_virt-manager.png" width="60%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
    <para>
     To start the &vmm;, enter <command>virt-manager</command> at the
     command prompt.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>virt-viewer</command>
   </term>
   <listitem>
    <para>
     A viewer for the graphical console of a &vmguest;. It uses SPICE
     (configured by default on the &vmguest;) or VNC protocols and
     supports TLS and x509 certificates. &vmguest;s can be accessed by
     name, ID, or UUID. If the guest is not already running, the viewer can
     be told to wait until the guest starts, before attempting to connect to
     the console. <command>virt-viewer</command> is not installed by default
     and is available after installing the package
     <systemitem class="resource">virt-viewer</systemitem>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="virt_virt-viewer.png" width="60%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="virt_virt-viewer.png" width="60%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>virt-install</command>
   </term>
   <listitem>
    <para>
     A command line tool for creating new &vmguest;s using the
     &libvirt; library. It supports graphical installations via VNC or
     <xref linkend="gloss.vt.acronym.spice"/> protocols. Given suitable
     command line arguments, <command>virt-install</command> can run
     completely unattended. This allows for easy automation of guest
     installs. <command>virt-install</command> is the default installation
     tool used by the &vmm;.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>vm-install</command>
   </term>
   <listitem>
    <para>
     A tool to set up a &vmguest;, configure its devices and start the
     operating system installation. Starts a GUI wizard when called from a
     graphical user interface. When invoked on a terminal, starts the wizard
     in command-line mode. <command>vm-install</command> can be selected as
     the installation tool when creating a new virtual machine in the
     &vmm;.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><command>virsh</command>
   </term>
   <listitem>
    <para>
     A command line tool to manage &vmguest;s with similar functionality
     as the &vmm;. Allows you to change a &vmguest;'s status (start,
     stop, pause, etc.) to set up new guests and devices and to edit
     existing configurations. <command>virsh</command> is also useful to
     script &vmguest; management operations.
    </para>
    <para>
     <command>virsh</command> works like Subversion's <command>svn</command>
     command or <command>zypper</command>: it takes the first arguments as a
     command and further arguments as options to this command:
    </para>
<screen>virsh [-c <replaceable>URI</replaceable>] <replaceable>command</replaceable><replaceable>domain-id</replaceable> [OPTIONS]</screen>
    <para>
     Just like <command>zypper</command>, <command>virsh</command> can also
     be called without a command. In this case it starts a shell waiting for
     your commands. This mode is useful when having to run subsequent
     commands:
    </para>
<screen>~&gt; virsh -c qemu+ssh://&exampleuserII;@&wsIVname;/system
Enter passphrase for key '/home/&exampleuserII;/.ssh/id_rsa': 
Welcome to virsh, the virtualization interactive terminal.

Type:  'help' for help with commands
       'quit' to quit

virsh # hostname
&wsIVname;</screen>
   </listitem>
  </varlistentry>
 </variablelist>
</chapter>
