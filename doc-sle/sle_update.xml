<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--taroth 2014-11-26: $MAINTAINER, please make sure to hand this chapter 
  over to the support team for proofreading (contact person: fhassel) -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.update.sle">
 <title>Updating &sle;</title>
 <info>
  <abstract>
   <para>
    &slereg; (&slea;) allows to update an existing system to the new
    version, for example, going from &slea; 11 SP3 to &slea; 12. No
    new installation is needed. Existing data, such as home and data
    directories and system configuration, is kept intact. You can update
    from a local CD or DVD drive or from a central network installation
    source.
   </para>

   <para>
    If you are familiar with &sle; updates, upgrades and service packs in
    general, you can check the terminology section for news and then dive
    right into the update overview section. This shows the available update
    possibilities and guides you in planning the overall update, and the
    subsequent sections: step-by-step update instructions to the current
    release, &productname; &productnumber;.
   </para>

   <para>
    The rest of the chapter gives background information on the &suse;
    product lifecycles and Service Pack releases, recommended upgrade
    policies, how &sle; software is current despite non-current version
    numbers ("backports"), and further material referenced by the
    step-by-step update instructions.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec.update.terminology">
  <title>Background Info: Terminology</title>

  <para>
   This chapter uses several terms. In order to understand the information,
   read the definitions below:
  </para>

  <variablelist>
   <varlistentry>
    <term>Backporting</term>
    <listitem>
     <para>
      Backporting is the act of adapting specific changes from a newer
      version of software and applying it to an older version. The most
      commonly used case is fixing security holes in older software
      components. Usually it is also part of a maintenance model to supply
      enhancements or (less commonly) new features.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Delta RPM</term>
    <listitem>
     <para>
      A delta RPM consists only of the binary diff between two defined
      versions of a package, and therefore has the smallest download size.
      Before being installed, the full RPM package is rebuilt on the local
      machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Downstream</term>
    <listitem>
     <para>
      A metaphor of how software is developed in the open source world
      (compare it with <emphasis>upstream</emphasis>). The term
      <emphasis>downstream</emphasis> refers to people or organizations like
      &suse; who integrate the source code from upstream with other
      software to build a distribution which is then used by end users.
      Thus, the software flows downstream from its developers via the
      integrators to the end users.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Extensions</term>
    <term>Add-On Products</term>
    <listitem>
     <para>
      <remark>froh 2014-06-03: review</remark>
      Extensions (also known as add-on products) provide additional
      functionality of product value to &productname;. They are provided
      by SUSE and by SUSE partners, and they are registered and installed on
      top of the base product &productname;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Modules</term>
    <listitem>
<!-- XPointers are currently not proven to work well with our
          locdrop procedures. Disable for now. -->
<!-- <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="inst_yast2.xml"
       xpointer="element(ann.i.yast2.inst_mode.add-on.modules/2)"/> -->
     <para>
      Modules are fully supported parts of &productname; with a different
      life cycle. They have a clearly defined scope and are delivered via
      online channel only. Registering at the &scc; is a prerequisite for
      being able to subscribe to these channels.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Online Migration</term>
    <listitem>
     <para>
      Updating to a Service Pack (SP) by using the online update tools
      (rather than the installation media) to install the respective
      patches. It updates all packages of the installed system to the latest
      state&mdash;including updates&mdash;of SP3 plus SP2 updates.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Package</term>
    <listitem>
     <para>
      A package is a compressed file in <literal>rpm</literal> format that
      contains all files for a particular program, including optional
      components like configuration, examples, and documentation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Patch</term>
    <listitem>
     <para>
      A patch consists of one or more packages and may be applied by means
      of delta RPMs. It may also introduce dependencies to packages that are
      not installed yet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Major Release</term>
    <term>General Availability (GA) Version</term>
    <listitem>
     <para>
      The Major Release of &sle; (or any software product) is a new
      version which brings new features and tools, decomissions previously
      deprecated components and comes with backwards incompatible changes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Service Packs (SP)</term>
    <listitem>
     <para>
      Combines several patches into a form which is easy to install or
      deploy. Service packs are numbered and usually contain security fixes,
      updates, upgrades, or enhancements of programs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upstream</term>
    <listitem>
     <para>
      A metaphor of how software is developed in the open source world
      (compare it with <emphasis>downstream</emphasis>). The term
      <emphasis>upstream</emphasis> refers to the original project, author
      or maintainer of a software that is distributed as source code.
      Feedback, patches, feature enhancements, or other improvements flow
      from end users or contributors to upstream developers. They decide if
      the request will be integrated or rejected.
     </para>
     <para>
      If the project members decide to integrate the request, it will show
      up in newer versions of the software. An accepted request will benefit
      all parties involved.
     </para>
     <para>
      If a request is not accepted, it may be for different reasons. Either
      it is in a state which is not compliant with the project's guidelines,
      it is invalid, it is already integrated, or it is not in the interest
      or roadmap of the project. An unaccepted request makes it harder for
      upstream developers as they need to synchronize their patches with the
      upstream code. This practice is generally avoided, but sometimes it is
      still needed.
     </para>
    </listitem>
   </varlistentry>
<!-- Taken from FATE#308189, see also bnc#711791 -->
   <varlistentry>
    <term>Update</term>
    <listitem>
     <para>
      Installation of a newer <emphasis>minor</emphasis> version of a
      package.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrade</term>
    <listitem>
     <para>
      Installation of a newer <emphasis>major</emphasis> version of a
      package or distribution, which brings <emphasis>new
      features</emphasis>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.update.proc.prep.paths">
  <title>Supported Upgrade Paths for &slea;</title>

  <important>
   <title>Cross-architecture Upgrades Are Not Supported</title>
   <para>
    Cross-architecture upgrades, such as upgrading from a 32-bit version of
    &productname; to the 64-bit version, or upgrading from big endian to
    little endian are <emphasis>not</emphasis> supported!
   </para>
   <para>
    Specifically, &slea; 11 SP3 on &ppc; (big endian) to &slea; 12
    on &ppc; (new: little endian!), is <emphasis>not</emphasis>
    supported.
   </para>
   <para>
    Also, as &sle; 12 is 64bit only, upgrades from any 32bit &sle; 11
    systems to &sle; 12 are <emphasis>not</emphasis> supported.
   </para>
  </important>

  <variablelist>
   <varlistentry>
    <term>Upgrading from &sle; 10 (any Service Pack)</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12. A fresh
      installation is recommended instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 GA or &sle; 11 SP1</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12.
     </para>
     <para>
      If you cannot do a fresh install, you need to first update from
      &sle; 11 GA to SP1, and then from &sle; 11 SP1 to SP2, before
      you can proceed. These steps are described in the
      <link xlink:href="https://www.suse.com/documentation/sles11/">&sle;
      11 Deployment Guide</link>.
     </para>
     <para>
      Then proceed with the next step:
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 SP2</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12.
     </para>
     <para>
      If you cannot do a fresh install, you need to upgrade from &sle;
      11&nbsp;SP2 to SP3, before you can proceed. These steps are
      described in the
      <link xlink:href="https://www.suse.com/documentation/sles11/">&sle;
      11 Deployment Guide</link>.
     </para>
     <para>
      Then proceed with the next step:
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 SP3 to &sle; 12</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.update.sle12"/> for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.update.prep">
  <title>General Preparations for Updating</title>

  <para>
   Before starting the update procedure, make sure your system is properly
   prepared. Among others, preparation involves backing up data and checking
   the release notes.
  </para>

  <sect2 xml:id="sec.update.prep.relnotes">
   <title>Check the Release Notes</title>
   <para>
    In the release notes you can find additional information on what has
    changed since the previous release of &sle;. Please verify there if
    your specific hardware or set up needs special considerations, which of
    your favorite specific software packages have changed significantly, and
    which precautions you should take in addition to the general
    recommendations of this section. The Release Notes also provide last
    minute information and known issues, that couldn't make it to the manual
    on time.
   </para>
   <para>
    The current version of the release notes document containing the latest
    information on &productname; can be read online at
    <link xlink:href="http://www.suse.com/doc/"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.backup">
   <title>Make a Backup</title>
   <para>
    Before updating, copy existing configuration files to a separate medium
    (such as tape device, removable hard disk, etc.) to back up the data.
    This primarily applies to files stored in <filename>/etc</filename> as
    well as some of the directories and files in <filename>/var</filename>
    and <filename>/opt</filename>. You may also want to write the user data
    in <filename>/home</filename> (the <envar>HOME</envar> directories) to a
    backup medium. Back up this data as &rootuser;. Only &rootuser;
    has read permissions for all local files.
   </para>
   <para>
    If you have selected <guimenu>Update an Existing System</guimenu> as the
    installation mode in &yast;, you can choose to do a (system) backup
    at a later point in time. You can choose to include all modified files
    and files from the <filename>/etc/sysconfig</filename> directory.
    However, this is not a complete backup, as all the other important
    directories mentioned above are missing. Find the backup in the
    <filename>/var/adm/backup</filename> directory.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.disks">
   <title>Partitioning and Disk Space</title>
   <para>
    Before starting your update, make note of the root partition. The
    command <command>df&nbsp;/</command> lists the device name of the
    root partition. For example, in <xref linkend="aus.update.df"/>, the
    root partition to write down is <filename>/dev/sda3</filename> (mounted
    as <filename>/</filename>).
   </para>
   <example xml:id="aus.update.df">
    <title>List with <command>df -h</command></title>
<screen os="sled">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       39G  1.6G   37G   4% /windows/C
/dev/sda2      4.6G  2.6G  2.1G  57% /windows/D</screen>
<screen os="sles">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       44G    4G   40G   9% /data</screen>
   </example>
   <para>
    Software tends to <quote>grow</quote> from version to version.
    Therefore, take a look at the available partition space with
    <command>df</command> before updating. If you suspect you are running
    short of disk space, secure your data before updating and repartitioning
    your system. There is no general rule regarding how much space each
    partition should have. Space requirements depend on your particular
    partitioning profile and the software selected.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.vms">
   <title>Shut Down Virtual Machine Guests</title>
   <para>
    If your machine serves as a &vmhost; for &kvm; or &xen;, make
    sure to properly shut down all running &vmguest;s prior to the
    update. Otherwise you may not be able to access the guests after the
    update.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.sle12">
  <title>Upgrading to &sle; 12</title>

  <remark>toms 2014-02-11: See FATEs #315969 and #313189</remark>

  <para>
   Upgrading from &sle;&nbsp;11 SP3 (or higher) to &sle;&nbsp;12
   is supported using one of the following methods:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Manual upgrade, booting from an installation medium (see
     <xref linkend="sec.update.sle12.manual"/>).
    </para>
   </listitem>
   <listitem>
    <para>
     Semi-automated migration, possible via SSH <phrase os="sles">(see
     <xref linkend="sec.update.sle12.automated"/>)</phrase>
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.update.sle12.manual">
   <title>Manual Upgrade from &slea;&nbsp;11 SP3 to &slea; 12, Using an Installation Source</title>
   <para>
    To upgrade your system this way, you need to boot from an installation
    source, like you would do for a fresh installation. However, when the
    boot screen appears, you need to select <guimenu>Upgrade</guimenu>
    (instead of <guimenu>Installation</guimenu>). The installation source to
    boot from can be one of the following:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      A local installation medium (like a DVD, or an ISO image on a USB mass
      storage device). For detailed instructions, see
      <xref linkend="sec.update.sle12.manual.dvd"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      A network installation source. You can either boot from the local
      medium and then select the respective network installation type, or
      boot via PXE. For detailed instructions, see
      <xref linkend="sec.update.sle12.manual.network"/>.
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec.update.sle12.manual.dvd">
    <title>Upgrading from an Installation Medium</title>
    <para>
     The procedure below describes booting from a DVD as an example, but you
     can also use another local installation medium like an ISO image on a
     USB mass storage device. The way to select the boot method and to start
     up the system from the medium depends on the system architecture and on
     the fact if the machine has a traditional BIOS or UEFI. For details,
     see the links below.
    </para>
    <procedure xml:id="pro.update.sle12.manual.dvd">
     <title>Manually Upgrading from &slea;&nbsp;11 SP3 to &slea;&nbsp;12, Using a DVD</title>
     <step>
      <para>
       Insert DVD 1 of the &sle; 12 installation media and boot your
       machine. A <guimenu>Welcome</guimenu> screen is displayed, followed
       by the boot screen.
      </para>
     </step>
     <step>
      <para>
       Select the respective boot method to start the system from the medium
       (see <xref linkend="sec.i.yast2.method"/>).
      </para>
     </step>
     <step>
      <para>
       Start up the system from the medium (see
       <xref linkend="sec.i.yast2.startup"/>).
      </para>
     </step>
     <step>
      <para>
       Proceed with the upgrade process as described in
       <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 xml:id="sec.update.sle12.manual.network">
    <title>Upgrading from a Network Installation Source</title>
    <para>
     If you want to start an upgrade from a network installation source,
     make sure that the following requirements are met:
    </para>
    <variablelist>
     <title>Requirements for Upgrading from a Network Installation Source</title>
     <varlistentry>
      <term>Network Installation Source</term>
      <listitem>
       <para>
        A network installation source is set up according to
        <xref linkend="sec.deployment.remoteinst.instserver"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Network Connection and Network Services</term>
      <listitem>
       <para>
        Both the installation server and the target machine have a
        functioning network connection. The network must provide the
        following services: a name service, DHCP (optional, but needed for
        booting via PXE), and OpenSLP (optional).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Installation Media</term>
      <listitem>
       <para>
        You have a &sle; DVD 1 (or a local ISO image) at hand to boot the
        target system <emphasis>or</emphasis> a target system that is set up
        for booting via PXE according to
        <xref linkend="sec.deployment.remoteinst.boot.pxeprep" xrefstyle="HeadingOnPage"/>.
        Refer to <xref linkend="cha.deployment.remoteinst"/> for in-depth
        information on starting the upgrade from a remote server.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     When upgrading from network installation source, you can either boot
     from the local medium and then select the respective network
     installation type, or boot via PXE. Select the method of your choice
     and proceed as described in
     <xref linkend="pro.update.sle12.manual.network.boot-from-dvd" xrefstyle="select:label"/>
     or
     <xref linkend="pro.update.sle12.manual.network.pxe-boot" xrefstyle="select:label"/>.
    </para>
    <procedure xml:id="pro.update.sle12.manual.network.boot-from-dvd">
     <title>Manually Upgrading from &slea;&nbsp;11 SP3 to &slea;&nbsp;12 via Network Installation Source&mdash;Booting from DVD</title>
     <para>
      This procedure describes booting from a DVD as an example, but you can
      also use another local installation medium like an ISO image on a USB
      mass storage device. The way to select the boot method and to start up
      the system from the medium depends on the system architecture and on
      the fact if the machine has a traditional BIOS or UEFI. For details,
      see the links below.
     </para>
     <step>
      <para>
       Insert DVD 1 of the &sle; 12 installation media and boot your
       machine. A <guimenu>Welcome</guimenu> screen is displayed, followed
       by the boot screen.
      </para>
     </step>
     <step>
      <para>
       Select the type of network installation source you want to use (FTP,
       HTTP, NFS, SMB, or SLP). Usually you get this choice by pressing
       <keycap>F4</keycap>, but in case your machine is equipped with UEFI
       instead of a traditional BIOS, you may need to manually adjust boot
       parameters. For details, see <xref linkend="sec.i.yast2.source.net"/>
       in <xref linkend="cha.inst"/>.
      </para>
     </step>
     <step>
      <para>
       Proceed with the upgrade process as described in
       <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
      </para>
     </step>
    </procedure>
    <procedure xml:id="pro.update.sle12.manual.network.pxe-boot">
     <title>Manually Upgrading from &slea;&nbsp;11 SP3 to &slea;&nbsp;12 via Network Installation Source&mdash;Booting via PXE</title>
     <para>
      To perform an upgrade from a network installation source using PXE
      Boot, proceed as follows:
     </para>
     <step>
      <para>
       Adjust the setup of your DHCP server to provide the address
       information needed for booting via PXE. For details, see
       <xref linkend="sec.deployment.remoteinst.boot.pxeprep"/>.
      </para>
     </step>
     <step>
      <para>
       Set up a TFTP server to hold the boot image needed for booting via
       PXE. Use DVD 1 of your &sle; 12 installation media for this or
       follow the instructions in
       <xref linkend="sec.deployment.remoteinst.boot.tftp"/>.
      </para>
     </step>
     <step>
      <para>
       Prepare PXE Boot and Wake-on-LAN on the target machine.
      </para>
     </step>
     <step>
      <para>
       Initiate the boot of the target system and use VNC to remotely
       connect to the installation routine running on this machine. For more
       information, see
       <xref linkend="sec.deployment.remoteinst.monitor.vnc"/>.
      </para>
     </step>
     <step>
      <para>
       Proceed with the upgrade process as described in
       <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.update.sle12.automated">
   <title>Automated Migration from &slea; 11 SP3 to &slea; 12</title>
   <para>
    To perform an automated migration, proceed as follows:
   </para>
   <procedure xml:id="pro.update.sle12.automated">
    <title>Automated Migration from &sle; 11 SP3 to &sle; 12</title>
    <remark>toms 2014-03-19: See FATE#315037</remark>
    <remark role="future">toms 2014-03-20: From SLE12 SP1 on, we should probably base
    this example on GRUB2, but not for GA.</remark>
    <step>
     <para>
      Copy the installation Kernel <filename>linux</filename> and the file
      <filename>initrd</filename> from
      <filename>/boot/x86_64/loader/</filename> of your first installation
      DVD to your system's <filename>/boot</filename> directory:
     </para>
<screen><command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/linux /boot/linux.upgrade
<command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/initrd /boot/initrd.upgrade</screen>
     <para>
      <replaceable>DVDROOT</replaceable> denotes the path where your system
      mounts the DVD, usually
      <filename>/run/media/$USER/$DVDNAME</filename>.
     </para>
    </step>
    <step>
     <para>
      Open the GRUB legacy configuration file
      <filename>/boot/grub/menu.lst</filename> and add another section. For
      other boot loaders, edit the respective configuration file(s). Adjust
      device names accordingly. For example:
     </para>
<screen>title Linux Upgrade Kernel
kernel (hd0,0)/boot/linux.upgrade root=/dev/sda1 upgrade=1 <replaceable>OPTIONAL_PARAMETERS</replaceable>
initrd (hd0,0)/boot/initrd.upgrade</screen>
     <para>
      <replaceable>OPTIONAL_PARAMETERS</replaceable> denote additional boot
      parameters which you might need to boot your system and perform the
      upgrade. These may be kernel parameters needed for your
      system&mdash;check if you to need review and copy those from an
      existing GRUB entry. They also may be &suse;
      <link xlink:href="http://en.opensuse.org/Linuxrc">linuxrc parameters,
      documented online</link>.
     </para>
    </step>
    <step>
     <para>
      If the upgrade should be done automated <phrase os="sles"> (see
      <xref linkend="sec.update.auto.run"/>)</phrase>, add the
      <option>autoupgrade=1</option> to the end of the
      <literal>kernel</literal> line in your GRUB configuration.
     </para>
    </step>
    <step>
     <para>
      Reboot your machine and select the newly added section from the boot
      menu (here: <emphasis>Linux Upgrade Kernel</emphasis>). You can use
      <command>grubonce</command> to preselect the newly created GRUB entry
      for an unattended automatic reboot into the newly created entry. You
      can also use <command>reboot</command> to initiate the reboot from the
      command line.
     </para>
    </step>
    <step>
     <para>
      Proceed with the usual upgrade process as described in
      <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
     </para>
    </step>
    <step>
     <para>
      After the upgrade process was finished successfully, remove the
      installation Kernel and initrd files
      (<filename>/boot/linux.upgrade</filename> and
      <filename>/boot/initrd.upgrade</filename>). They are useless now and
      are not needed anymore.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update.sle12.start.upgr.after.boot">
   <title>Starting the Upgrade Process After Booting</title>
   <para>
    <remark>taroth 2014-11-13: argh, the following is terminology hell regarding
     the software strings: "upgrade"/"update" are used intermittently and
     without clear differentiation...</remark>
   </para>
   <procedure>
    <step>
     <para>
      After you have booted (either from an installation medium or the
      network), select the <guimenu>Upgrade</guimenu> entry on the boot
      screen.
     </para>
     <warning>
      <title>Wrong Choice May Lead to Data Loss</title>
      <para>
       If you select <guimenu>Installation</guimenu> instead of
       <guimenu>Upgrade</guimenu>, data may be lost later. You need to be
       extra careful to not destroy your data partitions by doing a fresh
       installation, e.g. by repartitioning the disks (which can destroy the
       existing partitions) or by reformatting the data partitions (which
       erases all data on them).
      </para>
      <para>
       Make sure to select <guimenu>Upgrade</guimenu> here.
      </para>
     </warning>
     <para>
      &yast; starts the installation system.
     </para>
    </step>
    <step>
     <para>
      On the <guimenu>Welcome</guimenu> screen choose
      <guimenu>Language</guimenu> and <guimenu>Keyboard</guimenu> and accept
      the license agreement. Proceed with <guimenu>Next</guimenu>.
     </para>
     <para>
      &yast; checks your partitions for already installed &sle;
      systems.
     </para>
    </step>
    <step>
     <para>
      On the <guimenu>Select for Upgrade</guimenu> screen, select the
      partition to upgrade and click <guimenu>Next</guimenu>.
     </para>
     <para>
      &yast; mounts the selected partition and displays all repositories
      that have been found on the partition that you wan to upgrade.
     </para>
    </step>
    <step>
     <para>
      On the <guimenu>Previously Used Repositories</guimenu> screen, adjust
      the status of the repositories: enable those you want to include in
      the upgrade process and disable any repositories that are no longer
      needed. Proceed with <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      On the <guimenu>Registration</guimenu> screen, select whether to
      register the upgraded system now (by entering your registration data
      and clicking <guimenu>Next</guimenu>) or if to <guimenu>Skip
      Registration</guimenu>. For details on registering your system, see
      <xref linkend="sec.add-ons.register"/>.
     </para>
     <para>
      The following <guimenu>Installation Settings</guimenu> screen is the
      last step before the upgrade starts.
     </para>
    </step>
    <step>
     <para>
      Review the <guimenu>Installation Settings</guimenu> for the upgrade,
      especially the <guimenu>Update Options</guimenu>. Choose between the
      following options:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <guimenu>Only Update Installed Packages</guimenu>, in which case you
        might miss new features shipped with the latest &sle; version.
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>Update with Installation of New Software and
        Features</guimenu>. Click <guimenu>Select Patterns</guimenu> if you
        want to enable or disable patterns and packages according to your
        wishes.
       </para>
      </listitem>
     </itemizedlist>
<!--taroth 2014-11-19: fix for bsc#904188-->
     <note>
      <title>Choice of Desktop</title>
      <para>
       If you used KDE before upgrading to &sle; 12
       (<varname>DEFAULT_WM</varname> in
       <filename>/etc/sysconfig/windowmanager</filename> was set to
       <literal>kde*</literal>), your desktop environment will automatically
       be replaced with GNOME after the upgrade. By default, KDM display
       manager will be replaced with GDM.
      </para>
      <para>
       To change the choice of desktop environment or window manager, adjust
       the software selection by clicking <guimenu>Select
       Patterns</guimenu>.
      </para>
     </note>
    </step>
    <step>
     <para>
      If all settings are according to your wishes, start the installation
      and removal procedure by clicking <guimenu>Update</guimenu>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update.sle12.manager">
   <title>Updating via &susemgr;</title>
   <para>
    &susemgr; is a server solution for providing updates, patches, and
    security fixes for &sle; clients. It comes with a set of tools and a
    Web-based user interface for management tasks.
   </para>
   <para>
    The &susemgr; documentation at
    <link xlink:href="http://www.suse.com/doc/"/> gives an overview of its
    features as well as instructions on how to set up server and clients.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.nmm">
  <title>Background info: The Product Lifecycle of &sle;</title>

  <para>
   <remark>
    http://support.novell.com/lifecycle/
    https://www.suse.com/support/policy.html
    https://www.suse.com/support/self-support.html
    https://www.novell.com/docrep/2013/04/long_term_service_pack_support_flyer.pdf
   </remark>
   &sls; has a 13-year life-cycle: 10 years of general support and 3
   years of extended support.
  </para>

  <para>
   &sled; has a 10-year life-cycle: 7 years of general support and 3
   years of extended support.
  </para>

  <para>
   Major releases are made every 4 years. Service packs are made every 18
   months.
  </para>

  <para>
   &suse; supports previous service packs for 6 months after the release
   of the new service pack.
   <xref linkend="fig.update.releases.service.packs"/> depicts some of the
   mentioned aspects.
  </para>

  <figure xml:id="fig.update.releases.service.packs">
   <title>Major Releases and Service Packs</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="new-maintenance-model.svg" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="new-maintenance-model.png" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   If you need additional time to design, validate and test your upgrade
   plans, Long Term Service Pack Support can extend the support you get an
   additional 12 to 36 months in twelve month increments, giving you a total
   of 3 to 5 years of support on any given service pack (see
   <xref linkend="fig.update.maintenance.long-term-service-pack"/>).
  </para>

  <figure xml:id="fig.update.maintenance.long-term-service-pack">
   <title>Long Term Service Pack Support</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="new-maintenance-model+ltss.svg" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="new-maintenance-model+ltss.png" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <sect2 xml:id="sec.update.supportlevel-lifecycle">
   <title>Support Levels</title>
   <para>
    The range for extended support levels starts from year 10 and ends in
    year 13. These contain continued L3 engineering level diagnosis and
    reactive critical bug fixes. These support levels proactively update
    trivial local root exploits in Kernel or other root exploits directly
    executable without user interaction. Furthermore they support existing
    workloads, software stacks, and hardware with limited package exclusion
    list. Find an overview in <xref linkend="tab.security-and-bug-fixes"/>.
   </para>
   <table xml:id="tab.security-and-bug-fixes">
    <title>Security Updates and Bug Fixes</title>
    <tgroup cols="6">
     <colspec colname="c1"/>
     <colspec colname="c2"/>
     <colspec colname="c3"/>
     <colspec colname="c4"/>
     <colspec colname="c5"/>
     <colspec colname="c6"/>
     <thead>
      <row>
       <entry/>
       <entry namest="c2" nameend="c4" align="center">
        <para>
         General Support for Most Recent Service Pack (SP)
        </para>
       </entry>
       <entry>
        <para>
         General Support for Previous SP, with LTSS
        </para>
       </entry>
       <entry>
        <para>
         Extended Support with LTSS
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Feature
        </para>
       </entry>
       <entry>
        <para>
         Year 1-5
        </para>
       </entry>
       <entry>
        <para>
         Year 6-7
        </para>
       </entry>
       <entry>
        <para>
         Year 8-10
        </para>
       </entry>
       <entry>
        <para>
         Year 4-10
        </para>
       </entry>
       <entry>
        <para>
         Year 10-13
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Technical Services
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Access to Patches and Fixes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Access to Documentation and Knowledge Base
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Support for Existing Stacks and Workloads
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Support for New Deployments
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Enhancement Requests
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Hardware Enablement and Optimization
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Driver updates via SUSE SolidDriver Program (formerly PLDP)
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Backport of Fixes from recent SP
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         N/A
        </para>
       </entry>
       <entry>
        <para>
         N/A
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Critical Security Updates
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Defect Resolution
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited (Severity Level 1 and 2 defects only)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Severity Level 1 and 2 defects only)
        </para>
       </entry>
       <entry>
        <para>
         Limited (Severity Level 1 and 2 defects only)
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec.update.nmm.repositories">
   <title>Repository Model</title>
   <para>
    The repository layout corresponds to the product lifecycles.
    <xref linkend="tab.update.nmm.repositories.sp2"/> contains a list of all
    repositories from &sle; 11 SP2 to &sle; 12.
   </para>
   <table xml:id="tab.update.nmm.repositories.sp2">
    <title>Repository Layout for &sle; 11 SP2 and SP3 and for &sle; 12</title>
<!--
         toms 2013-03-20:
         Used simplelist here as it turned out itemizedlist occupies too
         much space
    -->
    <tgroup cols="3">
     <colspec colnum="1" colname="c1" colwidth="1.2*"/>
     <colspec colnum="2" colname="c2" colwidth="3*"/>
     <colspec colnum="3" colname="c3" colwidth="3*"/>
     <thead>
      <row>
       <entry>
        <para>
         Type
        </para>
       </entry>
       <entry>
        <para>
         &slsa;
        </para>
       </entry>
       <entry>
        <para>
         &sleda;
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Required Repositories
        </para>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP1-Pool</literal>
         </member>
         <member><literal>&slsa;11-SP1-Updates</literal>
         </member>
         <member><literal>&slsa;11-SP2-Core</literal>
         </member>
         <member><literal>&slsa;11-SP2-Updates</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP3-Pool</literal>
         </member>
         <member><literal>&slsa;11-SP3-Updates</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&slsa;12-GA-Pool</literal>
         </member>
         <member><literal>&slsa;12-GA-Updates</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP1-Pool</literal>
         </member>
         <member><literal>&sleda;11-SP1-Updates</literal>
         </member>
         <member><literal>&sleda;11-SP2-Core</literal>
         </member>
         <member><literal>&sleda;11-SP2-Updates</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP3-Pool</literal>
         </member>
         <member><literal>&sleda;11-SP3-Updates</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&sleda;12-GA-Pool</literal>
         </member>
         <member><literal>&sleda;12-GA-Updates</literal>
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Optional Repositories
        </para>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP2-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;11-SP2-Debuginfo-Updates</literal>
         </member>
         <member><literal>&slsa;11-Extras</literal>
         </member>
         <member><literal>&slsa;11-SP2-Extension-Store</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP3-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;11-SP3-Debuginfo-Updates</literal>
         </member>
         <member><literal>&slsa;11-SP3-Extension-Store</literal>
         </member>
         <member><literal>&slsa;11-Extra</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&slsa;12-GA-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;12-GA-Debuginfo-Updates</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP2-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;11-SP2-Debuginfo-Updates</literal>
         </member>
         <member><literal>&sleda;11-Extras</literal>
         </member>
         <member><literal>&sleda;11-SP2-Extension-Store</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP3-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;11-SP3-Debuginfo-Updates</literal>
         </member>
         <member><literal>&sleda;11-SP3-Extension-Store</literal>
         </member>
         <member><literal>&sleda;11-Extra</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&sleda;12-GA-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;12-GA-Debuginfo-Updates</literal>
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         NEW: <emphasis>Module</emphasis> Specific Repositories
        </para>
       </entry>
       <entry>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>sle-module-web-scripting</literal>
         </member>
         <member><literal>sle-module-adv-systems-management</literal>
         </member>
         <member><literal>sle-module-public-cloud</literal>
         </member>
         <member><literal>sle-module-legacy</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         12
        </para>
        <remark>2014-08-07 froh: currently, there are no modules for SLED.</remark>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <variablelist>
    <title>Description of Required Repositories</title>
    <varlistentry>
     <term>Updates</term>
     <listitem>
      <para>
       Maintenance updates to packages in the corresponding
       <literal>Core</literal> or <literal>Pool</literal> repository.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pool</term>
     <listitem>
      <para>
       Containing all binary RPMs from the installation media, plus pattern
       information and support status metadata.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <title>Description of Optional Repositories</title>
    <varlistentry>
     <term>Debuginfo-Pool</term>
     <term>Debuginfo-Updates</term>
     <listitem>
      <para>
       These repositories contain static content. Of these two, only the
       <literal>Debuginfo-Updates</literal> repository receives updates.
       Enable these repositories if you need to install libraries with debug
       information in case of an issue.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <sect3 xml:id="sec.update.nmm.repositories.origin">
    <title>Origin of Packages</title>
    <formalpara>
     <title>&sle; 11 SP3</title>
     <para>
      With the update to SP3 there are only two repositories available:
      <literal os="sles">&slsa;11-SP3-Pool</literal><literal os="sled">&sleda;11-SP3-Pool</literal>
      and
      <literal os="sles">&slsa;11-SP3-Updates</literal><literal os="sled">&sleda;11-SP3-Updates</literal>.
      Any previous repositories from SP2 are visible, but not enabled. These
      disabled repositories are only needed for users who have particular
      needs.
     </para>
    </formalpara>
    <formalpara>
     <title>&sle; 12</title>
     <para>
      With the update to &sle; 12 there are only two repositories
      available:
      <literal os="sles">&slsa;12-GA-Pool</literal><literal os="sled">&sleda;12-GA-Pool</literal>
      and
      <literal os="sles">&slsa;12-GA-Updates</literal><literal os="sled">&sleda;12-GA-Updates</literal>.
      Any previous repositories from &sle; 11 SP3 are disabled.
     </para>
    </formalpara>
   </sect3>
   <sect3 xml:id="sec.update.nmm.repositories.working">
    <title>Working with Repositories</title>
    <para>
     On registration, the system receives repositories from the &ncc;.
     The repository names map to specific URIs in the customer center (see
     <link xlink:href="&sccurl;"/>). To list all available repositories
     on your system, use <command>zypper</command> as follows:
    </para>
<screen>zypper repos -u</screen>
<!-- zypper lr -u -->
    <para>
     This gives you a list of all available repositories on your system.
     Each repository is listed by its alias, name and whether it is enabled
     and will be refreshed. The option <option>-u</option> gives you also
     the URI from where it originated.
    </para>
    <para>
     If you want to remove old repositories (for example, from SP1), use
     <command>zypper removerepo</command> and the names of the repositories.
     For example, to remove the old SP1 and SP2 repositories, use the
     following command:
    </para>
<screen>zypper removerepo SLES11-SP1-Pool SLES11-SP1-Updates \
    SLE11-SP1-Debuginfo-Pool SLE11-SP1-Debuginfo-Updates \
    SLES11-SP2-Core SLES11-SP2-Updates \
    SLE11-SP2-Debuginfo-Core SLES11-SP2-Extension-Store\
    SLE11-SP2-Debuginfo-Updates</screen>
    <para>
     If you want to re-add some of your repositories, log in to
     <link xlink:href="&sccurl;"/> and select from the menu <menuchoice>
     <guimenu>My Products</guimenu> <guimenu>Mirror Credentials</guimenu>
     </menuchoice>. There you can see a list of URIs; Only repositories from
     this list of products can be added. For example, to add the SP2
     Extension Store, use the following command (one line, without the
     backslash):
    </para>
<screen>zypper addrepo -n SLES11-SP2-Extension-Store \
    https://nu.novell.com/repo/\$RCE/SLES11-SP2-Extension-Store/nu_novell_com:SLES11-SP2-Extension-Store</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.backports">
  <title>Background: Backporting Source Code</title>

  <para>
   &suse; extensively uses backports, i.e. the migration of current
   software fixes and features into released &sle; packages. The
   information in this section helps you understand why it can be deceptive
   to compare version numbers in order to judge the capabilities and the
   security of &sle; software packages. You'll understand how &suse;
   keeps the system software secure and current while maintaining
   compatibility for your application software on top of &sle; products.
   You'll also learn how to check which public security issues actually are
   addressed in your &sle; system software, and how current your software
   really is.
<!--To
       do so, we first provide some background on how free software is
       developed and how it gets into Linux distributions.-->
  </para>

  <sect2 xml:id="sec.update.backports.why">
   <title>Why Backporting?</title>
   <para>
    Upstream developers are primarily concerned with advancing the software
    they develop. In many cases they combine fixing bugs with introducing
    new features which have not yet received extensive testing and which may
    introduce new bugs.
   </para>
   <para>
    For distribution developers, it is important to distinguish between:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      bugfixes with a limited potential for disrupting functionality; and
     </para>
    </listitem>
    <listitem>
     <para>
      changes that may disrupt existing functionality.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    In most cases, distribution developers do not follow all upstream
    changes once a package has become part of a released distribution.
    Usually they stick instead with the upstream version that they initially
    released and create patches based on upstream changes to fix bugs. This
    practice is known as <emphasis>backporting</emphasis>.
   </para>
   <para>
    Distribution developers generally will only introduce a newer version of
    software in two cases:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      when the changes between their packages and the upstream versions have
      become so large that backporting is no longer feasible, or
     </para>
    </listitem>
    <listitem>
     <para>
      for software that inherently ages badly, like anti-malware software.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec.update.backports.reasons-for">
   <title>Reasons for Backporting</title>
   <para>
    &suse; uses backports extensively as we strike a good balance between
    a number of concerns for enterprise software. The most important of
    these are:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Having stable interfaces (APIs) that software vendors can rely on when
      building products for use on &suse;'s enterprise products.
     </para>
    </listitem>
    <listitem>
     <para>
      Ensuring that packages used in the release of &suse;'s enterprise
      products are of the highest quality and have been thoroughly tested,
      both in themselves and as part of the whole enterprise product.
     </para>
    </listitem>
    <listitem>
     <para>
      Maintaining the various certifications of &suse;'s enterprise
      products by other vendors, like certifications for Oracle or SAP
      products.
     </para>
    </listitem>
    <listitem>
     <para>
      Allowing &suse;'s developers to focus on making the next version of
      the product as good as they can make it, rather than them having to
      spread their focus thinly across a wide range of releases.
     </para>
    </listitem>
    <listitem>
     <para>
      Keeping a clear view of what is in a particular enterprise release, so
      that
<!--Novell Technical Services-->
      our support can provide accurate and timely information about it.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec.update.backports.reasons-against">
   <title>Reasons against Backports</title>
   <para>
    It is a general policy rule that no new upstream versions of a package
    are introduced into our enterprise products. This rule is not an
    absolute rule however. For a limited class of packages, in particular
    anti-virus software, security concerns weigh heavier than the
    conservative approach that is preferable from the perspective of quality
    assurance. For packages in that class, occasionally newer versions are
    introduced into a released version of an enterprise product line.
   </para>
   <para>
    Sometimes also for other types of packages the choice is made to
    introduce a new version rather than a backport. This is done when
    producing a backport is not economically feasible or when there is a
    very relevant technical reason to introduce the newer version.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.backports.">
   <title>The Implications of Backports for Interpreting Version Numbers</title>
   <para>
    Because of the practice of backporting, one cannot simply compare
    version numbers to determine whether a &suse; package contains a fix
    for a particular issue or has had a particular feature added to it. With
    backporting, the upstream part of a &suse; package's version number
    merely indicates what upstream version the &suse; package is based
    on. It may contain bug fixes and features that are not in the
    corresponding upstream release, but that have been backported into the
    &suse; package.
   </para>
   <para>
    <remark>froh: there will be some new "CVE fixed in &sle;"
    lookup tool, need to work with sarsene@ to figure the details or a
    link.</remark>
    One particular area where this limited value of version numbers when
    backporting is involved can cause problems is with security scanning
    tools. Some security vulnerability scanning tools (or particular tests
    in such tools) operate solely on version information. These tools/tests
    are thus prone to generating <quote>false positives</quote> (claims that
    a vulnerable piece of software has been found which in fact is not
    vulnerable) when backports are involved. When evaluating reports from
    security scanning tools, one should always investigate whether an entry
    is based on a version number or on an actual test of whether an actual
    vulnerability exists.
   </para>
  </sect2>

  <sect2>
   <title>How to Check Which Bugs are Fixed and Which Features are Backported and Available</title>
   <para>
    There are a number of locations where information regarding backported
    bug fixes and features is stored:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The package's changelog:
     </para>
<screen>rpm -q --changelog name-of-installed-package
rpm -qp --changelog packagefile.rpm</screen>
     <para>
      The output briefly documents the change history of the package.
     </para>
    </listitem>
    <listitem>
     <para>
      The package changelog may contain entries like
      <literal>bnc#1234</literal> that refer to bugs in Novell's Bugzilla
      tracking system or links to other bugtracking systems. (Because of
      confidentiality policies, not all such information may be accessible
      to you).
     </para>
    </listitem>
    <listitem>
     <para>
      A package may contain a
      <filename>/usr/share/doc/<replaceable>packagename</replaceable>/README.SUSE</filename>
      or <filename>README.SuSE</filename> file which contains general,
      high-level information specific to the &suse; package.
     </para>
    </listitem>
    <listitem>
     <para>
      The RPM source package contains the patches that were applied during
      the building of the regular binary RPMs as separate files that can be
      interpreted if you are familiar with reading source code. See
      <xref linkend="sec.zypper.softman.sources"/> for installing sources of
      &sle; software, see <xref linkend="sec.rpm.sources"/> for building
      packages on &sle; and see the
      <link xlink:href="http://www.rpm.org/max-rpm/">Maximum RPM</link> book
      for the inner workings of &sle; software package builds.
     </para>
    </listitem>
    <listitem>
     <para>
      For security bug fixes, the
      <link xlink:href="http://www.suse.com/support/security/#1">&suse;
      security announcements</link>. These often refer to bugs through
      standardized names like <literal>CAN-2005-2495</literal> which are
      maintained by the <link xlink:href="http://cve.mitre.org">Common
      Vulnerabilities and Exposures</link> project.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.wagonhooks">
  <title>Background: Migration Hooks for &yast; Wagon</title>

<!-- FATE#314132 -->

  <para>
   Migration hooks allow you to run a custom external script at some point
   during the migration process. These scripts allow you to handle specific
   problems that cannot be handled via the usual RPM scripts, or allow you
   to perform any extra actions that might be needed during migration (not
   required during normal package update).
  </para>

  <para>
   The migration hooks are executed with root privileges so it is possible
   to do any maintenance tasks in the scripts (starting/stopping services,
   data backup, data migration, etc...). The scripts must not be
   interactive; STDIN and STDOUT are redirected to pipes when running in
   &yast;. The X session should not be used, as it might not be available
   in all cases (for example, when running in text mode). Do not forget to
   set the executable permission for the hook scripts.
  </para>

  <para>
   Migration hooks are supported in
   <systemitem class="resource">yast2-wagon</systemitem> package version
   2.17.32.1 (provided as an update for SLES11-SP2) or 2.17.34 (included in
   SLES11-SP3) or higher versions.
  </para>

  <sect2>
   <title>Hook Script Location and Name Conventions</title>
   <para>
    The scripts are searched in
    <filename>/var/lib/YaST2/wagon/hooks/</filename> directory. The expected
    script name is in the format
    <replaceable>step_seq_prefix_name</replaceable>, where:
   </para>
   <variablelist>
    <varlistentry>
     <term><replaceable>step</replaceable>
     </term>
     <listitem>
      <para>
       is a predefined migration step name, describing the current migration
       step.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>seq</replaceable>
     </term>
     <listitem>
      <para>
       is a sequence number in range 00...99, which makes it possible to set
       the order in which the scripts are executed. (It is important to keep
       the zeros at the beginning to enable correct sorting!)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>prefix</replaceable>
     </term>
     <listitem>
      <para>
       should be unique to avoid conflicts (like a namespace). Use package
       name (if it is part of a package) or your vendor name, Internet
       domain name, etc., anything that can be considered sufficiently
       unique
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>name</replaceable>
     </term>
     <listitem>
      <para>
       can be any string (used to differentiate the scripts). Some
       descriptive name is recommended.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <example>
    <title>Hook Script with Full Path</title>
<screen>/var/lib/YaST2/wagon/hooks/before_package_migration_00_postgresql_backup</screen>
   </example>
  </sect2>

  <sect2>
   <title>Hook Script Exit Value</title>
   <para>
    The script should return exit value 0. If it fails (any non-zero exit
    value) an error message is displayed in Wagon and it is possible to
    restart the script, ignore the failure (and continue with other scripts)
    or completely cancel the hooks for the current step and stage.
   </para>
  </sect2>

  <sect2>
   <title>Idempotent Scripts</title>
   <para>
    The hook scripts <emphasis>can be potentially run more times</emphasis>
    (when going back and forth in the Wagon dialogs, Wagon might restart
    itself or some steps might be executed multiple times in the migration
    workflow), so the scripts have to cope with that fact (they can check at
    the beginning whether they need to do the action or the action has been
    already done or they can create a simple temporary stamp file or
    otherwise solve multiple runs properly).
   </para>
  </sect2>

  <sect2>
   <title>List of Supported Hooks</title>
   <remark>toms 2014-02-11: See Trello card#39, https://github.com/yast/yast-yast2/blob/master/library/general/doc/Hooks.md</remark>
   <para>
    Some hooks are optional (because the depend on the previous results or
    depend on user selected values). Note that some hooks are called
    multiple times (for example, registration is called before migration and
    after migration). Here is the list of supported hooks (step names) in
    execution order:
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_init</command>
     </term>
     <listitem>
      <para>
       started at the very beginning (note: it is called again after Wagon
       restarts)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_welcome</command>
     </term>
     <term><command>after_welcome</command>
     </term>
     <listitem>
      <para>
       started before/after displaying the welcome dialog
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration_check</command>
     </term>
     <term><command>after_registration_check</command>
     </term>
     <listitem>
      <para>
       Wagon checks the registration status (if registration of some
       products has expired the migration might fail). If everything is OK,
       no dialog is displayed and Wagon automatically continues with the
       next step
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_custom_url</command>
     </term>
     <term><command>after_custom_url</command>
     </term>
     <listitem>
      <para>
       repository manager is started (optional, in Patch CD mode only)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_self_update</command>
     </term>
     <term><command>after_self_update</command>
     </term>
     <listitem>
      <para>
       called before/after Wagon updates itself (to ensure the latest
       version is used for migration)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_installing_migration_products</command>
     </term>
     <term><command>after_installing_migration_products</command>
     </term>
     <listitem>
      <para>
       called before/after installing the migration products
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_selecting_migration_source</command>
     </term>
     <term><command>after_selecting_migration_source</command>
     </term>
     <listitem>
      <para>
       Wagon asks the user to migrate via &ncc; repositories or using a
       custom repository; the next step depends on the user selection
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration</command>
     </term>
     <term><command>after_registration</command>
     </term>
     <listitem>
      <para>
       running SUSE register (to add migration repositories)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_repo_selection</command>
     </term>
     <term><command>after_repo_selection</command>
     </term>
     <listitem>
      <para>
       manual repository management
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_set_migration_repo</command>
     </term>
     <term><command>after_set_migration_repo</command>
     </term>
     <listitem>
      <para>
       selecting migration repositories (full/minimal migration when using
       &ncc;) or update repository selection (custom repository
       migration)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_package_migration</command>
     </term>
     <listitem>
      <para>
       before package update starts, after this step the real migration
       starts and it is not possible to go back to the previous state
       automatically (aborting in this phase results in an inconsistent
       (half upgraded) system, and manual rollback is needed)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration</command>
     </term>
     <term><command>after_registration</command>
     </term>
     <listitem>
      <para>
       running SUSE register (to register updated products)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_congratulate</command>
     </term>
     <term><command>after_congratulate</command>
     </term>
     <listitem>
      <para>
       before/after Wagon displays the congratulation dialog as a result of
       a successful migration
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_exit</command>
     </term>
     <listitem>
      <para>
       called just before Wagon exits (always, regardless the migration
       result, also after abort and at restart)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Abort Hooks</title>
   <para>
    These are special abort hooks which are called when the user aborts the
    migration. These hooks can be called in any step in the migration
    workflow therefore the execution order cannot be guaranteed. The scripts
    need to check the current state if they rely on the results of other
    hooks.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_abort</command>
     </term>
     <listitem>
      <para>
       user confirmed aborting the migration
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_abort_rollback</command>
     </term>
     <term><command>after_abort_rollback</command>
     </term>
     <listitem>
      <para>
       user confirmed rollback after abort (reverting to the old products
       installed before starting migration). These hooks are called after
       before_abort and skipped when the user does not confirm rollback.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Restart Hooks</title>
   <para>
    These hooks are called whenever Wagon restarts itself.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_restart</command>
     </term>
     <listitem>
      <para>
       Wagon is finishing and will be started again
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>after_restart</command>
     </term>
     <listitem>
      <para>
       Wagon has restarted and runs the next step in the migration workflow
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Usually Used Hooks</title>
   <para>
    The list of hooks is fairly large, but many of them only make sense in
    special cases. In normal use cases these should be given preference:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      To do some action before the system is migrated (still running the
      previous version) use the <command>before_package_migration</command>
      hook.
     </para>
     <para>
      At this point it is clear that the migration is ready and is about to
      start, whereas in all steps before it was possible to abort the
      migration.
<!-- and therefore calling the
           scripts might have not been necessary -->
     </para>
    </listitem>
    <listitem>
     <para>
      To do some action after the system has migrated (the system is running
      the new migrated version, but some things might not be active yet, for
      example, updated kernel requires reboot, updated services might need
      restart etc..), use <command>before_congratulate</command> or
      <command>after_congratulate</command> hook.
     </para>
     <para>
      This can be also used for cleaning up the temporary results of the
      <command>before_package_migration</command> hook. At this point the
      migration has successfully finished.
     </para>
    </listitem>
    <listitem>
     <para>
      To reverse the changes if the migration is aborted, use one of the
      abort hooks depending on the case. Keep in mind that the abort hooks
      can be called anytime, so the revert might not be needed (the hook
      that does the changes might not have been called yet). The abort hooks
      need to check the current state.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2>
   <title>Obsolete Hooks</title>
   <para>
    Older versions of Wagon supported only two hook scripts:
    <filename>/usr/lib/YaST2/bin/wagon_hook_init</filename> and
    <filename>/usr/lib/YaST2/bin/wagon_hook_finish</filename>. The problem
    was that only one script could be run as a hook and it was not possible
    to put hooks directly into RPM packages.
   </para>
   <para>
    These old hook scripts are still supported in newer versions of Wagon
    for backward compatibility, but the new hooks
    <command>before_init</command> and <command>before_exit</command> should
    be used instead of the obsolete ones.
   </para>
  </sect2>
 </sect1>
</chapter>
